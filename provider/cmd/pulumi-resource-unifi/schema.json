{
    "name": "unifi",
    "displayName": "Unifi",
    "description": "A Pulumi package for creating and managing Unifi network resources.",
    "keywords": [
        "pulumi",
        "unifi",
        "category/network"
    ],
    "homepage": "https://github.com/pulumiverse",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`unifi` Terraform Provider](https://github.com/paultyng/terraform-provider-unifi).",
    "repository": "https://github.com/pulumiverse/pulumi-unifi",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "firewall": "Firewall",
                "iam": "IAM",
                "index": "index",
                "port": "Port",
                "setting": "Setting"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-unifi/sdk/go/unifi",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "java": {
            "basePackage": "com.pulumiverse",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@pulumiverse/unifi",
            "packageDescription": "A Pulumi package for creating and managing Unifi network resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/paultyng/terraform-provider-unifi)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-unifi` repo](https://github.com/pulumiverse/pulumi-unifi/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-unifi` repo](https://github.com/paultyng/terraform-provider-unifi/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "packageName": "pulumiverse_unifi",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/paultyng/terraform-provider-unifi)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-unifi` repo](https://github.com/pulumiverse/pulumi-unifi/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-unifi` repo](https://github.com/paultyng/terraform-provider-unifi/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "allowInsecure": {
                "type": "boolean",
                "description": "Skip verification of TLS certificates of API requests. You may need to set this to `true` if you are using your local\nAPI without setting up a signed certificate. Can be specified with the `UNIFI_INSECURE` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "UNIFI_INSECURE"
                    ]
                }
            },
            "apiUrl": {
                "type": "string",
                "description": "URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the\npath (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more\nstandard controller paths.\n",
                "defaultInfo": {
                    "environment": [
                        "UNIFI_API"
                    ]
                }
            },
            "password": {
                "type": "string",
                "description": "Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "UNIFI_PASSWORD"
                    ]
                }
            },
            "site": {
                "type": "string",
                "description": "The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.\nDefault: `default`\n",
                "defaultInfo": {
                    "environment": [
                        "UNIFI_SITE"
                    ]
                }
            },
            "username": {
                "type": "string",
                "description": "Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "UNIFI_USERNAME"
                    ]
                }
            }
        },
        "defaults": [
            "apiUrl",
            "password",
            "site",
            "username"
        ]
    },
    "types": {
        "unifi:index/DevicePortOverride:DevicePortOverride": {
            "properties": {
                "aggregateNumPorts": {
                    "type": "integer",
                    "description": "Number of ports in the aggregate.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-readable name of the port.\n"
                },
                "number": {
                    "type": "integer",
                    "description": "Switch port number.\n"
                },
                "opMode": {
                    "type": "string",
                    "description": "Operating mode of the port, valid values are `switch`, `mirror`, and `aggregate`. Defaults to `switch`.\n"
                },
                "portProfileId": {
                    "type": "string",
                    "description": "ID of the Port Profile used on this port.\n"
                }
            },
            "type": "object",
            "required": [
                "number"
            ]
        },
        "unifi:index/RadiusProfileAcctServer:RadiusProfileAcctServer": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP address of accounting service server.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of accounting service. Defaults to `1813`.\n"
                },
                "xsecret": {
                    "type": "string",
                    "description": "RADIUS secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "ip",
                "xsecret"
            ]
        },
        "unifi:index/RadiusProfileAuthServer:RadiusProfileAuthServer": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP address of authentication service server.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of authentication service. Defaults to `1812`.\n"
                },
                "xsecret": {
                    "type": "string",
                    "description": "RADIUS secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "ip",
                "xsecret"
            ]
        },
        "unifi:index/WlanSchedule:WlanSchedule": {
            "properties": {
                "dayOfWeek": {
                    "type": "string",
                    "description": "Day of week for the block. Valid values are `sun`, `mon`, `tue`, `wed`, `thu`, `fri`, `sat`.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "Length of the block in minutes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the block.\n"
                },
                "startHour": {
                    "type": "integer",
                    "description": "Start hour for the block (0-23).\n"
                },
                "startMinute": {
                    "type": "integer",
                    "description": "Start minute for the block (0-59). Defaults to `0`.\n"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "startHour"
            ]
        },
        "unifi:setting/MgmtSshKey:MgmtSshKey": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Comment.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Public SSH key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of SSH key.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of SSH key, e.g. ssh-rsa.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the unifi package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "allowInsecure": {
                "type": "boolean",
                "description": "Skip verification of TLS certificates of API requests. You may need to set this to `true` if you are using your local\nAPI without setting up a signed certificate. Can be specified with the `UNIFI_INSECURE` environment variable.\n"
            },
            "apiUrl": {
                "type": "string",
                "description": "URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the\npath (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more\nstandard controller paths.\n"
            },
            "password": {
                "type": "string",
                "description": "Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.\n"
            },
            "site": {
                "type": "string",
                "description": "The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.\nDefault: `default`\n"
            },
            "username": {
                "type": "string",
                "description": "Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.\n"
            }
        },
        "inputProperties": {
            "allowInsecure": {
                "type": "boolean",
                "description": "Skip verification of TLS certificates of API requests. You may need to set this to `true` if you are using your local\nAPI without setting up a signed certificate. Can be specified with the `UNIFI_INSECURE` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "UNIFI_INSECURE"
                    ]
                }
            },
            "apiUrl": {
                "type": "string",
                "description": "URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the\npath (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more\nstandard controller paths.\n",
                "defaultInfo": {
                    "environment": [
                        "UNIFI_API"
                    ]
                }
            },
            "password": {
                "type": "string",
                "description": "Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "UNIFI_PASSWORD"
                    ]
                }
            },
            "site": {
                "type": "string",
                "description": "The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.\nDefault: `default`\n",
                "defaultInfo": {
                    "environment": [
                        "UNIFI_SITE"
                    ]
                }
            },
            "username": {
                "type": "string",
                "description": "Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "UNIFI_USERNAME"
                    ]
                }
            }
        },
        "methods": {
            "terraformConfig": "pulumi:providers:unifi/terraformConfig"
        }
    },
    "resources": {
        "unifi:firewall/group:Group": {
            "description": "`unifi.firewall.Group` manages groups of addresses or ports for use in firewall rules (`unifi.firewall.Rule`).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst config = new pulumi.Config();\nconst laptopIps = config.requireObject\u003cArray\u003cstring\u003e\u003e(\"laptopIps\");\nconst canPrint = new unifi.firewall.Group(\"can_print\", {\n    name: \"can-print\",\n    type: \"address-group\",\n    members: laptopIps,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_unifi as unifi\n\nconfig = pulumi.Config()\nlaptop_ips = config.require_object(\"laptopIps\")\ncan_print = unifi.firewall.Group(\"can_print\",\n    name=\"can-print\",\n    type=\"address-group\",\n    members=laptop_ips)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumiverse.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var laptopIps = config.RequireObject\u003cstring[]\u003e(\"laptopIps\");\n    var canPrint = new Unifi.Firewall.Group(\"can_print\", new()\n    {\n        Name = \"can-print\",\n        Type = \"address-group\",\n        Members = laptopIps,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tlaptopIps := cfg.Require(\"laptopIps\")\n\t\t_, err := firewall.NewGroup(ctx, \"can_print\", \u0026firewall.GroupArgs{\n\t\t\tName:    pulumi.String(\"can-print\"),\n\t\t\tType:    pulumi.String(\"address-group\"),\n\t\t\tMembers: laptopIps,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumiverse.unifi.firewall.Group;\nimport com.pulumiverse.unifi.firewall.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var laptopIps = config.get(\"laptopIps\");\n        var canPrint = new Group(\"canPrint\", GroupArgs.builder()\n            .name(\"can-print\")\n            .type(\"address-group\")\n            .members(laptopIps)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  laptopIps:\n    type: list(string)\nresources:\n  canPrint:\n    type: unifi:firewall:Group\n    name: can_print\n    properties:\n      name: can-print\n      type: address-group\n      members: ${laptopIps}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The members of the firewall group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the firewall group.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the firewall group with.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the firewall group. Must be one of: `address-group`, `port-group`, or `ipv6-address-group`.\n"
                }
            },
            "required": [
                "members",
                "name",
                "site",
                "type"
            ],
            "inputProperties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The members of the firewall group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the firewall group.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the firewall group with.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the firewall group. Must be one of: `address-group`, `port-group`, or `ipv6-address-group`.\n"
                }
            },
            "requiredInputs": [
                "members",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The members of the firewall group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the firewall group.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the firewall group with.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the firewall group. Must be one of: `address-group`, `port-group`, or `ipv6-address-group`.\n"
                    }
                },
                "type": "object"
            }
        },
        "unifi:firewall/rule:Rule": {
            "description": "`unifi.firewall.Rule` manages an individual firewall rule on the gateway.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst config = new pulumi.Config();\nconst ipAddress = config.require(\"ipAddress\");\nconst dropAll = new unifi.firewall.Rule(\"drop_all\", {\n    name: \"drop all\",\n    action: \"drop\",\n    ruleset: \"LAN_IN\",\n    ruleIndex: 2011,\n    protocol: \"all\",\n    dstAddress: ipAddress,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_unifi as unifi\n\nconfig = pulumi.Config()\nip_address = config.require(\"ipAddress\")\ndrop_all = unifi.firewall.Rule(\"drop_all\",\n    name=\"drop all\",\n    action=\"drop\",\n    ruleset=\"LAN_IN\",\n    rule_index=2011,\n    protocol=\"all\",\n    dst_address=ip_address)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumiverse.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var ipAddress = config.Require(\"ipAddress\");\n    var dropAll = new Unifi.Firewall.Rule(\"drop_all\", new()\n    {\n        Name = \"drop all\",\n        Action = \"drop\",\n        Ruleset = \"LAN_IN\",\n        RuleIndex = 2011,\n        Protocol = \"all\",\n        DstAddress = ipAddress,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tipAddress := cfg.Require(\"ipAddress\")\n\t\t_, err := firewall.NewRule(ctx, \"drop_all\", \u0026firewall.RuleArgs{\n\t\t\tName:       pulumi.String(\"drop all\"),\n\t\t\tAction:     pulumi.String(\"drop\"),\n\t\t\tRuleset:    pulumi.String(\"LAN_IN\"),\n\t\t\tRuleIndex:  pulumi.Int(2011),\n\t\t\tProtocol:   pulumi.String(\"all\"),\n\t\t\tDstAddress: pulumi.String(ipAddress),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumiverse.unifi.firewall.Rule;\nimport com.pulumiverse.unifi.firewall.RuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var ipAddress = config.get(\"ipAddress\");\n        var dropAll = new Rule(\"dropAll\", RuleArgs.builder()\n            .name(\"drop all\")\n            .action(\"drop\")\n            .ruleset(\"LAN_IN\")\n            .ruleIndex(2011)\n            .protocol(\"all\")\n            .dstAddress(ipAddress)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  ipAddress:\n    type: string\nresources:\n  dropAll:\n    type: unifi:firewall:Rule\n    name: drop_all\n    properties:\n      name: drop all\n      action: drop\n      ruleset: LAN_IN\n      ruleIndex: 2011\n      protocol: all\n      dstAddress: ${ipAddress}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the ID from the controller API/UI\n\n```sh\n$ pulumi import unifi:firewall/rule:Rule my_rule 5f7080eb6b8969064f80494f\n```\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action of the firewall rule. Must be one of `drop`, `accept`, or `reject`.\n"
                },
                "dstAddress": {
                    "type": "string",
                    "description": "The destination address of the firewall rule.\n"
                },
                "dstAddressIpv6": {
                    "type": "string",
                    "description": "The IPv6 destination address of the firewall rule.\n"
                },
                "dstFirewallGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The destination firewall group IDs of the firewall rule.\n"
                },
                "dstNetworkId": {
                    "type": "string",
                    "description": "The destination network ID of the firewall rule.\n"
                },
                "dstNetworkType": {
                    "type": "string",
                    "description": "The destination network type of the firewall rule. Can be one of `ADDRv4` or `NETv4`. Defaults to `NETv4`.\n"
                },
                "dstPort": {
                    "type": "string",
                    "description": "The destination port of the firewall rule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the rule should be enabled. Defaults to `true`.\n"
                },
                "icmpTypename": {
                    "type": "string",
                    "description": "ICMP type name.\n"
                },
                "icmpV6Typename": {
                    "type": "string",
                    "description": "ICMPv6 type name.\n"
                },
                "ipSec": {
                    "type": "string",
                    "description": "Specify whether the rule matches on IPsec packets. Can be one of `match-ipset` or `match-none`.\n"
                },
                "logging": {
                    "type": "boolean",
                    "description": "Enable logging for the firewall rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the firewall rule.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the rule.\n"
                },
                "protocolV6": {
                    "type": "string",
                    "description": "The IPv6 protocol of the rule.\n"
                },
                "ruleIndex": {
                    "type": "integer",
                    "description": "The index of the rule. Must be \u003e= 2000 \u003c 3000 or \u003e= 4000 \u003c 5000.\n"
                },
                "ruleset": {
                    "type": "string",
                    "description": "The ruleset for the rule. This is from the perspective of the security gateway. Must be one of `WAN_IN`, `WAN_OUT`, `WAN_LOCAL`, `LAN_IN`, `LAN_OUT`, `LAN_LOCAL`, `GUEST_IN`, `GUEST_OUT`, `GUEST_LOCAL`, `WANv6_IN`, `WANv6_OUT`, `WANv6_LOCAL`, `LANv6_IN`, `LANv6_OUT`, `LANv6_LOCAL`, `GUESTv6_IN`, `GUESTv6_OUT`, or `GUESTv6_LOCAL`.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the firewall rule with.\n"
                },
                "srcAddress": {
                    "type": "string",
                    "description": "The source address for the firewall rule.\n"
                },
                "srcAddressIpv6": {
                    "type": "string",
                    "description": "The IPv6 source address for the firewall rule.\n"
                },
                "srcFirewallGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The source firewall group IDs for the firewall rule.\n"
                },
                "srcMac": {
                    "type": "string",
                    "description": "The source MAC address of the firewall rule.\n"
                },
                "srcNetworkId": {
                    "type": "string",
                    "description": "The source network ID for the firewall rule.\n"
                },
                "srcNetworkType": {
                    "type": "string",
                    "description": "The source network type of the firewall rule. Can be one of `ADDRv4` or `NETv4`. Defaults to `NETv4`.\n"
                },
                "srcPort": {
                    "type": "string",
                    "description": "The source port of the firewall rule.\n"
                },
                "stateEstablished": {
                    "type": "boolean",
                    "description": "Match where the state is established.\n"
                },
                "stateInvalid": {
                    "type": "boolean",
                    "description": "Match where the state is invalid.\n"
                },
                "stateNew": {
                    "type": "boolean",
                    "description": "Match where the state is new.\n"
                },
                "stateRelated": {
                    "type": "boolean",
                    "description": "Match where the state is related.\n"
                }
            },
            "required": [
                "action",
                "name",
                "ruleIndex",
                "ruleset",
                "site"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "The action of the firewall rule. Must be one of `drop`, `accept`, or `reject`.\n"
                },
                "dstAddress": {
                    "type": "string",
                    "description": "The destination address of the firewall rule.\n"
                },
                "dstAddressIpv6": {
                    "type": "string",
                    "description": "The IPv6 destination address of the firewall rule.\n"
                },
                "dstFirewallGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The destination firewall group IDs of the firewall rule.\n"
                },
                "dstNetworkId": {
                    "type": "string",
                    "description": "The destination network ID of the firewall rule.\n"
                },
                "dstNetworkType": {
                    "type": "string",
                    "description": "The destination network type of the firewall rule. Can be one of `ADDRv4` or `NETv4`. Defaults to `NETv4`.\n"
                },
                "dstPort": {
                    "type": "string",
                    "description": "The destination port of the firewall rule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the rule should be enabled. Defaults to `true`.\n"
                },
                "icmpTypename": {
                    "type": "string",
                    "description": "ICMP type name.\n"
                },
                "icmpV6Typename": {
                    "type": "string",
                    "description": "ICMPv6 type name.\n"
                },
                "ipSec": {
                    "type": "string",
                    "description": "Specify whether the rule matches on IPsec packets. Can be one of `match-ipset` or `match-none`.\n"
                },
                "logging": {
                    "type": "boolean",
                    "description": "Enable logging for the firewall rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the firewall rule.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the rule.\n"
                },
                "protocolV6": {
                    "type": "string",
                    "description": "The IPv6 protocol of the rule.\n"
                },
                "ruleIndex": {
                    "type": "integer",
                    "description": "The index of the rule. Must be \u003e= 2000 \u003c 3000 or \u003e= 4000 \u003c 5000.\n"
                },
                "ruleset": {
                    "type": "string",
                    "description": "The ruleset for the rule. This is from the perspective of the security gateway. Must be one of `WAN_IN`, `WAN_OUT`, `WAN_LOCAL`, `LAN_IN`, `LAN_OUT`, `LAN_LOCAL`, `GUEST_IN`, `GUEST_OUT`, `GUEST_LOCAL`, `WANv6_IN`, `WANv6_OUT`, `WANv6_LOCAL`, `LANv6_IN`, `LANv6_OUT`, `LANv6_LOCAL`, `GUESTv6_IN`, `GUESTv6_OUT`, or `GUESTv6_LOCAL`.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the firewall rule with.\n",
                    "willReplaceOnChanges": true
                },
                "srcAddress": {
                    "type": "string",
                    "description": "The source address for the firewall rule.\n"
                },
                "srcAddressIpv6": {
                    "type": "string",
                    "description": "The IPv6 source address for the firewall rule.\n"
                },
                "srcFirewallGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The source firewall group IDs for the firewall rule.\n"
                },
                "srcMac": {
                    "type": "string",
                    "description": "The source MAC address of the firewall rule.\n"
                },
                "srcNetworkId": {
                    "type": "string",
                    "description": "The source network ID for the firewall rule.\n"
                },
                "srcNetworkType": {
                    "type": "string",
                    "description": "The source network type of the firewall rule. Can be one of `ADDRv4` or `NETv4`. Defaults to `NETv4`.\n"
                },
                "srcPort": {
                    "type": "string",
                    "description": "The source port of the firewall rule.\n"
                },
                "stateEstablished": {
                    "type": "boolean",
                    "description": "Match where the state is established.\n"
                },
                "stateInvalid": {
                    "type": "boolean",
                    "description": "Match where the state is invalid.\n"
                },
                "stateNew": {
                    "type": "boolean",
                    "description": "Match where the state is new.\n"
                },
                "stateRelated": {
                    "type": "boolean",
                    "description": "Match where the state is related.\n"
                }
            },
            "requiredInputs": [
                "action",
                "ruleIndex",
                "ruleset"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The action of the firewall rule. Must be one of `drop`, `accept`, or `reject`.\n"
                    },
                    "dstAddress": {
                        "type": "string",
                        "description": "The destination address of the firewall rule.\n"
                    },
                    "dstAddressIpv6": {
                        "type": "string",
                        "description": "The IPv6 destination address of the firewall rule.\n"
                    },
                    "dstFirewallGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The destination firewall group IDs of the firewall rule.\n"
                    },
                    "dstNetworkId": {
                        "type": "string",
                        "description": "The destination network ID of the firewall rule.\n"
                    },
                    "dstNetworkType": {
                        "type": "string",
                        "description": "The destination network type of the firewall rule. Can be one of `ADDRv4` or `NETv4`. Defaults to `NETv4`.\n"
                    },
                    "dstPort": {
                        "type": "string",
                        "description": "The destination port of the firewall rule.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether the rule should be enabled. Defaults to `true`.\n"
                    },
                    "icmpTypename": {
                        "type": "string",
                        "description": "ICMP type name.\n"
                    },
                    "icmpV6Typename": {
                        "type": "string",
                        "description": "ICMPv6 type name.\n"
                    },
                    "ipSec": {
                        "type": "string",
                        "description": "Specify whether the rule matches on IPsec packets. Can be one of `match-ipset` or `match-none`.\n"
                    },
                    "logging": {
                        "type": "boolean",
                        "description": "Enable logging for the firewall rule.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the firewall rule.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol of the rule.\n"
                    },
                    "protocolV6": {
                        "type": "string",
                        "description": "The IPv6 protocol of the rule.\n"
                    },
                    "ruleIndex": {
                        "type": "integer",
                        "description": "The index of the rule. Must be \u003e= 2000 \u003c 3000 or \u003e= 4000 \u003c 5000.\n"
                    },
                    "ruleset": {
                        "type": "string",
                        "description": "The ruleset for the rule. This is from the perspective of the security gateway. Must be one of `WAN_IN`, `WAN_OUT`, `WAN_LOCAL`, `LAN_IN`, `LAN_OUT`, `LAN_LOCAL`, `GUEST_IN`, `GUEST_OUT`, `GUEST_LOCAL`, `WANv6_IN`, `WANv6_OUT`, `WANv6_LOCAL`, `LANv6_IN`, `LANv6_OUT`, `LANv6_LOCAL`, `GUESTv6_IN`, `GUESTv6_OUT`, or `GUESTv6_LOCAL`.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the firewall rule with.\n",
                        "willReplaceOnChanges": true
                    },
                    "srcAddress": {
                        "type": "string",
                        "description": "The source address for the firewall rule.\n"
                    },
                    "srcAddressIpv6": {
                        "type": "string",
                        "description": "The IPv6 source address for the firewall rule.\n"
                    },
                    "srcFirewallGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The source firewall group IDs for the firewall rule.\n"
                    },
                    "srcMac": {
                        "type": "string",
                        "description": "The source MAC address of the firewall rule.\n"
                    },
                    "srcNetworkId": {
                        "type": "string",
                        "description": "The source network ID for the firewall rule.\n"
                    },
                    "srcNetworkType": {
                        "type": "string",
                        "description": "The source network type of the firewall rule. Can be one of `ADDRv4` or `NETv4`. Defaults to `NETv4`.\n"
                    },
                    "srcPort": {
                        "type": "string",
                        "description": "The source port of the firewall rule.\n"
                    },
                    "stateEstablished": {
                        "type": "boolean",
                        "description": "Match where the state is established.\n"
                    },
                    "stateInvalid": {
                        "type": "boolean",
                        "description": "Match where the state is invalid.\n"
                    },
                    "stateNew": {
                        "type": "boolean",
                        "description": "Match where the state is new.\n"
                    },
                    "stateRelated": {
                        "type": "boolean",
                        "description": "Match where the state is related.\n"
                    }
                },
                "type": "object"
            }
        },
        "unifi:iam/group:Group": {
            "description": "`unifi.iam.Group` manages a user group (called \"client group\" in the UI), which can be used to limit bandwidth for groups of users.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst wifi = new unifi.iam.Group(\"wifi\", {\n    name: \"wifi\",\n    qosRateMaxDown: 2000,\n    qosRateMaxUp: 10,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_unifi as unifi\n\nwifi = unifi.iam.Group(\"wifi\",\n    name=\"wifi\",\n    qos_rate_max_down=2000,\n    qos_rate_max_up=10)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumiverse.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wifi = new Unifi.IAM.Group(\"wifi\", new()\n    {\n        Name = \"wifi\",\n        QosRateMaxDown = 2000,\n        QosRateMaxUp = 10,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := iam.NewGroup(ctx, \"wifi\", \u0026iam.GroupArgs{\n\t\t\tName:           pulumi.String(\"wifi\"),\n\t\t\tQosRateMaxDown: pulumi.Int(2000),\n\t\t\tQosRateMaxUp:   pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumiverse.unifi.iam.Group;\nimport com.pulumiverse.unifi.iam.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var wifi = new Group(\"wifi\", GroupArgs.builder()\n            .name(\"wifi\")\n            .qosRateMaxDown(2000)\n            .qosRateMaxUp(10)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  wifi:\n    type: unifi:iam:Group\n    properties:\n      name: wifi\n      qosRateMaxDown: 2000 # 2mbps\n      qosRateMaxUp: 10 # 10kbps\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the ID\n\n```sh\n$ pulumi import unifi:iam/group:Group wifi 5fe6261995fe130013456a36\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the user group.\n"
                },
                "qosRateMaxDown": {
                    "type": "integer",
                    "description": "The QOS maximum download rate. Defaults to `-1`.\n"
                },
                "qosRateMaxUp": {
                    "type": "integer",
                    "description": "The QOS maximum upload rate. Defaults to `-1`.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the user group with.\n"
                }
            },
            "required": [
                "name",
                "site"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the user group.\n"
                },
                "qosRateMaxDown": {
                    "type": "integer",
                    "description": "The QOS maximum download rate. Defaults to `-1`.\n"
                },
                "qosRateMaxUp": {
                    "type": "integer",
                    "description": "The QOS maximum upload rate. Defaults to `-1`.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the user group with.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the user group.\n"
                    },
                    "qosRateMaxDown": {
                        "type": "integer",
                        "description": "The QOS maximum download rate. Defaults to `-1`.\n"
                    },
                    "qosRateMaxUp": {
                        "type": "integer",
                        "description": "The QOS maximum upload rate. Defaults to `-1`.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the user group with.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "unifi:iam/user:User": {
            "description": "`unifi.iam.User` manages a user (or \"client\" in the UI) of the network, these are identified by unique MAC addresses.\n\nUsers are created in the controller when observed on the network, so the resource defaults to allowing itself to just take over management of a MAC address, but this can be turned off.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst test = new unifi.iam.User(\"test\", {\n    mac: \"01:23:45:67:89:AB\",\n    name: \"some client\",\n    note: \"my note\",\n    fixedIp: \"10.0.0.50\",\n    networkId: myVlan.id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_unifi as unifi\n\ntest = unifi.iam.User(\"test\",\n    mac=\"01:23:45:67:89:AB\",\n    name=\"some client\",\n    note=\"my note\",\n    fixed_ip=\"10.0.0.50\",\n    network_id=my_vlan[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumiverse.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Unifi.IAM.User(\"test\", new()\n    {\n        Mac = \"01:23:45:67:89:AB\",\n        Name = \"some client\",\n        Note = \"my note\",\n        FixedIp = \"10.0.0.50\",\n        NetworkId = myVlan.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := iam.NewUser(ctx, \"test\", \u0026iam.UserArgs{\n\t\t\tMac:       pulumi.String(\"01:23:45:67:89:AB\"),\n\t\t\tName:      pulumi.String(\"some client\"),\n\t\t\tNote:      pulumi.String(\"my note\"),\n\t\t\tFixedIp:   pulumi.String(\"10.0.0.50\"),\n\t\t\tNetworkId: pulumi.Any(myVlan.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumiverse.unifi.iam.User;\nimport com.pulumiverse.unifi.iam.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new User(\"test\", UserArgs.builder()\n            .mac(\"01:23:45:67:89:AB\")\n            .name(\"some client\")\n            .note(\"my note\")\n            .fixedIp(\"10.0.0.50\")\n            .networkId(myVlan.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: unifi:iam:User\n    properties:\n      mac: 01:23:45:67:89:AB\n      name: some client\n      note: my note\n      fixedIp: 10.0.0.50\n      networkId: ${myVlan.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "allowExisting": {
                    "type": "boolean",
                    "description": "Specifies whether this resource should just take over control of an existing user. Defaults to `true`.\n"
                },
                "blocked": {
                    "type": "boolean",
                    "description": "Specifies whether this user should be blocked from the network.\n"
                },
                "devIdOverride": {
                    "type": "integer",
                    "description": "Override the device fingerprint.\n"
                },
                "fixedIp": {
                    "type": "string",
                    "description": "A fixed IPv4 address for this user.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the user.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The IP address of the user.\n"
                },
                "localDnsRecord": {
                    "type": "string",
                    "description": "Specifies the local DNS record for this user.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "The MAC address of the user.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network ID for this user.\n"
                },
                "note": {
                    "type": "string",
                    "description": "A note with additional information for the user.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the user with.\n"
                },
                "skipForgetOnDestroy": {
                    "type": "boolean",
                    "description": "Specifies whether this resource should tell the controller to \"forget\" the user on destroy. Defaults to `false`.\n"
                },
                "userGroupId": {
                    "type": "string",
                    "description": "The user group ID for the user.\n"
                }
            },
            "required": [
                "hostname",
                "ip",
                "mac",
                "name",
                "site"
            ],
            "inputProperties": {
                "allowExisting": {
                    "type": "boolean",
                    "description": "Specifies whether this resource should just take over control of an existing user. Defaults to `true`.\n"
                },
                "blocked": {
                    "type": "boolean",
                    "description": "Specifies whether this user should be blocked from the network.\n"
                },
                "devIdOverride": {
                    "type": "integer",
                    "description": "Override the device fingerprint.\n"
                },
                "fixedIp": {
                    "type": "string",
                    "description": "A fixed IPv4 address for this user.\n"
                },
                "localDnsRecord": {
                    "type": "string",
                    "description": "Specifies the local DNS record for this user.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "The MAC address of the user.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network ID for this user.\n"
                },
                "note": {
                    "type": "string",
                    "description": "A note with additional information for the user.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the user with.\n",
                    "willReplaceOnChanges": true
                },
                "skipForgetOnDestroy": {
                    "type": "boolean",
                    "description": "Specifies whether this resource should tell the controller to \"forget\" the user on destroy. Defaults to `false`.\n"
                },
                "userGroupId": {
                    "type": "string",
                    "description": "The user group ID for the user.\n"
                }
            },
            "requiredInputs": [
                "mac"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "allowExisting": {
                        "type": "boolean",
                        "description": "Specifies whether this resource should just take over control of an existing user. Defaults to `true`.\n"
                    },
                    "blocked": {
                        "type": "boolean",
                        "description": "Specifies whether this user should be blocked from the network.\n"
                    },
                    "devIdOverride": {
                        "type": "integer",
                        "description": "Override the device fingerprint.\n"
                    },
                    "fixedIp": {
                        "type": "string",
                        "description": "A fixed IPv4 address for this user.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the user.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The IP address of the user.\n"
                    },
                    "localDnsRecord": {
                        "type": "string",
                        "description": "Specifies the local DNS record for this user.\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "The MAC address of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The network ID for this user.\n"
                    },
                    "note": {
                        "type": "string",
                        "description": "A note with additional information for the user.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the user with.\n",
                        "willReplaceOnChanges": true
                    },
                    "skipForgetOnDestroy": {
                        "type": "boolean",
                        "description": "Specifies whether this resource should tell the controller to \"forget\" the user on destroy. Defaults to `false`.\n"
                    },
                    "userGroupId": {
                        "type": "string",
                        "description": "The user group ID for the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "unifi:index/account:Account": {
            "description": "`unifi.Account` manages a RADIUS user account\n\nTo authenticate devices based on MAC address, use the MAC address as the username and password under client creation. \nConvert lowercase letters to uppercase, and also remove colons or periods from the MAC address. \n\nATTENTION: If the user profile does not include a VLAN, the client will fall back to the untagged VLAN. \n\nNOTE: MAC-based authentication accounts can only be used for wireless and wired clients. L2TP remote access does not apply.\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the account.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network for this account\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the account.\n",
                    "secret": true
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the account with.\n"
                },
                "tunnelMediumType": {
                    "type": "integer",
                    "description": "See [RFC 2868](https://www.rfc-editor.org/rfc/rfc2868) section 3.2 Defaults to `6`.\n"
                },
                "tunnelType": {
                    "type": "integer",
                    "description": "See [RFC 2868](https://www.rfc-editor.org/rfc/rfc2868) section 3.1 Defaults to `13`.\n"
                }
            },
            "required": [
                "name",
                "password",
                "site"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the account.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network for this account\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the account.\n",
                    "secret": true
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the account with.\n",
                    "willReplaceOnChanges": true
                },
                "tunnelMediumType": {
                    "type": "integer",
                    "description": "See [RFC 2868](https://www.rfc-editor.org/rfc/rfc2868) section 3.2 Defaults to `6`.\n"
                },
                "tunnelType": {
                    "type": "integer",
                    "description": "See [RFC 2868](https://www.rfc-editor.org/rfc/rfc2868) section 3.1 Defaults to `13`.\n"
                }
            },
            "requiredInputs": [
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Account resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the account.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network for this account\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the account.\n",
                        "secret": true
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the account with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tunnelMediumType": {
                        "type": "integer",
                        "description": "See [RFC 2868](https://www.rfc-editor.org/rfc/rfc2868) section 3.2 Defaults to `6`.\n"
                    },
                    "tunnelType": {
                        "type": "integer",
                        "description": "See [RFC 2868](https://www.rfc-editor.org/rfc/rfc2868) section 3.1 Defaults to `13`.\n"
                    }
                },
                "type": "object"
            }
        },
        "unifi:index/device:Device": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst disabled = unifi.port.getProfile({\n    name: \"Disabled\",\n});\nconst poe = new unifi.port.Profile(\"poe\", {\n    name: \"poe\",\n    forward: \"customize\",\n    nativeNetworkconfId: nativeNetworkId,\n    taggedNetworkconfIds: [someVlanNetworkId],\n    poeMode: \"auto\",\n});\nconst us24Poe = new unifi.Device(\"us_24_poe\", {\n    mac: \"01:23:45:67:89:AB\",\n    name: \"Switch with POE\",\n    portOverrides: [\n        {\n            number: 1,\n            name: \"port w/ poe\",\n            portProfileId: poe.id,\n        },\n        {\n            number: 2,\n            name: \"disabled\",\n            portProfileId: disabled.then(disabled =\u003e disabled.id),\n        },\n        {\n            number: 11,\n            opMode: \"aggregate\",\n            aggregateNumPorts: 2,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_unifi as unifi\nimport pulumiverse_unifi as unifi\n\ndisabled = unifi.port.get_profile(name=\"Disabled\")\npoe = unifi.port.Profile(\"poe\",\n    name=\"poe\",\n    forward=\"customize\",\n    native_networkconf_id=native_network_id,\n    tagged_networkconf_ids=[some_vlan_network_id],\n    poe_mode=\"auto\")\nus24_poe = unifi.Device(\"us_24_poe\",\n    mac=\"01:23:45:67:89:AB\",\n    name=\"Switch with POE\",\n    port_overrides=[\n        {\n            \"number\": 1,\n            \"name\": \"port w/ poe\",\n            \"port_profile_id\": poe.id,\n        },\n        {\n            \"number\": 2,\n            \"name\": \"disabled\",\n            \"port_profile_id\": disabled.id,\n        },\n        {\n            \"number\": 11,\n            \"op_mode\": \"aggregate\",\n            \"aggregate_num_ports\": 2,\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumi.Unifi;\nusing Unifi = Pulumiverse.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var disabled = Unifi.Port.GetProfile.Invoke(new()\n    {\n        Name = \"Disabled\",\n    });\n\n    var poe = new Unifi.Port.Profile(\"poe\", new()\n    {\n        Name = \"poe\",\n        Forward = \"customize\",\n        NativeNetworkconfId = nativeNetworkId,\n        TaggedNetworkconfIds = new[]\n        {\n            someVlanNetworkId,\n        },\n        PoeMode = \"auto\",\n    });\n\n    var us24Poe = new Unifi.Device(\"us_24_poe\", new()\n    {\n        Mac = \"01:23:45:67:89:AB\",\n        Name = \"Switch with POE\",\n        PortOverrides = new[]\n        {\n            new Unifi.Inputs.DevicePortOverrideArgs\n            {\n                Number = 1,\n                Name = \"port w/ poe\",\n                PortProfileId = poe.Id,\n            },\n            new Unifi.Inputs.DevicePortOverrideArgs\n            {\n                Number = 2,\n                Name = \"disabled\",\n                PortProfileId = disabled.Apply(getProfileResult =\u003e getProfileResult.Id),\n            },\n            new Unifi.Inputs.DevicePortOverrideArgs\n            {\n                Number = 11,\n                OpMode = \"aggregate\",\n                AggregateNumPorts = 2,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/port\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdisabled, err := port.LookupProfile(ctx, \u0026port.LookupProfileArgs{\n\t\t\tName: pulumi.StringRef(\"Disabled\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpoe, err := port.NewProfile(ctx, \"poe\", \u0026port.ProfileArgs{\n\t\t\tName:                pulumi.String(\"poe\"),\n\t\t\tForward:             pulumi.String(\"customize\"),\n\t\t\tNativeNetworkconfId: pulumi.Any(nativeNetworkId),\n\t\t\tTaggedNetworkconfIds: pulumi.StringArray{\n\t\t\t\tsomeVlanNetworkId,\n\t\t\t},\n\t\t\tPoeMode: pulumi.String(\"auto\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = unifi.NewDevice(ctx, \"us_24_poe\", \u0026unifi.DeviceArgs{\n\t\t\tMac:  pulumi.String(\"01:23:45:67:89:AB\"),\n\t\t\tName: pulumi.String(\"Switch with POE\"),\n\t\t\tPortOverrides: unifi.DevicePortOverrideArray{\n\t\t\t\t\u0026unifi.DevicePortOverrideArgs{\n\t\t\t\t\tNumber:        pulumi.Int(1),\n\t\t\t\t\tName:          pulumi.String(\"port w/ poe\"),\n\t\t\t\t\tPortProfileId: poe.ID(),\n\t\t\t\t},\n\t\t\t\t\u0026unifi.DevicePortOverrideArgs{\n\t\t\t\t\tNumber:        pulumi.Int(2),\n\t\t\t\t\tName:          pulumi.String(\"disabled\"),\n\t\t\t\t\tPortProfileId: pulumi.String(disabled.Id),\n\t\t\t\t},\n\t\t\t\t\u0026unifi.DevicePortOverrideArgs{\n\t\t\t\t\tNumber:            pulumi.Int(11),\n\t\t\t\t\tOpMode:            pulumi.String(\"aggregate\"),\n\t\t\t\t\tAggregateNumPorts: pulumi.Int(2),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.unifi.port.PortFunctions;\nimport com.pulumi.unifi.port.inputs.GetProfileArgs;\nimport com.pulumiverse.unifi.port.Profile;\nimport com.pulumiverse.unifi.port.ProfileArgs;\nimport com.pulumiverse.unifi.Device;\nimport com.pulumiverse.unifi.DeviceArgs;\nimport com.pulumi.unifi.inputs.DevicePortOverrideArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var disabled = PortFunctions.getProfile(GetProfileArgs.builder()\n            .name(\"Disabled\")\n            .build());\n\n        var poe = new Profile(\"poe\", ProfileArgs.builder()\n            .name(\"poe\")\n            .forward(\"customize\")\n            .nativeNetworkconfId(nativeNetworkId)\n            .taggedNetworkconfIds(someVlanNetworkId)\n            .poeMode(\"auto\")\n            .build());\n\n        var us24Poe = new Device(\"us24Poe\", DeviceArgs.builder()\n            .mac(\"01:23:45:67:89:AB\")\n            .name(\"Switch with POE\")\n            .portOverrides(            \n                DevicePortOverrideArgs.builder()\n                    .number(1)\n                    .name(\"port w/ poe\")\n                    .portProfileId(poe.id())\n                    .build(),\n                DevicePortOverrideArgs.builder()\n                    .number(2)\n                    .name(\"disabled\")\n                    .portProfileId(disabled.id())\n                    .build(),\n                DevicePortOverrideArgs.builder()\n                    .number(11)\n                    .opMode(\"aggregate\")\n                    .aggregateNumPorts(2)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  poe:\n    type: unifi:port:Profile\n    properties:\n      name: poe\n      forward: customize\n      nativeNetworkconfId: ${nativeNetworkId}\n      taggedNetworkconfIds:\n        - ${someVlanNetworkId}\n      poeMode: auto\n  us24Poe:\n    type: unifi:Device\n    name: us_24_poe\n    properties:\n      mac: 01:23:45:67:89:AB\n      name: Switch with POE\n      portOverrides:\n        - number: 1\n          name: port w/ poe\n          portProfileId: ${poe.id}\n        - number: 2\n          name: disabled\n          portProfileId: ${disabled.id}\n        - number: 11\n          opMode: aggregate\n          aggregateNumPorts: 2\nvariables:\n  disabled:\n    fn::invoke:\n      function: unifi:port:getProfile\n      arguments:\n        name: Disabled\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "allowAdoption": {
                    "type": "boolean",
                    "description": "Specifies whether this resource should tell the controller to adopt the device on create. Defaults to `true`.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Specifies whether this device should be disabled.\n"
                },
                "forgetOnDestroy": {
                    "type": "boolean",
                    "description": "Specifies whether this resource should tell the controller to forget the device on destroy. Defaults to `true`.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "The MAC address of the device. This can be specified so that the provider can take control of a device (since devices are created through adoption).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the device.\n"
                },
                "portOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/unifi:index/DevicePortOverride:DevicePortOverride"
                    },
                    "description": "Settings overrides for specific switch ports.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the device with.\n"
                }
            },
            "required": [
                "disabled",
                "mac",
                "name",
                "site"
            ],
            "inputProperties": {
                "allowAdoption": {
                    "type": "boolean",
                    "description": "Specifies whether this resource should tell the controller to adopt the device on create. Defaults to `true`.\n"
                },
                "forgetOnDestroy": {
                    "type": "boolean",
                    "description": "Specifies whether this resource should tell the controller to forget the device on destroy. Defaults to `true`.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "The MAC address of the device. This can be specified so that the provider can take control of a device (since devices are created through adoption).\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the device.\n"
                },
                "portOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/unifi:index/DevicePortOverride:DevicePortOverride"
                    },
                    "description": "Settings overrides for specific switch ports.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the device with.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Device resources.\n",
                "properties": {
                    "allowAdoption": {
                        "type": "boolean",
                        "description": "Specifies whether this resource should tell the controller to adopt the device on create. Defaults to `true`.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Specifies whether this device should be disabled.\n"
                    },
                    "forgetOnDestroy": {
                        "type": "boolean",
                        "description": "Specifies whether this resource should tell the controller to forget the device on destroy. Defaults to `true`.\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "The MAC address of the device. This can be specified so that the provider can take control of a device (since devices are created through adoption).\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the device.\n"
                    },
                    "portOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/unifi:index/DevicePortOverride:DevicePortOverride"
                        },
                        "description": "Settings overrides for specific switch ports.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the device with.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "unifi:index/dynamicDNS:DynamicDNS": {
            "description": "`unifi.DynamicDNS` manages dynamic DNS settings for different providers.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst test = new unifi.DynamicDNS(\"test\", {\n    service: \"dyndns\",\n    hostName: \"my-network.example.com\",\n    server: \"domains.google.com\",\n    login: dnsLogin,\n    password: dnsPassword,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_unifi as unifi\n\ntest = unifi.DynamicDNS(\"test\",\n    service=\"dyndns\",\n    host_name=\"my-network.example.com\",\n    server=\"domains.google.com\",\n    login=dns_login,\n    password=dns_password)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumiverse.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Unifi.DynamicDNS(\"test\", new()\n    {\n        Service = \"dyndns\",\n        HostName = \"my-network.example.com\",\n        Server = \"domains.google.com\",\n        Login = dnsLogin,\n        Password = dnsPassword,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := unifi.NewDynamicDNS(ctx, \"test\", \u0026unifi.DynamicDNSArgs{\n\t\t\tService:  pulumi.String(\"dyndns\"),\n\t\t\tHostName: pulumi.String(\"my-network.example.com\"),\n\t\t\tServer:   pulumi.String(\"domains.google.com\"),\n\t\t\tLogin:    pulumi.Any(dnsLogin),\n\t\t\tPassword: pulumi.Any(dnsPassword),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumiverse.unifi.DynamicDNS;\nimport com.pulumiverse.unifi.DynamicDNSArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new DynamicDNS(\"test\", DynamicDNSArgs.builder()\n            .service(\"dyndns\")\n            .hostName(\"my-network.example.com\")\n            .server(\"domains.google.com\")\n            .login(dnsLogin)\n            .password(dnsPassword)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: unifi:DynamicDNS\n    properties:\n      service: dyndns\n      hostName: my-network.example.com\n      server: domains.google.com\n      login: ${dnsLogin}\n      password: ${dnsPassword}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "hostName": {
                    "type": "string",
                    "description": "The host name to update in the dynamic DNS service.\n"
                },
                "interface": {
                    "type": "string",
                    "description": "The interface for the dynamic DNS. Can be `wan` or `wan2`. Defaults to `wan`.\n"
                },
                "login": {
                    "type": "string",
                    "description": "The server for the dynamic DNS service.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The server for the dynamic DNS service.\n",
                    "secret": true
                },
                "server": {
                    "type": "string",
                    "description": "The server for the dynamic DNS service.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the dynamic DNS with.\n"
                }
            },
            "required": [
                "hostName",
                "service",
                "site"
            ],
            "inputProperties": {
                "hostName": {
                    "type": "string",
                    "description": "The host name to update in the dynamic DNS service.\n"
                },
                "interface": {
                    "type": "string",
                    "description": "The interface for the dynamic DNS. Can be `wan` or `wan2`. Defaults to `wan`.\n",
                    "willReplaceOnChanges": true
                },
                "login": {
                    "type": "string",
                    "description": "The server for the dynamic DNS service.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The server for the dynamic DNS service.\n",
                    "secret": true
                },
                "server": {
                    "type": "string",
                    "description": "The server for the dynamic DNS service.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).\n",
                    "willReplaceOnChanges": true
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the dynamic DNS with.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hostName",
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DynamicDNS resources.\n",
                "properties": {
                    "hostName": {
                        "type": "string",
                        "description": "The host name to update in the dynamic DNS service.\n"
                    },
                    "interface": {
                        "type": "string",
                        "description": "The interface for the dynamic DNS. Can be `wan` or `wan2`. Defaults to `wan`.\n",
                        "willReplaceOnChanges": true
                    },
                    "login": {
                        "type": "string",
                        "description": "The server for the dynamic DNS service.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The server for the dynamic DNS service.\n",
                        "secret": true
                    },
                    "server": {
                        "type": "string",
                        "description": "The server for the dynamic DNS service.\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).\n",
                        "willReplaceOnChanges": true
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the dynamic DNS with.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "unifi:index/network:Network": {
            "description": "`unifi.Network` manages WAN/LAN/VLAN networks.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst config = new pulumi.Config();\nconst vlanId = config.getNumber(\"vlanId\") || 10;\nconst vlan = new unifi.Network(\"vlan\", {\n    name: \"wifi-vlan\",\n    purpose: \"corporate\",\n    subnet: \"10.0.0.1/24\",\n    vlanId: vlanId,\n    dhcpStart: \"10.0.0.6\",\n    dhcpStop: \"10.0.0.254\",\n    dhcpEnabled: true,\n});\nconst wan = new unifi.Network(\"wan\", {\n    name: \"wan\",\n    purpose: \"wan\",\n    wanNetworkgroup: \"WAN\",\n    wanType: \"pppoe\",\n    wanIp: \"192.168.1.1\",\n    wanEgressQos: 1,\n    wanUsername: \"username\",\n    xWanPassword: \"password\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_unifi as unifi\n\nconfig = pulumi.Config()\nvlan_id = config.get_float(\"vlanId\")\nif vlan_id is None:\n    vlan_id = 10\nvlan = unifi.Network(\"vlan\",\n    name=\"wifi-vlan\",\n    purpose=\"corporate\",\n    subnet=\"10.0.0.1/24\",\n    vlan_id=vlan_id,\n    dhcp_start=\"10.0.0.6\",\n    dhcp_stop=\"10.0.0.254\",\n    dhcp_enabled=True)\nwan = unifi.Network(\"wan\",\n    name=\"wan\",\n    purpose=\"wan\",\n    wan_networkgroup=\"WAN\",\n    wan_type=\"pppoe\",\n    wan_ip=\"192.168.1.1\",\n    wan_egress_qos=1,\n    wan_username=\"username\",\n    x_wan_password=\"password\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumiverse.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var vlanId = config.GetDouble(\"vlanId\") ?? 10;\n    var vlan = new Unifi.Network(\"vlan\", new()\n    {\n        Name = \"wifi-vlan\",\n        Purpose = \"corporate\",\n        Subnet = \"10.0.0.1/24\",\n        VlanId = vlanId,\n        DhcpStart = \"10.0.0.6\",\n        DhcpStop = \"10.0.0.254\",\n        DhcpEnabled = true,\n    });\n\n    var wan = new Unifi.Network(\"wan\", new()\n    {\n        Name = \"wan\",\n        Purpose = \"wan\",\n        WanNetworkgroup = \"WAN\",\n        WanType = \"pppoe\",\n        WanIp = \"192.168.1.1\",\n        WanEgressQos = 1,\n        WanUsername = \"username\",\n        XWanPassword = \"password\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tvlanId := float64(10)\n\t\tif param := cfg.GetFloat64(\"vlanId\"); param != 0 {\n\t\t\tvlanId = param\n\t\t}\n\t\t_, err := unifi.NewNetwork(ctx, \"vlan\", \u0026unifi.NetworkArgs{\n\t\t\tName:        pulumi.String(\"wifi-vlan\"),\n\t\t\tPurpose:     pulumi.String(\"corporate\"),\n\t\t\tSubnet:      pulumi.String(\"10.0.0.1/24\"),\n\t\t\tVlanId:      pulumi.Float64(vlanId),\n\t\t\tDhcpStart:   pulumi.String(\"10.0.0.6\"),\n\t\t\tDhcpStop:    pulumi.String(\"10.0.0.254\"),\n\t\t\tDhcpEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = unifi.NewNetwork(ctx, \"wan\", \u0026unifi.NetworkArgs{\n\t\t\tName:            pulumi.String(\"wan\"),\n\t\t\tPurpose:         pulumi.String(\"wan\"),\n\t\t\tWanNetworkgroup: pulumi.String(\"WAN\"),\n\t\t\tWanType:         pulumi.String(\"pppoe\"),\n\t\t\tWanIp:           pulumi.String(\"192.168.1.1\"),\n\t\t\tWanEgressQos:    pulumi.Int(1),\n\t\t\tWanUsername:     pulumi.String(\"username\"),\n\t\t\tXWanPassword:    pulumi.String(\"password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumiverse.unifi.Network;\nimport com.pulumiverse.unifi.NetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var vlanId = config.get(\"vlanId\").orElse(10);\n        var vlan = new Network(\"vlan\", NetworkArgs.builder()\n            .name(\"wifi-vlan\")\n            .purpose(\"corporate\")\n            .subnet(\"10.0.0.1/24\")\n            .vlanId(vlanId)\n            .dhcpStart(\"10.0.0.6\")\n            .dhcpStop(\"10.0.0.254\")\n            .dhcpEnabled(true)\n            .build());\n\n        var wan = new Network(\"wan\", NetworkArgs.builder()\n            .name(\"wan\")\n            .purpose(\"wan\")\n            .wanNetworkgroup(\"WAN\")\n            .wanType(\"pppoe\")\n            .wanIp(\"192.168.1.1\")\n            .wanEgressQos(1)\n            .wanUsername(\"username\")\n            .xWanPassword(\"password\")\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  vlanId:\n    type: number\n    default: 10\nresources:\n  vlan:\n    type: unifi:Network\n    properties:\n      name: wifi-vlan\n      purpose: corporate\n      subnet: 10.0.0.1/24\n      vlanId: ${vlanId}\n      dhcpStart: 10.0.0.6\n      dhcpStop: 10.0.0.254\n      dhcpEnabled: true\n  wan:\n    type: unifi:Network\n    properties:\n      name: wan\n      purpose: wan\n      wanNetworkgroup: WAN\n      wanType: pppoe\n      wanIp: 192.168.1.1\n      wanEgressQos: 1\n      wanUsername: username\n      xWanPassword: password\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport from provider configured site\n\n```sh\n$ pulumi import unifi:index/network:Network mynetwork 5dc28e5e9106d105bdc87217\n```\n\nimport from another site\n\n```sh\n$ pulumi import unifi:index/network:Network mynetwork bfa2l6i7:5dc28e5e9106d105bdc87217\n```\n\nimport network by name\n\n```sh\n$ pulumi import unifi:index/network:Network mynetwork name=LAN\n```\n\n",
            "properties": {
                "dhcpDns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.\n"
                },
                "dhcpEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether DHCP is enabled or not on this network.\n"
                },
                "dhcpLease": {
                    "type": "integer",
                    "description": "Specifies the lease time for DHCP addresses in seconds. Defaults to `86400`.\n"
                },
                "dhcpRelayEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether DHCP relay is enabled or not on this network.\n"
                },
                "dhcpStart": {
                    "type": "string",
                    "description": "The IPv4 address where the DHCP range of addresses starts.\n"
                },
                "dhcpStop": {
                    "type": "string",
                    "description": "The IPv4 address where the DHCP range of addresses stops.\n"
                },
                "dhcpV6Dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcp_v6_dns_auto` is set to `false`.\n"
                },
                "dhcpV6DnsAuto": {
                    "type": "boolean",
                    "description": "Specifies DNS source to propagate. If set `false` the entries in `dhcp_v6_dns` are used, the upstream entries otherwise Defaults to `true`.\n"
                },
                "dhcpV6Enabled": {
                    "type": "boolean",
                    "description": "Enable stateful DHCPv6 for static configuration.\n"
                },
                "dhcpV6Lease": {
                    "type": "integer",
                    "description": "Specifies the lease time for DHCPv6 addresses in seconds. Defaults to `86400`.\n"
                },
                "dhcpV6Start": {
                    "type": "string",
                    "description": "Start address of the DHCPv6 range. Used in static DHCPv6 configuration.\n"
                },
                "dhcpV6Stop": {
                    "type": "string",
                    "description": "End address of the DHCPv6 range. Used in static DHCPv6 configuration.\n"
                },
                "dhcpdBootEnabled": {
                    "type": "boolean",
                    "description": "Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.\n"
                },
                "dhcpdBootFilename": {
                    "type": "string",
                    "description": "Specifies the file to PXE boot from on the dhcpd*boot*server.\n"
                },
                "dhcpdBootServer": {
                    "type": "string",
                    "description": "Specifies the IPv4 address of a TFTP server to network boot from.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The domain name of this network.\n"
                },
                "igmpSnooping": {
                    "type": "boolean",
                    "description": "Specifies whether IGMP snooping is enabled or not.\n"
                },
                "internetAccessEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether this network should be allowed to access the internet or not. Defaults to `true`.\n"
                },
                "intraNetworkAccessEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether this network should be allowed to access other local networks or not. Defaults to `true`.\n"
                },
                "ipv6InterfaceType": {
                    "type": "string",
                    "description": "Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`. Defaults to `none`.\n"
                },
                "ipv6PdInterface": {
                    "type": "string",
                    "description": "Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.\n"
                },
                "ipv6PdPrefixid": {
                    "type": "string",
                    "description": "Specifies the IPv6 Prefix ID.\n"
                },
                "ipv6PdStart": {
                    "type": "string",
                    "description": "Start address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.\n"
                },
                "ipv6PdStop": {
                    "type": "string",
                    "description": "End address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.\n"
                },
                "ipv6RaEnable": {
                    "type": "boolean",
                    "description": "Specifies whether to enable router advertisements or not.\n"
                },
                "ipv6RaPreferredLifetime": {
                    "type": "integer",
                    "description": "Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6_ra_valid_lifetime` Defaults to `14400`.\n"
                },
                "ipv6RaPriority": {
                    "type": "string",
                    "description": "IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`\n"
                },
                "ipv6RaValidLifetime": {
                    "type": "integer",
                    "description": "Total lifetime in which the address can be used. Must be equal to or greater than `ipv6_ra_preferred_lifetime`. Defaults to `86400`.\n"
                },
                "ipv6StaticSubnet": {
                    "type": "string",
                    "description": "Specifies the static IPv6 subnet when `ipv6_interface_type` is 'static'.\n"
                },
                "multicastDns": {
                    "type": "boolean",
                    "description": "Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller \u003e=v7).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network.\n"
                },
                "networkGroup": {
                    "type": "string",
                    "description": "The group of the network. Defaults to `LAN`.\n"
                },
                "purpose": {
                    "type": "string",
                    "description": "The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the network with.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet of the network. Must be a valid CIDR address.\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "The VLAN ID of the network.\n"
                },
                "wanDhcpV6PdSize": {
                    "type": "integer",
                    "description": "Specifies the IPv6 prefix size to request from ISP. Must be between 48 and 64.\n"
                },
                "wanDns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "DNS servers IPs of the WAN.\n"
                },
                "wanEgressQos": {
                    "type": "integer",
                    "description": "Specifies the WAN egress quality of service. Defaults to `0`.\n"
                },
                "wanGateway": {
                    "type": "string",
                    "description": "The IPv4 gateway of the WAN.\n"
                },
                "wanGatewayV6": {
                    "type": "string",
                    "description": "The IPv6 gateway of the WAN.\n"
                },
                "wanIp": {
                    "type": "string",
                    "description": "The IPv4 address of the WAN.\n"
                },
                "wanIpv6": {
                    "type": "string",
                    "description": "The IPv6 address of the WAN.\n"
                },
                "wanNetmask": {
                    "type": "string",
                    "description": "The IPv4 netmask of the WAN.\n"
                },
                "wanNetworkgroup": {
                    "type": "string",
                    "description": "Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.\n"
                },
                "wanPrefixlen": {
                    "type": "integer",
                    "description": "The IPv6 prefix length of the WAN. Must be between 1 and 128.\n"
                },
                "wanType": {
                    "type": "string",
                    "description": "Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.\n"
                },
                "wanTypeV6": {
                    "type": "string",
                    "description": "Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.\n"
                },
                "wanUsername": {
                    "type": "string",
                    "description": "Specifies the IPV4 WAN username.\n"
                },
                "xWanPassword": {
                    "type": "string",
                    "description": "Specifies the IPV4 WAN password.\n"
                }
            },
            "required": [
                "name",
                "purpose",
                "site"
            ],
            "inputProperties": {
                "dhcpDns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.\n"
                },
                "dhcpEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether DHCP is enabled or not on this network.\n"
                },
                "dhcpLease": {
                    "type": "integer",
                    "description": "Specifies the lease time for DHCP addresses in seconds. Defaults to `86400`.\n"
                },
                "dhcpRelayEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether DHCP relay is enabled or not on this network.\n"
                },
                "dhcpStart": {
                    "type": "string",
                    "description": "The IPv4 address where the DHCP range of addresses starts.\n"
                },
                "dhcpStop": {
                    "type": "string",
                    "description": "The IPv4 address where the DHCP range of addresses stops.\n"
                },
                "dhcpV6Dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcp_v6_dns_auto` is set to `false`.\n"
                },
                "dhcpV6DnsAuto": {
                    "type": "boolean",
                    "description": "Specifies DNS source to propagate. If set `false` the entries in `dhcp_v6_dns` are used, the upstream entries otherwise Defaults to `true`.\n"
                },
                "dhcpV6Enabled": {
                    "type": "boolean",
                    "description": "Enable stateful DHCPv6 for static configuration.\n"
                },
                "dhcpV6Lease": {
                    "type": "integer",
                    "description": "Specifies the lease time for DHCPv6 addresses in seconds. Defaults to `86400`.\n"
                },
                "dhcpV6Start": {
                    "type": "string",
                    "description": "Start address of the DHCPv6 range. Used in static DHCPv6 configuration.\n"
                },
                "dhcpV6Stop": {
                    "type": "string",
                    "description": "End address of the DHCPv6 range. Used in static DHCPv6 configuration.\n"
                },
                "dhcpdBootEnabled": {
                    "type": "boolean",
                    "description": "Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.\n"
                },
                "dhcpdBootFilename": {
                    "type": "string",
                    "description": "Specifies the file to PXE boot from on the dhcpd*boot*server.\n"
                },
                "dhcpdBootServer": {
                    "type": "string",
                    "description": "Specifies the IPv4 address of a TFTP server to network boot from.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The domain name of this network.\n"
                },
                "igmpSnooping": {
                    "type": "boolean",
                    "description": "Specifies whether IGMP snooping is enabled or not.\n"
                },
                "internetAccessEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether this network should be allowed to access the internet or not. Defaults to `true`.\n"
                },
                "intraNetworkAccessEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether this network should be allowed to access other local networks or not. Defaults to `true`.\n"
                },
                "ipv6InterfaceType": {
                    "type": "string",
                    "description": "Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`. Defaults to `none`.\n"
                },
                "ipv6PdInterface": {
                    "type": "string",
                    "description": "Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.\n"
                },
                "ipv6PdPrefixid": {
                    "type": "string",
                    "description": "Specifies the IPv6 Prefix ID.\n"
                },
                "ipv6PdStart": {
                    "type": "string",
                    "description": "Start address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.\n"
                },
                "ipv6PdStop": {
                    "type": "string",
                    "description": "End address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.\n"
                },
                "ipv6RaEnable": {
                    "type": "boolean",
                    "description": "Specifies whether to enable router advertisements or not.\n"
                },
                "ipv6RaPreferredLifetime": {
                    "type": "integer",
                    "description": "Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6_ra_valid_lifetime` Defaults to `14400`.\n"
                },
                "ipv6RaPriority": {
                    "type": "string",
                    "description": "IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`\n"
                },
                "ipv6RaValidLifetime": {
                    "type": "integer",
                    "description": "Total lifetime in which the address can be used. Must be equal to or greater than `ipv6_ra_preferred_lifetime`. Defaults to `86400`.\n"
                },
                "ipv6StaticSubnet": {
                    "type": "string",
                    "description": "Specifies the static IPv6 subnet when `ipv6_interface_type` is 'static'.\n"
                },
                "multicastDns": {
                    "type": "boolean",
                    "description": "Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller \u003e=v7).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the network.\n"
                },
                "networkGroup": {
                    "type": "string",
                    "description": "The group of the network. Defaults to `LAN`.\n"
                },
                "purpose": {
                    "type": "string",
                    "description": "The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.\n",
                    "willReplaceOnChanges": true
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the network with.\n",
                    "willReplaceOnChanges": true
                },
                "subnet": {
                    "type": "string",
                    "description": "The subnet of the network. Must be a valid CIDR address.\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "The VLAN ID of the network.\n"
                },
                "wanDhcpV6PdSize": {
                    "type": "integer",
                    "description": "Specifies the IPv6 prefix size to request from ISP. Must be between 48 and 64.\n"
                },
                "wanDns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "DNS servers IPs of the WAN.\n"
                },
                "wanEgressQos": {
                    "type": "integer",
                    "description": "Specifies the WAN egress quality of service. Defaults to `0`.\n"
                },
                "wanGateway": {
                    "type": "string",
                    "description": "The IPv4 gateway of the WAN.\n"
                },
                "wanGatewayV6": {
                    "type": "string",
                    "description": "The IPv6 gateway of the WAN.\n"
                },
                "wanIp": {
                    "type": "string",
                    "description": "The IPv4 address of the WAN.\n"
                },
                "wanIpv6": {
                    "type": "string",
                    "description": "The IPv6 address of the WAN.\n"
                },
                "wanNetmask": {
                    "type": "string",
                    "description": "The IPv4 netmask of the WAN.\n"
                },
                "wanNetworkgroup": {
                    "type": "string",
                    "description": "Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.\n"
                },
                "wanPrefixlen": {
                    "type": "integer",
                    "description": "The IPv6 prefix length of the WAN. Must be between 1 and 128.\n"
                },
                "wanType": {
                    "type": "string",
                    "description": "Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.\n"
                },
                "wanTypeV6": {
                    "type": "string",
                    "description": "Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.\n"
                },
                "wanUsername": {
                    "type": "string",
                    "description": "Specifies the IPV4 WAN username.\n"
                },
                "xWanPassword": {
                    "type": "string",
                    "description": "Specifies the IPV4 WAN password.\n"
                }
            },
            "requiredInputs": [
                "purpose"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "dhcpDns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.\n"
                    },
                    "dhcpEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether DHCP is enabled or not on this network.\n"
                    },
                    "dhcpLease": {
                        "type": "integer",
                        "description": "Specifies the lease time for DHCP addresses in seconds. Defaults to `86400`.\n"
                    },
                    "dhcpRelayEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether DHCP relay is enabled or not on this network.\n"
                    },
                    "dhcpStart": {
                        "type": "string",
                        "description": "The IPv4 address where the DHCP range of addresses starts.\n"
                    },
                    "dhcpStop": {
                        "type": "string",
                        "description": "The IPv4 address where the DHCP range of addresses stops.\n"
                    },
                    "dhcpV6Dns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcp_v6_dns_auto` is set to `false`.\n"
                    },
                    "dhcpV6DnsAuto": {
                        "type": "boolean",
                        "description": "Specifies DNS source to propagate. If set `false` the entries in `dhcp_v6_dns` are used, the upstream entries otherwise Defaults to `true`.\n"
                    },
                    "dhcpV6Enabled": {
                        "type": "boolean",
                        "description": "Enable stateful DHCPv6 for static configuration.\n"
                    },
                    "dhcpV6Lease": {
                        "type": "integer",
                        "description": "Specifies the lease time for DHCPv6 addresses in seconds. Defaults to `86400`.\n"
                    },
                    "dhcpV6Start": {
                        "type": "string",
                        "description": "Start address of the DHCPv6 range. Used in static DHCPv6 configuration.\n"
                    },
                    "dhcpV6Stop": {
                        "type": "string",
                        "description": "End address of the DHCPv6 range. Used in static DHCPv6 configuration.\n"
                    },
                    "dhcpdBootEnabled": {
                        "type": "boolean",
                        "description": "Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.\n"
                    },
                    "dhcpdBootFilename": {
                        "type": "string",
                        "description": "Specifies the file to PXE boot from on the dhcpd*boot*server.\n"
                    },
                    "dhcpdBootServer": {
                        "type": "string",
                        "description": "Specifies the IPv4 address of a TFTP server to network boot from.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "The domain name of this network.\n"
                    },
                    "igmpSnooping": {
                        "type": "boolean",
                        "description": "Specifies whether IGMP snooping is enabled or not.\n"
                    },
                    "internetAccessEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether this network should be allowed to access the internet or not. Defaults to `true`.\n"
                    },
                    "intraNetworkAccessEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether this network should be allowed to access other local networks or not. Defaults to `true`.\n"
                    },
                    "ipv6InterfaceType": {
                        "type": "string",
                        "description": "Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`. Defaults to `none`.\n"
                    },
                    "ipv6PdInterface": {
                        "type": "string",
                        "description": "Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.\n"
                    },
                    "ipv6PdPrefixid": {
                        "type": "string",
                        "description": "Specifies the IPv6 Prefix ID.\n"
                    },
                    "ipv6PdStart": {
                        "type": "string",
                        "description": "Start address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.\n"
                    },
                    "ipv6PdStop": {
                        "type": "string",
                        "description": "End address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.\n"
                    },
                    "ipv6RaEnable": {
                        "type": "boolean",
                        "description": "Specifies whether to enable router advertisements or not.\n"
                    },
                    "ipv6RaPreferredLifetime": {
                        "type": "integer",
                        "description": "Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6_ra_valid_lifetime` Defaults to `14400`.\n"
                    },
                    "ipv6RaPriority": {
                        "type": "string",
                        "description": "IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`\n"
                    },
                    "ipv6RaValidLifetime": {
                        "type": "integer",
                        "description": "Total lifetime in which the address can be used. Must be equal to or greater than `ipv6_ra_preferred_lifetime`. Defaults to `86400`.\n"
                    },
                    "ipv6StaticSubnet": {
                        "type": "string",
                        "description": "Specifies the static IPv6 subnet when `ipv6_interface_type` is 'static'.\n"
                    },
                    "multicastDns": {
                        "type": "boolean",
                        "description": "Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller \u003e=v7).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network.\n"
                    },
                    "networkGroup": {
                        "type": "string",
                        "description": "The group of the network. Defaults to `LAN`.\n"
                    },
                    "purpose": {
                        "type": "string",
                        "description": "The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.\n",
                        "willReplaceOnChanges": true
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the network with.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The subnet of the network. Must be a valid CIDR address.\n"
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "The VLAN ID of the network.\n"
                    },
                    "wanDhcpV6PdSize": {
                        "type": "integer",
                        "description": "Specifies the IPv6 prefix size to request from ISP. Must be between 48 and 64.\n"
                    },
                    "wanDns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "DNS servers IPs of the WAN.\n"
                    },
                    "wanEgressQos": {
                        "type": "integer",
                        "description": "Specifies the WAN egress quality of service. Defaults to `0`.\n"
                    },
                    "wanGateway": {
                        "type": "string",
                        "description": "The IPv4 gateway of the WAN.\n"
                    },
                    "wanGatewayV6": {
                        "type": "string",
                        "description": "The IPv6 gateway of the WAN.\n"
                    },
                    "wanIp": {
                        "type": "string",
                        "description": "The IPv4 address of the WAN.\n"
                    },
                    "wanIpv6": {
                        "type": "string",
                        "description": "The IPv6 address of the WAN.\n"
                    },
                    "wanNetmask": {
                        "type": "string",
                        "description": "The IPv4 netmask of the WAN.\n"
                    },
                    "wanNetworkgroup": {
                        "type": "string",
                        "description": "Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.\n"
                    },
                    "wanPrefixlen": {
                        "type": "integer",
                        "description": "The IPv6 prefix length of the WAN. Must be between 1 and 128.\n"
                    },
                    "wanType": {
                        "type": "string",
                        "description": "Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.\n"
                    },
                    "wanTypeV6": {
                        "type": "string",
                        "description": "Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.\n"
                    },
                    "wanUsername": {
                        "type": "string",
                        "description": "Specifies the IPV4 WAN username.\n"
                    },
                    "xWanPassword": {
                        "type": "string",
                        "description": "Specifies the IPV4 WAN password.\n"
                    }
                },
                "type": "object"
            }
        },
        "unifi:index/radiusProfile:RadiusProfile": {
            "description": "`unifi.RadiusProfile` manages RADIUS profiles.\n",
            "properties": {
                "accountingEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether to use RADIUS accounting. Defaults to `false`.\n"
                },
                "acctServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/unifi:index/RadiusProfileAcctServer:RadiusProfileAcctServer"
                    },
                    "description": "RADIUS accounting servers.\n"
                },
                "authServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/unifi:index/RadiusProfileAuthServer:RadiusProfileAuthServer"
                    },
                    "description": "RADIUS authentication servers.\n"
                },
                "interimUpdateEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether to use interim_update. Defaults to `false`.\n"
                },
                "interimUpdateInterval": {
                    "type": "integer",
                    "description": "Specifies interim_update interval. Defaults to `3600`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the profile.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the settings with.\n"
                },
                "useUsgAcctServer": {
                    "type": "boolean",
                    "description": "Specifies whether to use usg as a RADIUS accounting server. Defaults to `false`.\n"
                },
                "useUsgAuthServer": {
                    "type": "boolean",
                    "description": "Specifies whether to use usg as a RADIUS authentication server. Defaults to `false`.\n"
                },
                "vlanEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether to use vlan on wired connections. Defaults to `false`.\n"
                },
                "vlanWlanMode": {
                    "type": "string",
                    "description": "Specifies whether to use vlan on wireless connections. Must be one of `disabled`, `optional`, or `required`. Defaults to ``.\n"
                }
            },
            "required": [
                "name",
                "site"
            ],
            "inputProperties": {
                "accountingEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether to use RADIUS accounting. Defaults to `false`.\n"
                },
                "acctServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/unifi:index/RadiusProfileAcctServer:RadiusProfileAcctServer"
                    },
                    "description": "RADIUS accounting servers.\n"
                },
                "authServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/unifi:index/RadiusProfileAuthServer:RadiusProfileAuthServer"
                    },
                    "description": "RADIUS authentication servers.\n"
                },
                "interimUpdateEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether to use interim_update. Defaults to `false`.\n"
                },
                "interimUpdateInterval": {
                    "type": "integer",
                    "description": "Specifies interim_update interval. Defaults to `3600`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the profile.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the settings with.\n",
                    "willReplaceOnChanges": true
                },
                "useUsgAcctServer": {
                    "type": "boolean",
                    "description": "Specifies whether to use usg as a RADIUS accounting server. Defaults to `false`.\n"
                },
                "useUsgAuthServer": {
                    "type": "boolean",
                    "description": "Specifies whether to use usg as a RADIUS authentication server. Defaults to `false`.\n"
                },
                "vlanEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether to use vlan on wired connections. Defaults to `false`.\n"
                },
                "vlanWlanMode": {
                    "type": "string",
                    "description": "Specifies whether to use vlan on wireless connections. Must be one of `disabled`, `optional`, or `required`. Defaults to ``.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RadiusProfile resources.\n",
                "properties": {
                    "accountingEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether to use RADIUS accounting. Defaults to `false`.\n"
                    },
                    "acctServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/unifi:index/RadiusProfileAcctServer:RadiusProfileAcctServer"
                        },
                        "description": "RADIUS accounting servers.\n"
                    },
                    "authServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/unifi:index/RadiusProfileAuthServer:RadiusProfileAuthServer"
                        },
                        "description": "RADIUS authentication servers.\n"
                    },
                    "interimUpdateEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether to use interim_update. Defaults to `false`.\n"
                    },
                    "interimUpdateInterval": {
                        "type": "integer",
                        "description": "Specifies interim_update interval. Defaults to `3600`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the profile.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the settings with.\n",
                        "willReplaceOnChanges": true
                    },
                    "useUsgAcctServer": {
                        "type": "boolean",
                        "description": "Specifies whether to use usg as a RADIUS accounting server. Defaults to `false`.\n"
                    },
                    "useUsgAuthServer": {
                        "type": "boolean",
                        "description": "Specifies whether to use usg as a RADIUS authentication server. Defaults to `false`.\n"
                    },
                    "vlanEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether to use vlan on wired connections. Defaults to `false`.\n"
                    },
                    "vlanWlanMode": {
                        "type": "string",
                        "description": "Specifies whether to use vlan on wireless connections. Must be one of `disabled`, `optional`, or `required`. Defaults to ``.\n"
                    }
                },
                "type": "object"
            }
        },
        "unifi:index/site:Site": {
            "description": "`unifi.Site` manages Unifi sites\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst mysite = new unifi.Site(\"mysite\", {description: \"mysite\"});\n```\n```python\nimport pulumi\nimport pulumiverse_unifi as unifi\n\nmysite = unifi.Site(\"mysite\", description=\"mysite\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumiverse.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mysite = new Unifi.Site(\"mysite\", new()\n    {\n        Description = \"mysite\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := unifi.NewSite(ctx, \"mysite\", \u0026unifi.SiteArgs{\n\t\t\tDescription: pulumi.String(\"mysite\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumiverse.unifi.Site;\nimport com.pulumiverse.unifi.SiteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mysite = new Site(\"mysite\", SiteArgs.builder()\n            .description(\"mysite\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mysite:\n    type: unifi:Site\n    properties:\n      description: mysite\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n$ pulumi import unifi:index/site:Site mysite 5fe6261995fe130013456a36\n```\n\nimport using the name (short ID)\n\n```sh\n$ pulumi import unifi:index/site:Site mysite vq98kwez\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the site.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the site.\n"
                }
            },
            "required": [
                "description",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the site.\n"
                }
            },
            "requiredInputs": [
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Site resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the site.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the site.\n"
                    }
                },
                "type": "object"
            }
        },
        "unifi:index/staticRoute:StaticRoute": {
            "description": "`unifi.StaticRoute` manages a static route.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst nexthop = new unifi.StaticRoute(\"nexthop\", {\n    type: \"nexthop-route\",\n    network: \"172.17.0.0/16\",\n    name: \"basic nexthop\",\n    distance: 1,\n    nextHop: \"172.16.0.1\",\n});\nconst blackhole = new unifi.StaticRoute(\"blackhole\", {\n    type: \"blackhole\",\n    network: blackholeCidr,\n    name: \"blackhole traffice to cidr\",\n    distance: 1,\n});\nconst _interface = new unifi.StaticRoute(\"interface\", {\n    type: \"interface-route\",\n    network: wan2Cidr,\n    name: \"send traffic over wan2\",\n    distance: 1,\n    \"interface\": \"WAN2\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_unifi as unifi\n\nnexthop = unifi.StaticRoute(\"nexthop\",\n    type=\"nexthop-route\",\n    network=\"172.17.0.0/16\",\n    name=\"basic nexthop\",\n    distance=1,\n    next_hop=\"172.16.0.1\")\nblackhole = unifi.StaticRoute(\"blackhole\",\n    type=\"blackhole\",\n    network=blackhole_cidr,\n    name=\"blackhole traffice to cidr\",\n    distance=1)\ninterface = unifi.StaticRoute(\"interface\",\n    type=\"interface-route\",\n    network=wan2_cidr,\n    name=\"send traffic over wan2\",\n    distance=1,\n    interface=\"WAN2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumiverse.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nexthop = new Unifi.StaticRoute(\"nexthop\", new()\n    {\n        Type = \"nexthop-route\",\n        Network = \"172.17.0.0/16\",\n        Name = \"basic nexthop\",\n        Distance = 1,\n        NextHop = \"172.16.0.1\",\n    });\n\n    var blackhole = new Unifi.StaticRoute(\"blackhole\", new()\n    {\n        Type = \"blackhole\",\n        Network = blackholeCidr,\n        Name = \"blackhole traffice to cidr\",\n        Distance = 1,\n    });\n\n    var @interface = new Unifi.StaticRoute(\"interface\", new()\n    {\n        Type = \"interface-route\",\n        Network = wan2Cidr,\n        Name = \"send traffic over wan2\",\n        Distance = 1,\n        Interface = \"WAN2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := unifi.NewStaticRoute(ctx, \"nexthop\", \u0026unifi.StaticRouteArgs{\n\t\t\tType:     pulumi.String(\"nexthop-route\"),\n\t\t\tNetwork:  pulumi.String(\"172.17.0.0/16\"),\n\t\t\tName:     pulumi.String(\"basic nexthop\"),\n\t\t\tDistance: pulumi.Int(1),\n\t\t\tNextHop:  pulumi.String(\"172.16.0.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = unifi.NewStaticRoute(ctx, \"blackhole\", \u0026unifi.StaticRouteArgs{\n\t\t\tType:     pulumi.String(\"blackhole\"),\n\t\t\tNetwork:  pulumi.Any(blackholeCidr),\n\t\t\tName:     pulumi.String(\"blackhole traffice to cidr\"),\n\t\t\tDistance: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = unifi.NewStaticRoute(ctx, \"interface\", \u0026unifi.StaticRouteArgs{\n\t\t\tType:      pulumi.String(\"interface-route\"),\n\t\t\tNetwork:   pulumi.Any(wan2Cidr),\n\t\t\tName:      pulumi.String(\"send traffic over wan2\"),\n\t\t\tDistance:  pulumi.Int(1),\n\t\t\tInterface: pulumi.String(\"WAN2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumiverse.unifi.StaticRoute;\nimport com.pulumiverse.unifi.StaticRouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var nexthop = new StaticRoute(\"nexthop\", StaticRouteArgs.builder()\n            .type(\"nexthop-route\")\n            .network(\"172.17.0.0/16\")\n            .name(\"basic nexthop\")\n            .distance(1)\n            .nextHop(\"172.16.0.1\")\n            .build());\n\n        var blackhole = new StaticRoute(\"blackhole\", StaticRouteArgs.builder()\n            .type(\"blackhole\")\n            .network(blackholeCidr)\n            .name(\"blackhole traffice to cidr\")\n            .distance(1)\n            .build());\n\n        var interface_ = new StaticRoute(\"interface\", StaticRouteArgs.builder()\n            .type(\"interface-route\")\n            .network(wan2Cidr)\n            .name(\"send traffic over wan2\")\n            .distance(1)\n            .interface_(\"WAN2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  nexthop:\n    type: unifi:StaticRoute\n    properties:\n      type: nexthop-route\n      network: 172.17.0.0/16\n      name: basic nexthop\n      distance: 1\n      nextHop: 172.16.0.1\n  blackhole:\n    type: unifi:StaticRoute\n    properties:\n      type: blackhole\n      network: ${blackholeCidr}\n      name: blackhole traffice to cidr\n      distance: 1\n  interface:\n    type: unifi:StaticRoute\n    properties:\n      type: interface-route\n      network: ${wan2Cidr}\n      name: send traffic over wan2\n      distance: 1\n      interface: WAN2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "distance": {
                    "type": "integer",
                    "description": "The distance of the static route.\n"
                },
                "interface": {
                    "type": "string",
                    "description": "The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the static route.\n"
                },
                "network": {
                    "type": "string",
                    "description": "The network subnet address.\n"
                },
                "nextHop": {
                    "type": "string",
                    "description": "The next hop of the static route (only valid for `nexthop-route` type).\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the static route with.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.\n"
                }
            },
            "required": [
                "distance",
                "name",
                "network",
                "site",
                "type"
            ],
            "inputProperties": {
                "distance": {
                    "type": "integer",
                    "description": "The distance of the static route.\n"
                },
                "interface": {
                    "type": "string",
                    "description": "The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the static route.\n"
                },
                "network": {
                    "type": "string",
                    "description": "The network subnet address.\n"
                },
                "nextHop": {
                    "type": "string",
                    "description": "The next hop of the static route (only valid for `nexthop-route` type).\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the static route with.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.\n"
                }
            },
            "requiredInputs": [
                "distance",
                "network",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StaticRoute resources.\n",
                "properties": {
                    "distance": {
                        "type": "integer",
                        "description": "The distance of the static route.\n"
                    },
                    "interface": {
                        "type": "string",
                        "description": "The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the static route.\n"
                    },
                    "network": {
                        "type": "string",
                        "description": "The network subnet address.\n"
                    },
                    "nextHop": {
                        "type": "string",
                        "description": "The next hop of the static route (only valid for `nexthop-route` type).\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the static route with.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.\n"
                    }
                },
                "type": "object"
            }
        },
        "unifi:index/wlan:Wlan": {
            "description": "`unifi.Wlan` manages a WiFi network / SSID.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst config = new pulumi.Config();\nconst vlanId = config.getNumber(\"vlanId\") || 10;\nconst _default = unifi.getApGroup({});\nconst defaultGetGroup = unifi.iam.getGroup({});\nconst vlan = new unifi.Network(\"vlan\", {\n    name: \"wifi-vlan\",\n    purpose: \"corporate\",\n    subnet: \"10.0.0.1/24\",\n    vlanId: vlanId,\n    dhcpStart: \"10.0.0.6\",\n    dhcpStop: \"10.0.0.254\",\n    dhcpEnabled: true,\n});\nconst wifi = new unifi.Wlan(\"wifi\", {\n    name: \"myssid\",\n    passphrase: \"12345678\",\n    security: \"wpapsk\",\n    wpa3Support: true,\n    wpa3Transition: true,\n    pmfMode: \"optional\",\n    networkId: vlan.id,\n    apGroupIds: [_default.then(_default =\u003e _default.id)],\n    userGroupId: defaultGetGroup.then(defaultGetGroup =\u003e defaultGetGroup.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_unifi as unifi\nimport pulumiverse_unifi as unifi\n\nconfig = pulumi.Config()\nvlan_id = config.get_float(\"vlanId\")\nif vlan_id is None:\n    vlan_id = 10\ndefault = unifi.get_ap_group()\ndefault_get_group = unifi.iam.get_group()\nvlan = unifi.Network(\"vlan\",\n    name=\"wifi-vlan\",\n    purpose=\"corporate\",\n    subnet=\"10.0.0.1/24\",\n    vlan_id=vlan_id,\n    dhcp_start=\"10.0.0.6\",\n    dhcp_stop=\"10.0.0.254\",\n    dhcp_enabled=True)\nwifi = unifi.Wlan(\"wifi\",\n    name=\"myssid\",\n    passphrase=\"12345678\",\n    security=\"wpapsk\",\n    wpa3_support=True,\n    wpa3_transition=True,\n    pmf_mode=\"optional\",\n    network_id=vlan.id,\n    ap_group_ids=[default.id],\n    user_group_id=default_get_group.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumi.Unifi;\nusing Unifi = Pulumiverse.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var vlanId = config.GetDouble(\"vlanId\") ?? 10;\n    var @default = Unifi.GetApGroup.Invoke();\n\n    var defaultGetGroup = Unifi.IAM.GetGroup.Invoke();\n\n    var vlan = new Unifi.Network(\"vlan\", new()\n    {\n        Name = \"wifi-vlan\",\n        Purpose = \"corporate\",\n        Subnet = \"10.0.0.1/24\",\n        VlanId = vlanId,\n        DhcpStart = \"10.0.0.6\",\n        DhcpStop = \"10.0.0.254\",\n        DhcpEnabled = true,\n    });\n\n    var wifi = new Unifi.Wlan(\"wifi\", new()\n    {\n        Name = \"myssid\",\n        Passphrase = \"12345678\",\n        Security = \"wpapsk\",\n        Wpa3Support = true,\n        Wpa3Transition = true,\n        PmfMode = \"optional\",\n        NetworkId = vlan.Id,\n        ApGroupIds = new[]\n        {\n            @default.Apply(@default =\u003e @default.Apply(getApGroupResult =\u003e getApGroupResult.Id)),\n        },\n        UserGroupId = defaultGetGroup.Apply(getGroupResult =\u003e getGroupResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tvlanId := float64(10)\n\t\tif param := cfg.GetFloat64(\"vlanId\"); param != 0 {\n\t\t\tvlanId = param\n\t\t}\n\t\t_default, err := unifi.GetApGroup(ctx, \u0026unifi.GetApGroupArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefaultGetGroup, err := iam.LookupGroup(ctx, \u0026iam.LookupGroupArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvlan, err := unifi.NewNetwork(ctx, \"vlan\", \u0026unifi.NetworkArgs{\n\t\t\tName:        pulumi.String(\"wifi-vlan\"),\n\t\t\tPurpose:     pulumi.String(\"corporate\"),\n\t\t\tSubnet:      pulumi.String(\"10.0.0.1/24\"),\n\t\t\tVlanId:      pulumi.Float64(vlanId),\n\t\t\tDhcpStart:   pulumi.String(\"10.0.0.6\"),\n\t\t\tDhcpStop:    pulumi.String(\"10.0.0.254\"),\n\t\t\tDhcpEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = unifi.NewWlan(ctx, \"wifi\", \u0026unifi.WlanArgs{\n\t\t\tName:           pulumi.String(\"myssid\"),\n\t\t\tPassphrase:     pulumi.String(\"12345678\"),\n\t\t\tSecurity:       pulumi.String(\"wpapsk\"),\n\t\t\tWpa3Support:    pulumi.Bool(true),\n\t\t\tWpa3Transition: pulumi.Bool(true),\n\t\t\tPmfMode:        pulumi.String(\"optional\"),\n\t\t\tNetworkId:      vlan.ID(),\n\t\t\tApGroupIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(_default.Id),\n\t\t\t},\n\t\t\tUserGroupId: pulumi.String(defaultGetGroup.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.unifi.UnifiFunctions;\nimport com.pulumi.unifi.inputs.GetApGroupArgs;\nimport com.pulumi.unifi.iam.IamFunctions;\nimport com.pulumi.unifi.iam.inputs.GetGroupArgs;\nimport com.pulumiverse.unifi.Network;\nimport com.pulumiverse.unifi.NetworkArgs;\nimport com.pulumiverse.unifi.Wlan;\nimport com.pulumiverse.unifi.WlanArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var vlanId = config.get(\"vlanId\").orElse(10);\n        final var default = UnifiFunctions.getApGroup(GetApGroupArgs.builder()\n            .build());\n\n        final var defaultGetGroup = IamFunctions.getGroup(GetGroupArgs.builder()\n            .build());\n\n        var vlan = new Network(\"vlan\", NetworkArgs.builder()\n            .name(\"wifi-vlan\")\n            .purpose(\"corporate\")\n            .subnet(\"10.0.0.1/24\")\n            .vlanId(vlanId)\n            .dhcpStart(\"10.0.0.6\")\n            .dhcpStop(\"10.0.0.254\")\n            .dhcpEnabled(true)\n            .build());\n\n        var wifi = new Wlan(\"wifi\", WlanArgs.builder()\n            .name(\"myssid\")\n            .passphrase(\"12345678\")\n            .security(\"wpapsk\")\n            .wpa3Support(true)\n            .wpa3Transition(true)\n            .pmfMode(\"optional\")\n            .networkId(vlan.id())\n            .apGroupIds(default_.id())\n            .userGroupId(defaultGetGroup.id())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  vlanId:\n    type: number\n    default: 10\nresources:\n  vlan:\n    type: unifi:Network\n    properties:\n      name: wifi-vlan\n      purpose: corporate\n      subnet: 10.0.0.1/24\n      vlanId: ${vlanId}\n      dhcpStart: 10.0.0.6\n      dhcpStop: 10.0.0.254\n      dhcpEnabled: true\n  wifi:\n    type: unifi:Wlan\n    properties:\n      name: myssid\n      passphrase: '12345678'\n      security: wpapsk\n      wpa3Support: true\n      wpa3Transition: true\n      pmfMode: optional\n      networkId: ${vlan.id}\n      apGroupIds:\n        - ${default.id}\n      userGroupId: ${defaultGetGroup.id}\nvariables:\n  default:\n    fn::invoke:\n      function: unifi:getApGroup\n      arguments: {}\n  defaultGetGroup:\n    fn::invoke:\n      function: unifi:iam:getGroup\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport from provider configured site\n\n```sh\n$ pulumi import unifi:index/wlan:Wlan mywlan 5dc28e5e9106d105bdc87217\n```\n\nimport from another site\n\n```sh\n$ pulumi import unifi:index/wlan:Wlan mywlan bfa2l6i7:5dc28e5e9106d105bdc87217\n```\n\n",
            "properties": {
                "apGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the AP groups to use for this network.\n"
                },
                "bssTransition": {
                    "type": "boolean",
                    "description": "Improves client transitions between APs when they have a weak signal. Defaults to `true`.\n"
                },
                "fastRoamingEnabled": {
                    "type": "boolean",
                    "description": "Enables 802.11r fast roaming. Defaults to `false`.\n"
                },
                "hideSsid": {
                    "type": "boolean",
                    "description": "Indicates whether or not to hide the SSID from broadcast.\n"
                },
                "isGuest": {
                    "type": "boolean",
                    "description": "Indicates that this is a guest WLAN and should use guest behaviors.\n"
                },
                "l2Isolation": {
                    "type": "boolean",
                    "description": "Isolates stations on layer 2 (ethernet) level. Defaults to `false`.\n"
                },
                "macFilterEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not the MAC filter is turned of for the network.\n"
                },
                "macFilterLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).\n"
                },
                "macFilterPolicy": {
                    "type": "string",
                    "description": "MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Defaults to `deny`.\n"
                },
                "minimumDataRate2gKbps": {
                    "type": "integer",
                    "description": "Set minimum data rate control for 2G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.\n"
                },
                "minimumDataRate5gKbps": {
                    "type": "integer",
                    "description": "Set minimum data rate control for 5G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.\n"
                },
                "multicastEnhance": {
                    "type": "boolean",
                    "description": "Indicates whether or not Multicast Enhance is turned of for the network.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The SSID of the network.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network for this SSID\n"
                },
                "no2ghzOui": {
                    "type": "boolean",
                    "description": "Connect high performance clients to 5 GHz only. Defaults to `true`.\n"
                },
                "passphrase": {
                    "type": "string",
                    "description": "The passphrase for the network, this is only required if `security` is not set to `open`.\n",
                    "secret": true
                },
                "pmfMode": {
                    "type": "string",
                    "description": "Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`. Defaults to `disabled`.\n"
                },
                "proxyArp": {
                    "type": "boolean",
                    "description": "Reduces airtime usage by allowing APs to \"proxy\" common broadcast frames as unicast. Defaults to `false`.\n"
                },
                "radiusProfileId": {
                    "type": "string",
                    "description": "ID of the RADIUS profile to use when security `wpaeap`. You can query this via the `unifi.RadiusProfile` data source.\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/unifi:index/WlanSchedule:WlanSchedule"
                    },
                    "description": "Start and stop schedules for the WLAN\n"
                },
                "security": {
                    "type": "string",
                    "description": "The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the wlan with.\n"
                },
                "uapsd": {
                    "type": "boolean",
                    "description": "Enable Unscheduled Automatic Power Save Delivery. Defaults to `false`.\n"
                },
                "userGroupId": {
                    "type": "string",
                    "description": "ID of the user group to use for this network.\n"
                },
                "wlanBand": {
                    "type": "string",
                    "description": "Radio band your WiFi network will use. Defaults to `both`.\n"
                },
                "wpa3Support": {
                    "type": "boolean",
                    "description": "Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).\n"
                },
                "wpa3Transition": {
                    "type": "boolean",
                    "description": "Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).\n"
                }
            },
            "required": [
                "name",
                "security",
                "site",
                "userGroupId"
            ],
            "inputProperties": {
                "apGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the AP groups to use for this network.\n"
                },
                "bssTransition": {
                    "type": "boolean",
                    "description": "Improves client transitions between APs when they have a weak signal. Defaults to `true`.\n"
                },
                "fastRoamingEnabled": {
                    "type": "boolean",
                    "description": "Enables 802.11r fast roaming. Defaults to `false`.\n"
                },
                "hideSsid": {
                    "type": "boolean",
                    "description": "Indicates whether or not to hide the SSID from broadcast.\n"
                },
                "isGuest": {
                    "type": "boolean",
                    "description": "Indicates that this is a guest WLAN and should use guest behaviors.\n"
                },
                "l2Isolation": {
                    "type": "boolean",
                    "description": "Isolates stations on layer 2 (ethernet) level. Defaults to `false`.\n"
                },
                "macFilterEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not the MAC filter is turned of for the network.\n"
                },
                "macFilterLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).\n"
                },
                "macFilterPolicy": {
                    "type": "string",
                    "description": "MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Defaults to `deny`.\n"
                },
                "minimumDataRate2gKbps": {
                    "type": "integer",
                    "description": "Set minimum data rate control for 2G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.\n"
                },
                "minimumDataRate5gKbps": {
                    "type": "integer",
                    "description": "Set minimum data rate control for 5G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.\n"
                },
                "multicastEnhance": {
                    "type": "boolean",
                    "description": "Indicates whether or not Multicast Enhance is turned of for the network.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The SSID of the network.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network for this SSID\n"
                },
                "no2ghzOui": {
                    "type": "boolean",
                    "description": "Connect high performance clients to 5 GHz only. Defaults to `true`.\n"
                },
                "passphrase": {
                    "type": "string",
                    "description": "The passphrase for the network, this is only required if `security` is not set to `open`.\n",
                    "secret": true
                },
                "pmfMode": {
                    "type": "string",
                    "description": "Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`. Defaults to `disabled`.\n"
                },
                "proxyArp": {
                    "type": "boolean",
                    "description": "Reduces airtime usage by allowing APs to \"proxy\" common broadcast frames as unicast. Defaults to `false`.\n"
                },
                "radiusProfileId": {
                    "type": "string",
                    "description": "ID of the RADIUS profile to use when security `wpaeap`. You can query this via the `unifi.RadiusProfile` data source.\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/unifi:index/WlanSchedule:WlanSchedule"
                    },
                    "description": "Start and stop schedules for the WLAN\n"
                },
                "security": {
                    "type": "string",
                    "description": "The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the wlan with.\n",
                    "willReplaceOnChanges": true
                },
                "uapsd": {
                    "type": "boolean",
                    "description": "Enable Unscheduled Automatic Power Save Delivery. Defaults to `false`.\n"
                },
                "userGroupId": {
                    "type": "string",
                    "description": "ID of the user group to use for this network.\n"
                },
                "wlanBand": {
                    "type": "string",
                    "description": "Radio band your WiFi network will use. Defaults to `both`.\n"
                },
                "wpa3Support": {
                    "type": "boolean",
                    "description": "Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).\n"
                },
                "wpa3Transition": {
                    "type": "boolean",
                    "description": "Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).\n"
                }
            },
            "requiredInputs": [
                "security",
                "userGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Wlan resources.\n",
                "properties": {
                    "apGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of the AP groups to use for this network.\n"
                    },
                    "bssTransition": {
                        "type": "boolean",
                        "description": "Improves client transitions between APs when they have a weak signal. Defaults to `true`.\n"
                    },
                    "fastRoamingEnabled": {
                        "type": "boolean",
                        "description": "Enables 802.11r fast roaming. Defaults to `false`.\n"
                    },
                    "hideSsid": {
                        "type": "boolean",
                        "description": "Indicates whether or not to hide the SSID from broadcast.\n"
                    },
                    "isGuest": {
                        "type": "boolean",
                        "description": "Indicates that this is a guest WLAN and should use guest behaviors.\n"
                    },
                    "l2Isolation": {
                        "type": "boolean",
                        "description": "Isolates stations on layer 2 (ethernet) level. Defaults to `false`.\n"
                    },
                    "macFilterEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether or not the MAC filter is turned of for the network.\n"
                    },
                    "macFilterLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).\n"
                    },
                    "macFilterPolicy": {
                        "type": "string",
                        "description": "MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Defaults to `deny`.\n"
                    },
                    "minimumDataRate2gKbps": {
                        "type": "integer",
                        "description": "Set minimum data rate control for 2G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.\n"
                    },
                    "minimumDataRate5gKbps": {
                        "type": "integer",
                        "description": "Set minimum data rate control for 5G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.\n"
                    },
                    "multicastEnhance": {
                        "type": "boolean",
                        "description": "Indicates whether or not Multicast Enhance is turned of for the network.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The SSID of the network.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network for this SSID\n"
                    },
                    "no2ghzOui": {
                        "type": "boolean",
                        "description": "Connect high performance clients to 5 GHz only. Defaults to `true`.\n"
                    },
                    "passphrase": {
                        "type": "string",
                        "description": "The passphrase for the network, this is only required if `security` is not set to `open`.\n",
                        "secret": true
                    },
                    "pmfMode": {
                        "type": "string",
                        "description": "Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`. Defaults to `disabled`.\n"
                    },
                    "proxyArp": {
                        "type": "boolean",
                        "description": "Reduces airtime usage by allowing APs to \"proxy\" common broadcast frames as unicast. Defaults to `false`.\n"
                    },
                    "radiusProfileId": {
                        "type": "string",
                        "description": "ID of the RADIUS profile to use when security `wpaeap`. You can query this via the `unifi.RadiusProfile` data source.\n"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/unifi:index/WlanSchedule:WlanSchedule"
                        },
                        "description": "Start and stop schedules for the WLAN\n"
                    },
                    "security": {
                        "type": "string",
                        "description": "The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the wlan with.\n",
                        "willReplaceOnChanges": true
                    },
                    "uapsd": {
                        "type": "boolean",
                        "description": "Enable Unscheduled Automatic Power Save Delivery. Defaults to `false`.\n"
                    },
                    "userGroupId": {
                        "type": "string",
                        "description": "ID of the user group to use for this network.\n"
                    },
                    "wlanBand": {
                        "type": "string",
                        "description": "Radio band your WiFi network will use. Defaults to `both`.\n"
                    },
                    "wpa3Support": {
                        "type": "boolean",
                        "description": "Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).\n"
                    },
                    "wpa3Transition": {
                        "type": "boolean",
                        "description": "Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).\n"
                    }
                },
                "type": "object"
            }
        },
        "unifi:port/forward:Forward": {
            "description": "`unifi.port.Forward` manages a port forwarding rule on the gateway.\n",
            "properties": {
                "dstPort": {
                    "type": "string",
                    "description": "The destination port for the forwarding.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the port forwarding rule is enabled or not. Defaults to `true`. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.\n",
                    "deprecationMessage": "This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration."
                },
                "fwdIp": {
                    "type": "string",
                    "description": "The IPv4 address to forward traffic to.\n"
                },
                "fwdPort": {
                    "type": "string",
                    "description": "The port to forward traffic to.\n"
                },
                "log": {
                    "type": "boolean",
                    "description": "Specifies whether to log forwarded traffic or not. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the port forwarding rule.\n"
                },
                "portForwardInterface": {
                    "type": "string",
                    "description": "The port forwarding interface. Can be `wan`, `wan2`, or `both`.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcp_udp`. Defaults to `tcp_udp`.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the port forwarding rule with.\n"
                },
                "srcIp": {
                    "type": "string",
                    "description": "The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.\n"
                }
            },
            "required": [
                "name",
                "site"
            ],
            "inputProperties": {
                "dstPort": {
                    "type": "string",
                    "description": "The destination port for the forwarding.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the port forwarding rule is enabled or not. Defaults to `true`. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.\n",
                    "deprecationMessage": "This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration."
                },
                "fwdIp": {
                    "type": "string",
                    "description": "The IPv4 address to forward traffic to.\n"
                },
                "fwdPort": {
                    "type": "string",
                    "description": "The port to forward traffic to.\n"
                },
                "log": {
                    "type": "boolean",
                    "description": "Specifies whether to log forwarded traffic or not. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the port forwarding rule.\n"
                },
                "portForwardInterface": {
                    "type": "string",
                    "description": "The port forwarding interface. Can be `wan`, `wan2`, or `both`.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcp_udp`. Defaults to `tcp_udp`.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the port forwarding rule with.\n",
                    "willReplaceOnChanges": true
                },
                "srcIp": {
                    "type": "string",
                    "description": "The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Forward resources.\n",
                "properties": {
                    "dstPort": {
                        "type": "string",
                        "description": "The destination port for the forwarding.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether the port forwarding rule is enabled or not. Defaults to `true`. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.\n",
                        "deprecationMessage": "This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration."
                    },
                    "fwdIp": {
                        "type": "string",
                        "description": "The IPv4 address to forward traffic to.\n"
                    },
                    "fwdPort": {
                        "type": "string",
                        "description": "The port to forward traffic to.\n"
                    },
                    "log": {
                        "type": "boolean",
                        "description": "Specifies whether to log forwarded traffic or not. Defaults to `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the port forwarding rule.\n"
                    },
                    "portForwardInterface": {
                        "type": "string",
                        "description": "The port forwarding interface. Can be `wan`, `wan2`, or `both`.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcp_udp`. Defaults to `tcp_udp`.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the port forwarding rule with.\n",
                        "willReplaceOnChanges": true
                    },
                    "srcIp": {
                        "type": "string",
                        "description": "The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.\n"
                    }
                },
                "type": "object"
            }
        },
        "unifi:port/profile:Profile": {
            "description": "`unifi.port.Profile` manages a port profile for use on network switches.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst config = new pulumi.Config();\nconst vlanId = config.getNumber(\"vlanId\") || 10;\nconst vlan = new unifi.Network(\"vlan\", {\n    name: \"wifi-vlan\",\n    purpose: \"corporate\",\n    subnet: \"10.0.0.1/24\",\n    vlanId: vlanId,\n    dhcpStart: \"10.0.0.6\",\n    dhcpStop: \"10.0.0.254\",\n    dhcpEnabled: true,\n});\nconst poeDisabled = new unifi.port.Profile(\"poe_disabled\", {\n    name: \"POE Disabled\",\n    nativeNetworkconfId: vlan.id,\n    poeMode: \"off\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_unifi as unifi\n\nconfig = pulumi.Config()\nvlan_id = config.get_float(\"vlanId\")\nif vlan_id is None:\n    vlan_id = 10\nvlan = unifi.Network(\"vlan\",\n    name=\"wifi-vlan\",\n    purpose=\"corporate\",\n    subnet=\"10.0.0.1/24\",\n    vlan_id=vlan_id,\n    dhcp_start=\"10.0.0.6\",\n    dhcp_stop=\"10.0.0.254\",\n    dhcp_enabled=True)\npoe_disabled = unifi.port.Profile(\"poe_disabled\",\n    name=\"POE Disabled\",\n    native_networkconf_id=vlan.id,\n    poe_mode=\"off\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumiverse.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var vlanId = config.GetDouble(\"vlanId\") ?? 10;\n    var vlan = new Unifi.Network(\"vlan\", new()\n    {\n        Name = \"wifi-vlan\",\n        Purpose = \"corporate\",\n        Subnet = \"10.0.0.1/24\",\n        VlanId = vlanId,\n        DhcpStart = \"10.0.0.6\",\n        DhcpStop = \"10.0.0.254\",\n        DhcpEnabled = true,\n    });\n\n    var poeDisabled = new Unifi.Port.Profile(\"poe_disabled\", new()\n    {\n        Name = \"POE Disabled\",\n        NativeNetworkconfId = vlan.Id,\n        PoeMode = \"off\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/port\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tvlanId := float64(10)\n\t\tif param := cfg.GetFloat64(\"vlanId\"); param != 0 {\n\t\t\tvlanId = param\n\t\t}\n\t\tvlan, err := unifi.NewNetwork(ctx, \"vlan\", \u0026unifi.NetworkArgs{\n\t\t\tName:        pulumi.String(\"wifi-vlan\"),\n\t\t\tPurpose:     pulumi.String(\"corporate\"),\n\t\t\tSubnet:      pulumi.String(\"10.0.0.1/24\"),\n\t\t\tVlanId:      pulumi.Float64(vlanId),\n\t\t\tDhcpStart:   pulumi.String(\"10.0.0.6\"),\n\t\t\tDhcpStop:    pulumi.String(\"10.0.0.254\"),\n\t\t\tDhcpEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = port.NewProfile(ctx, \"poe_disabled\", \u0026port.ProfileArgs{\n\t\t\tName:                pulumi.String(\"POE Disabled\"),\n\t\t\tNativeNetworkconfId: vlan.ID(),\n\t\t\tPoeMode:             pulumi.String(\"off\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumiverse.unifi.Network;\nimport com.pulumiverse.unifi.NetworkArgs;\nimport com.pulumiverse.unifi.port.Profile;\nimport com.pulumiverse.unifi.port.ProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var vlanId = config.get(\"vlanId\").orElse(10);\n        var vlan = new Network(\"vlan\", NetworkArgs.builder()\n            .name(\"wifi-vlan\")\n            .purpose(\"corporate\")\n            .subnet(\"10.0.0.1/24\")\n            .vlanId(vlanId)\n            .dhcpStart(\"10.0.0.6\")\n            .dhcpStop(\"10.0.0.254\")\n            .dhcpEnabled(true)\n            .build());\n\n        var poeDisabled = new Profile(\"poeDisabled\", ProfileArgs.builder()\n            .name(\"POE Disabled\")\n            .nativeNetworkconfId(vlan.id())\n            .poeMode(\"off\")\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  vlanId:\n    type: number\n    default: 10\nresources:\n  vlan:\n    type: unifi:Network\n    properties:\n      name: wifi-vlan\n      purpose: corporate\n      subnet: 10.0.0.1/24\n      vlanId: ${vlanId}\n      dhcpStart: 10.0.0.6\n      dhcpStop: 10.0.0.254\n      dhcpEnabled: true\n  poeDisabled:\n    type: unifi:port:Profile\n    name: poe_disabled\n    properties:\n      name: POE Disabled\n      nativeNetworkconfId: ${vlan.id}\n      poeMode: off\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "autoneg": {
                    "type": "boolean",
                    "description": "Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.\n"
                },
                "dot1xCtrl": {
                    "type": "string",
                    "description": "The type of 802.1X control to use. Can be `auto`, `force_authorized`, `force_unauthorized`, `mac_based` or `multi_host`. Defaults to `force_authorized`.\n"
                },
                "dot1xIdleTimeout": {
                    "type": "integer",
                    "description": "The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.\n"
                },
                "egressRateLimitKbps": {
                    "type": "integer",
                    "description": "The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.\n"
                },
                "egressRateLimitKbpsEnabled": {
                    "type": "boolean",
                    "description": "Enable egress rate limiting for the port profile. Defaults to `false`.\n"
                },
                "forward": {
                    "type": "string",
                    "description": "The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.\n"
                },
                "fullDuplex": {
                    "type": "boolean",
                    "description": "Enable full duplex for the port profile. Defaults to `false`.\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "Enable port isolation for the port profile. Defaults to `false`.\n"
                },
                "lldpmedEnabled": {
                    "type": "boolean",
                    "description": "Enable LLDP-MED for the port profile. Defaults to `true`.\n"
                },
                "lldpmedNotifyEnabled": {
                    "type": "boolean",
                    "description": "Enable LLDP-MED topology change notifications for the port profile.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the port profile.\n"
                },
                "nativeNetworkconfId": {
                    "type": "string",
                    "description": "The ID of network to use as the main network on the port profile.\n"
                },
                "opMode": {
                    "type": "string",
                    "description": "The operation mode for the port profile. Can only be `switch` Defaults to `switch`.\n"
                },
                "poeMode": {
                    "type": "string",
                    "description": "The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.\n"
                },
                "portSecurityEnabled": {
                    "type": "boolean",
                    "description": "Enable port security for the port profile. Defaults to `false`.\n"
                },
                "portSecurityMacAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The MAC addresses associated with the port security for the port profile.\n"
                },
                "priorityQueue1Level": {
                    "type": "integer",
                    "description": "The priority queue 1 level for the port profile. Can be between 0 and 100.\n"
                },
                "priorityQueue2Level": {
                    "type": "integer",
                    "description": "The priority queue 2 level for the port profile. Can be between 0 and 100.\n"
                },
                "priorityQueue3Level": {
                    "type": "integer",
                    "description": "The priority queue 3 level for the port profile. Can be between 0 and 100.\n"
                },
                "priorityQueue4Level": {
                    "type": "integer",
                    "description": "The priority queue 4 level for the port profile. Can be between 0 and 100.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the port profile with.\n"
                },
                "speed": {
                    "type": "integer",
                    "description": "The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`\n"
                },
                "stormctrlBcastEnabled": {
                    "type": "boolean",
                    "description": "Enable broadcast Storm Control for the port profile. Defaults to `false`.\n"
                },
                "stormctrlBcastLevel": {
                    "type": "integer",
                    "description": "The broadcast Storm Control level for the port profile. Can be between 0 and 100.\n"
                },
                "stormctrlBcastRate": {
                    "type": "integer",
                    "description": "The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.\n"
                },
                "stormctrlMcastEnabled": {
                    "type": "boolean",
                    "description": "Enable multicast Storm Control for the port profile. Defaults to `false`.\n"
                },
                "stormctrlMcastLevel": {
                    "type": "integer",
                    "description": "The multicast Storm Control level for the port profile. Can be between 0 and 100.\n"
                },
                "stormctrlMcastRate": {
                    "type": "integer",
                    "description": "The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.\n"
                },
                "stormctrlType": {
                    "type": "string",
                    "description": "The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.\n"
                },
                "stormctrlUcastEnabled": {
                    "type": "boolean",
                    "description": "Enable unknown unicast Storm Control for the port profile. Defaults to `false`.\n"
                },
                "stormctrlUcastLevel": {
                    "type": "integer",
                    "description": "The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.\n"
                },
                "stormctrlUcastRate": {
                    "type": "integer",
                    "description": "The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.\n"
                },
                "stpPortMode": {
                    "type": "boolean",
                    "description": "Enable spanning tree protocol on the port profile. Defaults to `true`.\n"
                },
                "taggedNetworkconfIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of networks to tag traffic with for the port profile.\n"
                },
                "voiceNetworkconfId": {
                    "type": "string",
                    "description": "The ID of network to use as the voice network on the port profile.\n"
                }
            },
            "required": [
                "name",
                "site"
            ],
            "inputProperties": {
                "autoneg": {
                    "type": "boolean",
                    "description": "Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.\n"
                },
                "dot1xCtrl": {
                    "type": "string",
                    "description": "The type of 802.1X control to use. Can be `auto`, `force_authorized`, `force_unauthorized`, `mac_based` or `multi_host`. Defaults to `force_authorized`.\n"
                },
                "dot1xIdleTimeout": {
                    "type": "integer",
                    "description": "The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.\n"
                },
                "egressRateLimitKbps": {
                    "type": "integer",
                    "description": "The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.\n"
                },
                "egressRateLimitKbpsEnabled": {
                    "type": "boolean",
                    "description": "Enable egress rate limiting for the port profile. Defaults to `false`.\n"
                },
                "forward": {
                    "type": "string",
                    "description": "The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.\n"
                },
                "fullDuplex": {
                    "type": "boolean",
                    "description": "Enable full duplex for the port profile. Defaults to `false`.\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "Enable port isolation for the port profile. Defaults to `false`.\n"
                },
                "lldpmedEnabled": {
                    "type": "boolean",
                    "description": "Enable LLDP-MED for the port profile. Defaults to `true`.\n"
                },
                "lldpmedNotifyEnabled": {
                    "type": "boolean",
                    "description": "Enable LLDP-MED topology change notifications for the port profile.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the port profile.\n"
                },
                "nativeNetworkconfId": {
                    "type": "string",
                    "description": "The ID of network to use as the main network on the port profile.\n"
                },
                "opMode": {
                    "type": "string",
                    "description": "The operation mode for the port profile. Can only be `switch` Defaults to `switch`.\n"
                },
                "poeMode": {
                    "type": "string",
                    "description": "The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.\n"
                },
                "portSecurityEnabled": {
                    "type": "boolean",
                    "description": "Enable port security for the port profile. Defaults to `false`.\n"
                },
                "portSecurityMacAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The MAC addresses associated with the port security for the port profile.\n"
                },
                "priorityQueue1Level": {
                    "type": "integer",
                    "description": "The priority queue 1 level for the port profile. Can be between 0 and 100.\n"
                },
                "priorityQueue2Level": {
                    "type": "integer",
                    "description": "The priority queue 2 level for the port profile. Can be between 0 and 100.\n"
                },
                "priorityQueue3Level": {
                    "type": "integer",
                    "description": "The priority queue 3 level for the port profile. Can be between 0 and 100.\n"
                },
                "priorityQueue4Level": {
                    "type": "integer",
                    "description": "The priority queue 4 level for the port profile. Can be between 0 and 100.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the port profile with.\n",
                    "willReplaceOnChanges": true
                },
                "speed": {
                    "type": "integer",
                    "description": "The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`\n"
                },
                "stormctrlBcastEnabled": {
                    "type": "boolean",
                    "description": "Enable broadcast Storm Control for the port profile. Defaults to `false`.\n"
                },
                "stormctrlBcastLevel": {
                    "type": "integer",
                    "description": "The broadcast Storm Control level for the port profile. Can be between 0 and 100.\n"
                },
                "stormctrlBcastRate": {
                    "type": "integer",
                    "description": "The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.\n"
                },
                "stormctrlMcastEnabled": {
                    "type": "boolean",
                    "description": "Enable multicast Storm Control for the port profile. Defaults to `false`.\n"
                },
                "stormctrlMcastLevel": {
                    "type": "integer",
                    "description": "The multicast Storm Control level for the port profile. Can be between 0 and 100.\n"
                },
                "stormctrlMcastRate": {
                    "type": "integer",
                    "description": "The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.\n"
                },
                "stormctrlType": {
                    "type": "string",
                    "description": "The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.\n"
                },
                "stormctrlUcastEnabled": {
                    "type": "boolean",
                    "description": "Enable unknown unicast Storm Control for the port profile. Defaults to `false`.\n"
                },
                "stormctrlUcastLevel": {
                    "type": "integer",
                    "description": "The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.\n"
                },
                "stormctrlUcastRate": {
                    "type": "integer",
                    "description": "The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.\n"
                },
                "stpPortMode": {
                    "type": "boolean",
                    "description": "Enable spanning tree protocol on the port profile. Defaults to `true`.\n"
                },
                "taggedNetworkconfIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of networks to tag traffic with for the port profile.\n"
                },
                "voiceNetworkconfId": {
                    "type": "string",
                    "description": "The ID of network to use as the voice network on the port profile.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Profile resources.\n",
                "properties": {
                    "autoneg": {
                        "type": "boolean",
                        "description": "Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.\n"
                    },
                    "dot1xCtrl": {
                        "type": "string",
                        "description": "The type of 802.1X control to use. Can be `auto`, `force_authorized`, `force_unauthorized`, `mac_based` or `multi_host`. Defaults to `force_authorized`.\n"
                    },
                    "dot1xIdleTimeout": {
                        "type": "integer",
                        "description": "The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.\n"
                    },
                    "egressRateLimitKbps": {
                        "type": "integer",
                        "description": "The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.\n"
                    },
                    "egressRateLimitKbpsEnabled": {
                        "type": "boolean",
                        "description": "Enable egress rate limiting for the port profile. Defaults to `false`.\n"
                    },
                    "forward": {
                        "type": "string",
                        "description": "The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.\n"
                    },
                    "fullDuplex": {
                        "type": "boolean",
                        "description": "Enable full duplex for the port profile. Defaults to `false`.\n"
                    },
                    "isolation": {
                        "type": "boolean",
                        "description": "Enable port isolation for the port profile. Defaults to `false`.\n"
                    },
                    "lldpmedEnabled": {
                        "type": "boolean",
                        "description": "Enable LLDP-MED for the port profile. Defaults to `true`.\n"
                    },
                    "lldpmedNotifyEnabled": {
                        "type": "boolean",
                        "description": "Enable LLDP-MED topology change notifications for the port profile.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the port profile.\n"
                    },
                    "nativeNetworkconfId": {
                        "type": "string",
                        "description": "The ID of network to use as the main network on the port profile.\n"
                    },
                    "opMode": {
                        "type": "string",
                        "description": "The operation mode for the port profile. Can only be `switch` Defaults to `switch`.\n"
                    },
                    "poeMode": {
                        "type": "string",
                        "description": "The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.\n"
                    },
                    "portSecurityEnabled": {
                        "type": "boolean",
                        "description": "Enable port security for the port profile. Defaults to `false`.\n"
                    },
                    "portSecurityMacAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The MAC addresses associated with the port security for the port profile.\n"
                    },
                    "priorityQueue1Level": {
                        "type": "integer",
                        "description": "The priority queue 1 level for the port profile. Can be between 0 and 100.\n"
                    },
                    "priorityQueue2Level": {
                        "type": "integer",
                        "description": "The priority queue 2 level for the port profile. Can be between 0 and 100.\n"
                    },
                    "priorityQueue3Level": {
                        "type": "integer",
                        "description": "The priority queue 3 level for the port profile. Can be between 0 and 100.\n"
                    },
                    "priorityQueue4Level": {
                        "type": "integer",
                        "description": "The priority queue 4 level for the port profile. Can be between 0 and 100.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the port profile with.\n",
                        "willReplaceOnChanges": true
                    },
                    "speed": {
                        "type": "integer",
                        "description": "The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`\n"
                    },
                    "stormctrlBcastEnabled": {
                        "type": "boolean",
                        "description": "Enable broadcast Storm Control for the port profile. Defaults to `false`.\n"
                    },
                    "stormctrlBcastLevel": {
                        "type": "integer",
                        "description": "The broadcast Storm Control level for the port profile. Can be between 0 and 100.\n"
                    },
                    "stormctrlBcastRate": {
                        "type": "integer",
                        "description": "The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.\n"
                    },
                    "stormctrlMcastEnabled": {
                        "type": "boolean",
                        "description": "Enable multicast Storm Control for the port profile. Defaults to `false`.\n"
                    },
                    "stormctrlMcastLevel": {
                        "type": "integer",
                        "description": "The multicast Storm Control level for the port profile. Can be between 0 and 100.\n"
                    },
                    "stormctrlMcastRate": {
                        "type": "integer",
                        "description": "The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.\n"
                    },
                    "stormctrlType": {
                        "type": "string",
                        "description": "The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.\n"
                    },
                    "stormctrlUcastEnabled": {
                        "type": "boolean",
                        "description": "Enable unknown unicast Storm Control for the port profile. Defaults to `false`.\n"
                    },
                    "stormctrlUcastLevel": {
                        "type": "integer",
                        "description": "The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.\n"
                    },
                    "stormctrlUcastRate": {
                        "type": "integer",
                        "description": "The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.\n"
                    },
                    "stpPortMode": {
                        "type": "boolean",
                        "description": "Enable spanning tree protocol on the port profile. Defaults to `true`.\n"
                    },
                    "taggedNetworkconfIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of networks to tag traffic with for the port profile.\n"
                    },
                    "voiceNetworkconfId": {
                        "type": "string",
                        "description": "The ID of network to use as the voice network on the port profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "unifi:setting/mgmt:Mgmt": {
            "description": "`unifi.setting.Mgmt` manages settings for a unifi site.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst example = new unifi.Site(\"example\", {description: \"example\"});\nconst exampleMgmt = new unifi.setting.Mgmt(\"example\", {\n    site: example.name,\n    autoUpgrade: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_unifi as unifi\n\nexample = unifi.Site(\"example\", description=\"example\")\nexample_mgmt = unifi.setting.Mgmt(\"example\",\n    site=example.name,\n    auto_upgrade=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumiverse.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Unifi.Site(\"example\", new()\n    {\n        Description = \"example\",\n    });\n\n    var exampleMgmt = new Unifi.Setting.Mgmt(\"example\", new()\n    {\n        Site = example.Name,\n        AutoUpgrade = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/setting\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := unifi.NewSite(ctx, \"example\", \u0026unifi.SiteArgs{\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = setting.NewMgmt(ctx, \"example\", \u0026setting.MgmtArgs{\n\t\t\tSite:        example.Name,\n\t\t\tAutoUpgrade: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumiverse.unifi.Site;\nimport com.pulumiverse.unifi.SiteArgs;\nimport com.pulumiverse.unifi.setting.Mgmt;\nimport com.pulumiverse.unifi.setting.MgmtArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Site(\"example\", SiteArgs.builder()\n            .description(\"example\")\n            .build());\n\n        var exampleMgmt = new Mgmt(\"exampleMgmt\", MgmtArgs.builder()\n            .site(example.name())\n            .autoUpgrade(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: unifi:Site\n    properties:\n      description: example\n  exampleMgmt:\n    type: unifi:setting:Mgmt\n    name: example\n    properties:\n      site: ${example.name}\n      autoUpgrade: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "autoUpgrade": {
                    "type": "boolean",
                    "description": "Automatically upgrade device firmware.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the settings with.\n"
                },
                "sshEnabled": {
                    "type": "boolean",
                    "description": "Enable SSH authentication.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/unifi:setting/MgmtSshKey:MgmtSshKey"
                    },
                    "description": "SSH key.\n"
                }
            },
            "required": [
                "site"
            ],
            "inputProperties": {
                "autoUpgrade": {
                    "type": "boolean",
                    "description": "Automatically upgrade device firmware.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the settings with.\n",
                    "willReplaceOnChanges": true
                },
                "sshEnabled": {
                    "type": "boolean",
                    "description": "Enable SSH authentication.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/unifi:setting/MgmtSshKey:MgmtSshKey"
                    },
                    "description": "SSH key.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Mgmt resources.\n",
                "properties": {
                    "autoUpgrade": {
                        "type": "boolean",
                        "description": "Automatically upgrade device firmware.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the settings with.\n",
                        "willReplaceOnChanges": true
                    },
                    "sshEnabled": {
                        "type": "boolean",
                        "description": "Enable SSH authentication.\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/unifi:setting/MgmtSshKey:MgmtSshKey"
                        },
                        "description": "SSH key.\n"
                    }
                },
                "type": "object"
            }
        },
        "unifi:setting/radius:Radius": {
            "description": "`unifi.setting.Radius` manages settings for the built-in RADIUS server.\n",
            "properties": {
                "accountingEnabled": {
                    "type": "boolean",
                    "description": "Enable RADIUS accounting Defaults to `false`.\n"
                },
                "accountingPort": {
                    "type": "integer",
                    "description": "The port for accounting communications. Defaults to `1813`.\n"
                },
                "authPort": {
                    "type": "integer",
                    "description": "The port for authentication communications. Defaults to `1812`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "RAIDUS server enabled. Defaults to `true`.\n"
                },
                "interimUpdateInterval": {
                    "type": "integer",
                    "description": "Statistics will be collected from connected clients at this interval. Defaults to `3600`.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "RAIDUS secret passphrase. Defaults to ``.\n",
                    "secret": true
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the settings with.\n"
                },
                "tunneledReply": {
                    "type": "boolean",
                    "description": "Encrypt communication between the server and the client. Defaults to `true`.\n"
                }
            },
            "required": [
                "site"
            ],
            "inputProperties": {
                "accountingEnabled": {
                    "type": "boolean",
                    "description": "Enable RADIUS accounting Defaults to `false`.\n"
                },
                "accountingPort": {
                    "type": "integer",
                    "description": "The port for accounting communications. Defaults to `1813`.\n"
                },
                "authPort": {
                    "type": "integer",
                    "description": "The port for authentication communications. Defaults to `1812`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "RAIDUS server enabled. Defaults to `true`.\n"
                },
                "interimUpdateInterval": {
                    "type": "integer",
                    "description": "Statistics will be collected from connected clients at this interval. Defaults to `3600`.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "RAIDUS secret passphrase. Defaults to ``.\n",
                    "secret": true
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the settings with.\n",
                    "willReplaceOnChanges": true
                },
                "tunneledReply": {
                    "type": "boolean",
                    "description": "Encrypt communication between the server and the client. Defaults to `true`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Radius resources.\n",
                "properties": {
                    "accountingEnabled": {
                        "type": "boolean",
                        "description": "Enable RADIUS accounting Defaults to `false`.\n"
                    },
                    "accountingPort": {
                        "type": "integer",
                        "description": "The port for accounting communications. Defaults to `1813`.\n"
                    },
                    "authPort": {
                        "type": "integer",
                        "description": "The port for authentication communications. Defaults to `1812`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "RAIDUS server enabled. Defaults to `true`.\n"
                    },
                    "interimUpdateInterval": {
                        "type": "integer",
                        "description": "Statistics will be collected from connected clients at this interval. Defaults to `3600`.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "RAIDUS secret passphrase. Defaults to ``.\n",
                        "secret": true
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the settings with.\n",
                        "willReplaceOnChanges": true
                    },
                    "tunneledReply": {
                        "type": "boolean",
                        "description": "Encrypt communication between the server and the client. Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "unifi:setting/uSG:USG": {
            "description": "`unifi.setting.USG` manages settings for a Unifi Security Gateway.\n",
            "properties": {
                "dhcpRelayServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The DHCP relay servers.\n"
                },
                "firewallGuestDefaultLog": {
                    "type": "boolean",
                    "description": "Whether the guest firewall log is enabled.\n"
                },
                "firewallLanDefaultLog": {
                    "type": "boolean",
                    "description": "Whether the LAN firewall log is enabled.\n"
                },
                "firewallWanDefaultLog": {
                    "type": "boolean",
                    "description": "Whether the WAN firewall log is enabled.\n"
                },
                "multicastDnsEnabled": {
                    "type": "boolean",
                    "description": "Whether multicast DNS is enabled.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the settings with.\n"
                }
            },
            "required": [
                "dhcpRelayServers",
                "firewallGuestDefaultLog",
                "firewallLanDefaultLog",
                "firewallWanDefaultLog",
                "multicastDnsEnabled",
                "site"
            ],
            "inputProperties": {
                "dhcpRelayServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The DHCP relay servers.\n"
                },
                "firewallGuestDefaultLog": {
                    "type": "boolean",
                    "description": "Whether the guest firewall log is enabled.\n"
                },
                "firewallLanDefaultLog": {
                    "type": "boolean",
                    "description": "Whether the LAN firewall log is enabled.\n"
                },
                "firewallWanDefaultLog": {
                    "type": "boolean",
                    "description": "Whether the WAN firewall log is enabled.\n"
                },
                "multicastDnsEnabled": {
                    "type": "boolean",
                    "description": "Whether multicast DNS is enabled.\n"
                },
                "site": {
                    "type": "string",
                    "description": "The name of the site to associate the settings with.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering USG resources.\n",
                "properties": {
                    "dhcpRelayServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The DHCP relay servers.\n"
                    },
                    "firewallGuestDefaultLog": {
                        "type": "boolean",
                        "description": "Whether the guest firewall log is enabled.\n"
                    },
                    "firewallLanDefaultLog": {
                        "type": "boolean",
                        "description": "Whether the LAN firewall log is enabled.\n"
                    },
                    "firewallWanDefaultLog": {
                        "type": "boolean",
                        "description": "Whether the WAN firewall log is enabled.\n"
                    },
                    "multicastDnsEnabled": {
                        "type": "boolean",
                        "description": "Whether multicast DNS is enabled.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the settings with.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "pulumi:providers:unifi/terraformConfig": {
            "description": "This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.",
            "inputs": {
                "properties": {
                    "__self__": {
                        "type": "ref",
                        "$ref": "#/resources/pulumi:providers:unifi"
                    }
                },
                "type": "pulumi:providers:unifi/terraformConfig",
                "required": [
                    "__self__"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "result"
                ],
                "type": "object"
            }
        },
        "unifi:iam/getGroup:getGroup": {
            "description": "`unifi.iam.Group` data source can be used to retrieve the ID for a user group by name.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the user group to look up. Defaults to `Default`.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site the user group is associated with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "id": {
                        "description": "The ID of this AP group.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the user group to look up. Defaults to `Default`.\n",
                        "type": "string"
                    },
                    "qosRateMaxDown": {
                        "type": "integer"
                    },
                    "qosRateMaxUp": {
                        "type": "integer"
                    },
                    "site": {
                        "description": "The name of the site the user group is associated with.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "qosRateMaxDown",
                    "qosRateMaxUp",
                    "site"
                ],
                "type": "object"
            }
        },
        "unifi:iam/getUser:getUser": {
            "description": "`unifi.iam.User` retrieves properties of a user (or \"client\" in the UI) of the network by MAC address.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst client = unifi.iam.getUser({\n    mac: \"01:23:45:67:89:ab\",\n});\n```\n```python\nimport pulumi\nimport pulumi_unifi as unifi\n\nclient = unifi.iam.get_user(mac=\"01:23:45:67:89:ab\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumi.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var client = Unifi.IAM.GetUser.Invoke(new()\n    {\n        Mac = \"01:23:45:67:89:ab\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := iam.LookupUser(ctx, \u0026iam.LookupUserArgs{\n\t\t\tMac: \"01:23:45:67:89:ab\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.unifi.iam.IamFunctions;\nimport com.pulumi.unifi.iam.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var client = IamFunctions.getUser(GetUserArgs.builder()\n            .mac(\"01:23:45:67:89:ab\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  client:\n    fn::invoke:\n      function: unifi:iam:getUser\n      arguments:\n        mac: 01:23:45:67:89:ab\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "mac": {
                        "type": "string",
                        "description": "The MAC address of the user.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site the user is associated with.\n"
                    }
                },
                "type": "object",
                "required": [
                    "mac"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "blocked": {
                        "description": "Specifies whether this user should be blocked from the network.\n",
                        "type": "boolean"
                    },
                    "devIdOverride": {
                        "description": "Override the device fingerprint.\n",
                        "type": "integer"
                    },
                    "fixedIp": {
                        "description": "fixed IPv4 address set for this user.\n",
                        "type": "string"
                    },
                    "hostname": {
                        "description": "The hostname of the user.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the user.\n",
                        "type": "string"
                    },
                    "ip": {
                        "description": "The IP address of the user.\n",
                        "type": "string"
                    },
                    "localDnsRecord": {
                        "description": "The local DNS record for this user.\n",
                        "type": "string"
                    },
                    "mac": {
                        "description": "The MAC address of the user.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the user.\n",
                        "type": "string"
                    },
                    "networkId": {
                        "description": "The network ID for this user.\n",
                        "type": "string"
                    },
                    "note": {
                        "description": "A note with additional information for the user.\n",
                        "type": "string"
                    },
                    "site": {
                        "description": "The name of the site the user is associated with.\n",
                        "type": "string"
                    },
                    "userGroupId": {
                        "description": "The user group ID for the user.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "blocked",
                    "devIdOverride",
                    "fixedIp",
                    "hostname",
                    "id",
                    "ip",
                    "localDnsRecord",
                    "mac",
                    "name",
                    "networkId",
                    "note",
                    "site",
                    "userGroupId"
                ],
                "type": "object"
            }
        },
        "unifi:index/getAccount:getAccount": {
            "description": "`unifi.Account` data source can be used to retrieve RADIUS user accounts\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccount.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the account to look up\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site the account is associated with.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "id": {
                        "description": "The ID of this account.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the account to look up\n",
                        "type": "string"
                    },
                    "networkId": {
                        "description": "ID of the network for this account\n",
                        "type": "string"
                    },
                    "password": {
                        "description": "The password of the account.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "site": {
                        "description": "The name of the site the account is associated with.\n",
                        "type": "string"
                    },
                    "tunnelMediumType": {
                        "description": "See RFC2868 section 3.2\n",
                        "type": "integer"
                    },
                    "tunnelType": {
                        "description": "See RFC2868 section 3.1\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "networkId",
                    "password",
                    "site",
                    "tunnelMediumType",
                    "tunnelType"
                ],
                "type": "object"
            }
        },
        "unifi:index/getApGroup:getApGroup": {
            "description": "`unifi.getApGroup` data source can be used to retrieve the ID for an AP group by name.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst _default = unifi.getApGroup({});\n```\n```python\nimport pulumi\nimport pulumi_unifi as unifi\n\ndefault = unifi.get_ap_group()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumi.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Unifi.GetApGroup.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := unifi.GetApGroup(ctx, \u0026unifi.GetApGroupArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.unifi.UnifiFunctions;\nimport com.pulumi.unifi.inputs.GetApGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = UnifiFunctions.getApGroup(GetApGroupArgs.builder()\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      function: unifi:getApGroup\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the AP group to look up, leave blank to look up the default AP group.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site the AP group is associated with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApGroup.\n",
                "properties": {
                    "id": {
                        "description": "The ID of this AP group.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the AP group to look up, leave blank to look up the default AP group.\n",
                        "type": "string"
                    },
                    "site": {
                        "description": "The name of the site the AP group is associated with.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "site"
                ],
                "type": "object"
            }
        },
        "unifi:index/getNetwork:getNetwork": {
            "description": "`unifi.Network` data source can be used to retrieve settings for a network by name or ID.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\n//retrieve network data by unifi network name\nconst lanNetwork = unifi.getNetwork({\n    name: \"Default\",\n});\n//retrieve network data from user record\nconst myDevice = unifi.iam.getUser({\n    mac: \"01:23:45:67:89:ab\",\n});\nconst myNetwork = myDevice.then(myDevice =\u003e unifi.getNetwork({\n    id: myDevice.networkId,\n}));\n```\n```python\nimport pulumi\nimport pulumi_unifi as unifi\n\n#retrieve network data by unifi network name\nlan_network = unifi.get_network(name=\"Default\")\n#retrieve network data from user record\nmy_device = unifi.iam.get_user(mac=\"01:23:45:67:89:ab\")\nmy_network = unifi.get_network(id=my_device.network_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumi.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    //retrieve network data by unifi network name\n    var lanNetwork = Unifi.GetNetwork.Invoke(new()\n    {\n        Name = \"Default\",\n    });\n\n    //retrieve network data from user record\n    var myDevice = Unifi.IAM.GetUser.Invoke(new()\n    {\n        Mac = \"01:23:45:67:89:ab\",\n    });\n\n    var myNetwork = Unifi.GetNetwork.Invoke(new()\n    {\n        Id = myDevice.Apply(getUserResult =\u003e getUserResult.NetworkId),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/iam\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// retrieve network data by unifi network name\n\t\t_, err := unifi.LookupNetwork(ctx, \u0026unifi.LookupNetworkArgs{\n\t\t\tName: pulumi.StringRef(\"Default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// retrieve network data from user record\n\t\tmyDevice, err := iam.LookupUser(ctx, \u0026iam.LookupUserArgs{\n\t\t\tMac: \"01:23:45:67:89:ab\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = unifi.LookupNetwork(ctx, \u0026unifi.LookupNetworkArgs{\n\t\t\tId: pulumi.StringRef(myDevice.NetworkId),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.unifi.UnifiFunctions;\nimport com.pulumi.unifi.inputs.GetNetworkArgs;\nimport com.pulumi.unifi.iam.IamFunctions;\nimport com.pulumi.unifi.iam.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        //retrieve network data by unifi network name\n        final var lanNetwork = UnifiFunctions.getNetwork(GetNetworkArgs.builder()\n            .name(\"Default\")\n            .build());\n\n        //retrieve network data from user record\n        final var myDevice = IamFunctions.getUser(GetUserArgs.builder()\n            .mac(\"01:23:45:67:89:ab\")\n            .build());\n\n        final var myNetwork = UnifiFunctions.getNetwork(GetNetworkArgs.builder()\n            .id(myDevice.networkId())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  #retrieve network data by unifi network name\n  lanNetwork:\n    fn::invoke:\n      function: unifi:getNetwork\n      arguments:\n        name: Default\n  #retrieve network data from user record\n  myDevice:\n    fn::invoke:\n      function: unifi:iam:getUser\n      arguments:\n        mac: 01:23:45:67:89:ab\n  myNetwork:\n    fn::invoke:\n      function: unifi:getNetwork\n      arguments:\n        id: ${myDevice.networkId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the network.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the network.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site to associate the network with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "dhcpDns": {
                        "description": "IPv4 addresses for the DNS server to be returned from the DHCP server.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "dhcpEnabled": {
                        "description": "whether DHCP is enabled or not on this network.\n",
                        "type": "boolean"
                    },
                    "dhcpLease": {
                        "description": "lease time for DHCP addresses.\n",
                        "type": "integer"
                    },
                    "dhcpStart": {
                        "description": "The IPv4 address where the DHCP range of addresses starts.\n",
                        "type": "string"
                    },
                    "dhcpStop": {
                        "description": "The IPv4 address where the DHCP range of addresses stops.\n",
                        "type": "string"
                    },
                    "dhcpV6Dns": {
                        "description": "Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcp_v6_dns_auto` is set to `false`.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "dhcpV6DnsAuto": {
                        "description": "Specifies DNS source to propagate. If set `false` the entries in `dhcp_v6_dns` are used, the upstream entries otherwise\n",
                        "type": "boolean"
                    },
                    "dhcpV6Enabled": {
                        "description": "Enable stateful DHCPv6 for static configuration.\n",
                        "type": "boolean"
                    },
                    "dhcpV6Lease": {
                        "description": "Specifies the lease time for DHCPv6 addresses.\n",
                        "type": "integer"
                    },
                    "dhcpV6Start": {
                        "description": "Start address of the DHCPv6 range. Used in static DHCPv6 configuration.\n",
                        "type": "string"
                    },
                    "dhcpV6Stop": {
                        "description": "End address of the DHCPv6 range. Used in static DHCPv6 configuration.\n",
                        "type": "string"
                    },
                    "dhcpdBootEnabled": {
                        "description": "Toggles on the DHCP boot options. will be set to true if you have dhcpd*boot*filename, and dhcpd*boot*server set.\n",
                        "type": "boolean"
                    },
                    "dhcpdBootFilename": {
                        "description": "the file to PXE boot from on the dhcpd*boot*server.\n",
                        "type": "string"
                    },
                    "dhcpdBootServer": {
                        "description": "IPv4 address of a TFTP server to network boot from.\n",
                        "type": "string"
                    },
                    "domainName": {
                        "description": "The domain name of this network.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the network.\n",
                        "type": "string"
                    },
                    "igmpSnooping": {
                        "description": "Specifies whether IGMP snooping is enabled or not.\n",
                        "type": "boolean"
                    },
                    "ipv6InterfaceType": {
                        "description": "Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`.\n",
                        "type": "string"
                    },
                    "ipv6PdInterface": {
                        "description": "Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.\n",
                        "type": "string"
                    },
                    "ipv6PdPrefixid": {
                        "description": "Specifies the IPv6 Prefix ID.\n",
                        "type": "string"
                    },
                    "ipv6PdStart": {
                        "description": "Start address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.\n",
                        "type": "string"
                    },
                    "ipv6PdStop": {
                        "description": "End address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.\n",
                        "type": "string"
                    },
                    "ipv6RaEnable": {
                        "description": "Specifies whether to enable router advertisements or not.\n",
                        "type": "boolean"
                    },
                    "ipv6RaPreferredLifetime": {
                        "description": "Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6_ra_valid_lifetime`\n",
                        "type": "integer"
                    },
                    "ipv6RaPriority": {
                        "description": "IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`\n",
                        "type": "string"
                    },
                    "ipv6RaValidLifetime": {
                        "description": "Total lifetime in which the address can be used. Must be equal to or greater than `ipv6_ra_preferred_lifetime`.\n",
                        "type": "integer"
                    },
                    "ipv6StaticSubnet": {
                        "description": "Specifies the static IPv6 subnet (when ipv6*interface*type is 'static').\n",
                        "type": "string"
                    },
                    "multicastDns": {
                        "description": "Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller \u003e=v7).\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "The name of the network.\n",
                        "type": "string"
                    },
                    "networkGroup": {
                        "description": "The group of the network.\n",
                        "type": "string"
                    },
                    "purpose": {
                        "description": "The purpose of the network. One of `corporate`, `guest`, `wan`, or `vlan-only`.\n",
                        "type": "string"
                    },
                    "site": {
                        "description": "The name of the site to associate the network with.\n",
                        "type": "string"
                    },
                    "subnet": {
                        "description": "The subnet of the network (CIDR address).\n",
                        "type": "string"
                    },
                    "vlanId": {
                        "description": "The VLAN ID of the network.\n",
                        "type": "integer"
                    },
                    "wanDhcpV6PdSize": {
                        "description": "Specifies the IPv6 prefix size to request from ISP. Must be a number between 48 and 64.\n",
                        "type": "integer"
                    },
                    "wanDns": {
                        "description": "DNS servers IPs of the WAN.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "wanEgressQos": {
                        "description": "Specifies the WAN egress quality of service.\n",
                        "type": "integer"
                    },
                    "wanGateway": {
                        "description": "The IPv4 gateway of the WAN.\n",
                        "type": "string"
                    },
                    "wanGatewayV6": {
                        "description": "The IPv6 gateway of the WAN.\n",
                        "type": "string"
                    },
                    "wanIp": {
                        "description": "The IPv4 address of the WAN.\n",
                        "type": "string"
                    },
                    "wanIpv6": {
                        "description": "The IPv6 address of the WAN.\n",
                        "type": "string"
                    },
                    "wanNetmask": {
                        "description": "The IPv4 netmask of the WAN.\n",
                        "type": "string"
                    },
                    "wanNetworkgroup": {
                        "description": "Specifies the WAN network group. One of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.\n",
                        "type": "string"
                    },
                    "wanPrefixlen": {
                        "description": "The IPv6 prefix length of the WAN. Must be between 1 and 128.\n",
                        "type": "integer"
                    },
                    "wanType": {
                        "description": "Specifies the IPV4 WAN connection type. One of either `disabled`, `static`, `dhcp`, or `pppoe`.\n",
                        "type": "string"
                    },
                    "wanTypeV6": {
                        "description": "Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.\n",
                        "type": "string"
                    },
                    "wanUsername": {
                        "description": "Specifies the IPV4 WAN username.\n",
                        "type": "string"
                    },
                    "xWanPassword": {
                        "description": "Specifies the IPV4 WAN password.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "dhcpDns",
                    "dhcpEnabled",
                    "dhcpLease",
                    "dhcpStart",
                    "dhcpStop",
                    "dhcpV6Dns",
                    "dhcpV6DnsAuto",
                    "dhcpV6Enabled",
                    "dhcpV6Lease",
                    "dhcpV6Start",
                    "dhcpV6Stop",
                    "dhcpdBootEnabled",
                    "dhcpdBootFilename",
                    "dhcpdBootServer",
                    "domainName",
                    "id",
                    "igmpSnooping",
                    "ipv6InterfaceType",
                    "ipv6PdInterface",
                    "ipv6PdPrefixid",
                    "ipv6PdStart",
                    "ipv6PdStop",
                    "ipv6RaEnable",
                    "ipv6RaPreferredLifetime",
                    "ipv6RaPriority",
                    "ipv6RaValidLifetime",
                    "ipv6StaticSubnet",
                    "multicastDns",
                    "name",
                    "networkGroup",
                    "purpose",
                    "site",
                    "subnet",
                    "vlanId",
                    "wanDhcpV6PdSize",
                    "wanDns",
                    "wanEgressQos",
                    "wanGateway",
                    "wanGatewayV6",
                    "wanIp",
                    "wanIpv6",
                    "wanNetmask",
                    "wanNetworkgroup",
                    "wanPrefixlen",
                    "wanType",
                    "wanTypeV6",
                    "wanUsername",
                    "xWanPassword"
                ],
                "type": "object"
            }
        },
        "unifi:index/getRadiusProfile:getRadiusProfile": {
            "description": "`unifi.RadiusProfile` data source can be used to retrieve the ID for a RADIUS profile by name.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRadiusProfile.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the RADIUS profile to look up. Defaults to `Default`.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site the RADIUS profile is associated with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRadiusProfile.\n",
                "properties": {
                    "id": {
                        "description": "The ID of this AP group.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the RADIUS profile to look up. Defaults to `Default`.\n",
                        "type": "string"
                    },
                    "site": {
                        "description": "The name of the site the RADIUS profile is associated with.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "site"
                ],
                "type": "object"
            }
        },
        "unifi:port/getProfile:getProfile": {
            "description": "`unifi.port.Profile` data source can be used to retrieve the ID for a port profile by name.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as unifi from \"@pulumiverse/unifi\";\n\nconst all = unifi.port.getProfile({});\n```\n```python\nimport pulumi\nimport pulumi_unifi as unifi\n\nall = unifi.port.get_profile()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Unifi = Pulumi.Unifi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Unifi.Port.GetProfile.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/port\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := port.LookupProfile(ctx, \u0026port.LookupProfileArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.unifi.port.PortFunctions;\nimport com.pulumi.unifi.port.inputs.GetProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = PortFunctions.getProfile(GetProfileArgs.builder()\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      function: unifi:port:getProfile\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProfile.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the port profile to look up. Defaults to `All`.\n"
                    },
                    "site": {
                        "type": "string",
                        "description": "The name of the site the port profile is associated with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProfile.\n",
                "properties": {
                    "id": {
                        "description": "The ID of this port profile.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the port profile to look up. Defaults to `All`.\n",
                        "type": "string"
                    },
                    "site": {
                        "description": "The name of the site the port profile is associated with.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "site"
                ],
                "type": "object"
            }
        }
    }
}