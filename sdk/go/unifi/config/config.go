// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/internal"
)

var _ = internal.GetEnvOrDefault

// Skip verification of TLS certificates of API requests. You may need to set this to `true` if you are using your local
// API without setting up a signed certificate. Can be specified with the `UNIFI_INSECURE` environment variable.
func GetAllowInsecure(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "unifi:allowInsecure")
	if err == nil {
		return v
	}
	var value bool
	if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "UNIFI_INSECURE"); d != nil {
		value = d.(bool)
	}
	return value
}

// URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the
// path (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more
// standard controller paths.
func GetApiUrl(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "unifi:apiUrl")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "UNIFI_API"); d != nil {
		value = d.(string)
	}
	return value
}

// Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.
func GetPassword(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "unifi:password")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "UNIFI_PASSWORD"); d != nil {
		value = d.(string)
	}
	return value
}

// The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.
// Default: `default`
func GetSite(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "unifi:site")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "UNIFI_SITE"); d != nil {
		value = d.(string)
	}
	return value
}

// Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.
func GetUsername(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "unifi:username")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "UNIFI_USERNAME"); d != nil {
		value = d.(string)
	}
	return value
}
