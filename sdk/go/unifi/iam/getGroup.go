// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/internal"
)

// `iam.Group` data source can be used to retrieve the ID for a user group by name.
func LookupGroup(ctx *pulumi.Context, args *LookupGroupArgs, opts ...pulumi.InvokeOption) (*LookupGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGroupResult
	err := ctx.Invoke("unifi:iam/getGroup:getGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroup.
type LookupGroupArgs struct {
	// The name of the user group to look up. Defaults to `Default`.
	Name *string `pulumi:"name"`
	// The name of the site the user group is associated with.
	Site *string `pulumi:"site"`
}

// A collection of values returned by getGroup.
type LookupGroupResult struct {
	// The ID of this AP group.
	Id string `pulumi:"id"`
	// The name of the user group to look up. Defaults to `Default`.
	Name           *string `pulumi:"name"`
	QosRateMaxDown int     `pulumi:"qosRateMaxDown"`
	QosRateMaxUp   int     `pulumi:"qosRateMaxUp"`
	// The name of the site the user group is associated with.
	Site string `pulumi:"site"`
}

func LookupGroupOutput(ctx *pulumi.Context, args LookupGroupOutputArgs, opts ...pulumi.InvokeOption) LookupGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGroupResult, error) {
			args := v.(LookupGroupArgs)
			r, err := LookupGroup(ctx, &args, opts...)
			var s LookupGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGroupResultOutput)
}

// A collection of arguments for invoking getGroup.
type LookupGroupOutputArgs struct {
	// The name of the user group to look up. Defaults to `Default`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name of the site the user group is associated with.
	Site pulumi.StringPtrInput `pulumi:"site"`
}

func (LookupGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupArgs)(nil)).Elem()
}

// A collection of values returned by getGroup.
type LookupGroupResultOutput struct{ *pulumi.OutputState }

func (LookupGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupResult)(nil)).Elem()
}

func (o LookupGroupResultOutput) ToLookupGroupResultOutput() LookupGroupResultOutput {
	return o
}

func (o LookupGroupResultOutput) ToLookupGroupResultOutputWithContext(ctx context.Context) LookupGroupResultOutput {
	return o
}

// The ID of this AP group.
func (o LookupGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the user group to look up. Defaults to `Default`.
func (o LookupGroupResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGroupResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupGroupResultOutput) QosRateMaxDown() pulumi.IntOutput {
	return o.ApplyT(func(v LookupGroupResult) int { return v.QosRateMaxDown }).(pulumi.IntOutput)
}

func (o LookupGroupResultOutput) QosRateMaxUp() pulumi.IntOutput {
	return o.ApplyT(func(v LookupGroupResult) int { return v.QosRateMaxUp }).(pulumi.IntOutput)
}

// The name of the site the user group is associated with.
func (o LookupGroupResultOutput) Site() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Site }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGroupResultOutput{})
}
