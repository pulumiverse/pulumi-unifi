// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package port

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/internal"
)

// `port.Profile` manages a port profile for use on network switches.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi"
//	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/port"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vlanId := float64(10)
//			if param := cfg.GetFloat64("vlanId"); param != 0 {
//				vlanId = param
//			}
//			vlan, err := unifi.NewNetwork(ctx, "vlan", &unifi.NetworkArgs{
//				Purpose:     pulumi.String("corporate"),
//				Subnet:      pulumi.String("10.0.0.1/24"),
//				VlanId:      pulumi.Float64(vlanId),
//				DhcpStart:   pulumi.String("10.0.0.6"),
//				DhcpStop:    pulumi.String("10.0.0.254"),
//				DhcpEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = port.NewProfile(ctx, "poeDisabled", &port.ProfileArgs{
//				NativeNetworkconfId: vlan.ID(),
//				PoeMode:             pulumi.String("off"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Profile struct {
	pulumi.CustomResourceState

	// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
	Autoneg pulumi.BoolPtrOutput `pulumi:"autoneg"`
	// The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
	Dot1xCtrl pulumi.StringPtrOutput `pulumi:"dot1xCtrl"`
	// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
	Dot1xIdleTimeout pulumi.IntPtrOutput `pulumi:"dot1xIdleTimeout"`
	// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
	EgressRateLimitKbps pulumi.IntPtrOutput `pulumi:"egressRateLimitKbps"`
	// Enable egress rate limiting for the port profile. Defaults to `false`.
	EgressRateLimitKbpsEnabled pulumi.BoolPtrOutput `pulumi:"egressRateLimitKbpsEnabled"`
	// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
	Forward pulumi.StringPtrOutput `pulumi:"forward"`
	// Enable full duplex for the port profile. Defaults to `false`.
	FullDuplex pulumi.BoolPtrOutput `pulumi:"fullDuplex"`
	// Enable port isolation for the port profile. Defaults to `false`.
	Isolation pulumi.BoolPtrOutput `pulumi:"isolation"`
	// Enable LLDP-MED for the port profile. Defaults to `true`.
	LldpmedEnabled pulumi.BoolPtrOutput `pulumi:"lldpmedEnabled"`
	// Enable LLDP-MED topology change notifications for the port profile.
	LldpmedNotifyEnabled pulumi.BoolPtrOutput `pulumi:"lldpmedNotifyEnabled"`
	// The name of the port profile.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of network to use as the main network on the port profile.
	NativeNetworkconfId pulumi.StringPtrOutput `pulumi:"nativeNetworkconfId"`
	// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
	OpMode pulumi.StringPtrOutput `pulumi:"opMode"`
	// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
	PoeMode pulumi.StringPtrOutput `pulumi:"poeMode"`
	// Enable port security for the port profile. Defaults to `false`.
	PortSecurityEnabled pulumi.BoolPtrOutput `pulumi:"portSecurityEnabled"`
	// The MAC addresses associated with the port security for the port profile.
	PortSecurityMacAddresses pulumi.StringArrayOutput `pulumi:"portSecurityMacAddresses"`
	// The priority queue 1 level for the port profile. Can be between 0 and 100.
	PriorityQueue1Level pulumi.IntPtrOutput `pulumi:"priorityQueue1Level"`
	// The priority queue 2 level for the port profile. Can be between 0 and 100.
	PriorityQueue2Level pulumi.IntPtrOutput `pulumi:"priorityQueue2Level"`
	// The priority queue 3 level for the port profile. Can be between 0 and 100.
	PriorityQueue3Level pulumi.IntPtrOutput `pulumi:"priorityQueue3Level"`
	// The priority queue 4 level for the port profile. Can be between 0 and 100.
	PriorityQueue4Level pulumi.IntPtrOutput `pulumi:"priorityQueue4Level"`
	// The name of the site to associate the port profile with.
	Site pulumi.StringOutput `pulumi:"site"`
	// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
	Speed pulumi.IntPtrOutput `pulumi:"speed"`
	// Enable broadcast Storm Control for the port profile. Defaults to `false`.
	StormctrlBcastEnabled pulumi.BoolPtrOutput `pulumi:"stormctrlBcastEnabled"`
	// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlBcastLevel pulumi.IntPtrOutput `pulumi:"stormctrlBcastLevel"`
	// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlBcastRate pulumi.IntPtrOutput `pulumi:"stormctrlBcastRate"`
	// Enable multicast Storm Control for the port profile. Defaults to `false`.
	StormctrlMcastEnabled pulumi.BoolPtrOutput `pulumi:"stormctrlMcastEnabled"`
	// The multicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlMcastLevel pulumi.IntPtrOutput `pulumi:"stormctrlMcastLevel"`
	// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlMcastRate pulumi.IntPtrOutput `pulumi:"stormctrlMcastRate"`
	// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
	StormctrlType pulumi.StringPtrOutput `pulumi:"stormctrlType"`
	// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
	StormctrlUcastEnabled pulumi.BoolPtrOutput `pulumi:"stormctrlUcastEnabled"`
	// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlUcastLevel pulumi.IntPtrOutput `pulumi:"stormctrlUcastLevel"`
	// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlUcastRate pulumi.IntPtrOutput `pulumi:"stormctrlUcastRate"`
	// Enable spanning tree protocol on the port profile. Defaults to `true`.
	StpPortMode pulumi.BoolPtrOutput `pulumi:"stpPortMode"`
	// The IDs of networks to tag traffic with for the port profile.
	TaggedNetworkconfIds pulumi.StringArrayOutput `pulumi:"taggedNetworkconfIds"`
	// The ID of network to use as the voice network on the port profile.
	VoiceNetworkconfId pulumi.StringPtrOutput `pulumi:"voiceNetworkconfId"`
}

// NewProfile registers a new resource with the given unique name, arguments, and options.
func NewProfile(ctx *pulumi.Context,
	name string, args *ProfileArgs, opts ...pulumi.ResourceOption) (*Profile, error) {
	if args == nil {
		args = &ProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Profile
	err := ctx.RegisterResource("unifi:port/profile:Profile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfile gets an existing Profile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileState, opts ...pulumi.ResourceOption) (*Profile, error) {
	var resource Profile
	err := ctx.ReadResource("unifi:port/profile:Profile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Profile resources.
type profileState struct {
	// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
	Autoneg *bool `pulumi:"autoneg"`
	// The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
	Dot1xCtrl *string `pulumi:"dot1xCtrl"`
	// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
	Dot1xIdleTimeout *int `pulumi:"dot1xIdleTimeout"`
	// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
	EgressRateLimitKbps *int `pulumi:"egressRateLimitKbps"`
	// Enable egress rate limiting for the port profile. Defaults to `false`.
	EgressRateLimitKbpsEnabled *bool `pulumi:"egressRateLimitKbpsEnabled"`
	// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
	Forward *string `pulumi:"forward"`
	// Enable full duplex for the port profile. Defaults to `false`.
	FullDuplex *bool `pulumi:"fullDuplex"`
	// Enable port isolation for the port profile. Defaults to `false`.
	Isolation *bool `pulumi:"isolation"`
	// Enable LLDP-MED for the port profile. Defaults to `true`.
	LldpmedEnabled *bool `pulumi:"lldpmedEnabled"`
	// Enable LLDP-MED topology change notifications for the port profile.
	LldpmedNotifyEnabled *bool `pulumi:"lldpmedNotifyEnabled"`
	// The name of the port profile.
	Name *string `pulumi:"name"`
	// The ID of network to use as the main network on the port profile.
	NativeNetworkconfId *string `pulumi:"nativeNetworkconfId"`
	// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
	OpMode *string `pulumi:"opMode"`
	// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
	PoeMode *string `pulumi:"poeMode"`
	// Enable port security for the port profile. Defaults to `false`.
	PortSecurityEnabled *bool `pulumi:"portSecurityEnabled"`
	// The MAC addresses associated with the port security for the port profile.
	PortSecurityMacAddresses []string `pulumi:"portSecurityMacAddresses"`
	// The priority queue 1 level for the port profile. Can be between 0 and 100.
	PriorityQueue1Level *int `pulumi:"priorityQueue1Level"`
	// The priority queue 2 level for the port profile. Can be between 0 and 100.
	PriorityQueue2Level *int `pulumi:"priorityQueue2Level"`
	// The priority queue 3 level for the port profile. Can be between 0 and 100.
	PriorityQueue3Level *int `pulumi:"priorityQueue3Level"`
	// The priority queue 4 level for the port profile. Can be between 0 and 100.
	PriorityQueue4Level *int `pulumi:"priorityQueue4Level"`
	// The name of the site to associate the port profile with.
	Site *string `pulumi:"site"`
	// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
	Speed *int `pulumi:"speed"`
	// Enable broadcast Storm Control for the port profile. Defaults to `false`.
	StormctrlBcastEnabled *bool `pulumi:"stormctrlBcastEnabled"`
	// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlBcastLevel *int `pulumi:"stormctrlBcastLevel"`
	// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlBcastRate *int `pulumi:"stormctrlBcastRate"`
	// Enable multicast Storm Control for the port profile. Defaults to `false`.
	StormctrlMcastEnabled *bool `pulumi:"stormctrlMcastEnabled"`
	// The multicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlMcastLevel *int `pulumi:"stormctrlMcastLevel"`
	// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlMcastRate *int `pulumi:"stormctrlMcastRate"`
	// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
	StormctrlType *string `pulumi:"stormctrlType"`
	// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
	StormctrlUcastEnabled *bool `pulumi:"stormctrlUcastEnabled"`
	// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlUcastLevel *int `pulumi:"stormctrlUcastLevel"`
	// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlUcastRate *int `pulumi:"stormctrlUcastRate"`
	// Enable spanning tree protocol on the port profile. Defaults to `true`.
	StpPortMode *bool `pulumi:"stpPortMode"`
	// The IDs of networks to tag traffic with for the port profile.
	TaggedNetworkconfIds []string `pulumi:"taggedNetworkconfIds"`
	// The ID of network to use as the voice network on the port profile.
	VoiceNetworkconfId *string `pulumi:"voiceNetworkconfId"`
}

type ProfileState struct {
	// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
	Autoneg pulumi.BoolPtrInput
	// The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
	Dot1xCtrl pulumi.StringPtrInput
	// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
	Dot1xIdleTimeout pulumi.IntPtrInput
	// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
	EgressRateLimitKbps pulumi.IntPtrInput
	// Enable egress rate limiting for the port profile. Defaults to `false`.
	EgressRateLimitKbpsEnabled pulumi.BoolPtrInput
	// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
	Forward pulumi.StringPtrInput
	// Enable full duplex for the port profile. Defaults to `false`.
	FullDuplex pulumi.BoolPtrInput
	// Enable port isolation for the port profile. Defaults to `false`.
	Isolation pulumi.BoolPtrInput
	// Enable LLDP-MED for the port profile. Defaults to `true`.
	LldpmedEnabled pulumi.BoolPtrInput
	// Enable LLDP-MED topology change notifications for the port profile.
	LldpmedNotifyEnabled pulumi.BoolPtrInput
	// The name of the port profile.
	Name pulumi.StringPtrInput
	// The ID of network to use as the main network on the port profile.
	NativeNetworkconfId pulumi.StringPtrInput
	// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
	OpMode pulumi.StringPtrInput
	// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
	PoeMode pulumi.StringPtrInput
	// Enable port security for the port profile. Defaults to `false`.
	PortSecurityEnabled pulumi.BoolPtrInput
	// The MAC addresses associated with the port security for the port profile.
	PortSecurityMacAddresses pulumi.StringArrayInput
	// The priority queue 1 level for the port profile. Can be between 0 and 100.
	PriorityQueue1Level pulumi.IntPtrInput
	// The priority queue 2 level for the port profile. Can be between 0 and 100.
	PriorityQueue2Level pulumi.IntPtrInput
	// The priority queue 3 level for the port profile. Can be between 0 and 100.
	PriorityQueue3Level pulumi.IntPtrInput
	// The priority queue 4 level for the port profile. Can be between 0 and 100.
	PriorityQueue4Level pulumi.IntPtrInput
	// The name of the site to associate the port profile with.
	Site pulumi.StringPtrInput
	// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
	Speed pulumi.IntPtrInput
	// Enable broadcast Storm Control for the port profile. Defaults to `false`.
	StormctrlBcastEnabled pulumi.BoolPtrInput
	// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlBcastLevel pulumi.IntPtrInput
	// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlBcastRate pulumi.IntPtrInput
	// Enable multicast Storm Control for the port profile. Defaults to `false`.
	StormctrlMcastEnabled pulumi.BoolPtrInput
	// The multicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlMcastLevel pulumi.IntPtrInput
	// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlMcastRate pulumi.IntPtrInput
	// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
	StormctrlType pulumi.StringPtrInput
	// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
	StormctrlUcastEnabled pulumi.BoolPtrInput
	// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlUcastLevel pulumi.IntPtrInput
	// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlUcastRate pulumi.IntPtrInput
	// Enable spanning tree protocol on the port profile. Defaults to `true`.
	StpPortMode pulumi.BoolPtrInput
	// The IDs of networks to tag traffic with for the port profile.
	TaggedNetworkconfIds pulumi.StringArrayInput
	// The ID of network to use as the voice network on the port profile.
	VoiceNetworkconfId pulumi.StringPtrInput
}

func (ProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileState)(nil)).Elem()
}

type profileArgs struct {
	// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
	Autoneg *bool `pulumi:"autoneg"`
	// The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
	Dot1xCtrl *string `pulumi:"dot1xCtrl"`
	// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
	Dot1xIdleTimeout *int `pulumi:"dot1xIdleTimeout"`
	// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
	EgressRateLimitKbps *int `pulumi:"egressRateLimitKbps"`
	// Enable egress rate limiting for the port profile. Defaults to `false`.
	EgressRateLimitKbpsEnabled *bool `pulumi:"egressRateLimitKbpsEnabled"`
	// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
	Forward *string `pulumi:"forward"`
	// Enable full duplex for the port profile. Defaults to `false`.
	FullDuplex *bool `pulumi:"fullDuplex"`
	// Enable port isolation for the port profile. Defaults to `false`.
	Isolation *bool `pulumi:"isolation"`
	// Enable LLDP-MED for the port profile. Defaults to `true`.
	LldpmedEnabled *bool `pulumi:"lldpmedEnabled"`
	// Enable LLDP-MED topology change notifications for the port profile.
	LldpmedNotifyEnabled *bool `pulumi:"lldpmedNotifyEnabled"`
	// The name of the port profile.
	Name *string `pulumi:"name"`
	// The ID of network to use as the main network on the port profile.
	NativeNetworkconfId *string `pulumi:"nativeNetworkconfId"`
	// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
	OpMode *string `pulumi:"opMode"`
	// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
	PoeMode *string `pulumi:"poeMode"`
	// Enable port security for the port profile. Defaults to `false`.
	PortSecurityEnabled *bool `pulumi:"portSecurityEnabled"`
	// The MAC addresses associated with the port security for the port profile.
	PortSecurityMacAddresses []string `pulumi:"portSecurityMacAddresses"`
	// The priority queue 1 level for the port profile. Can be between 0 and 100.
	PriorityQueue1Level *int `pulumi:"priorityQueue1Level"`
	// The priority queue 2 level for the port profile. Can be between 0 and 100.
	PriorityQueue2Level *int `pulumi:"priorityQueue2Level"`
	// The priority queue 3 level for the port profile. Can be between 0 and 100.
	PriorityQueue3Level *int `pulumi:"priorityQueue3Level"`
	// The priority queue 4 level for the port profile. Can be between 0 and 100.
	PriorityQueue4Level *int `pulumi:"priorityQueue4Level"`
	// The name of the site to associate the port profile with.
	Site *string `pulumi:"site"`
	// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
	Speed *int `pulumi:"speed"`
	// Enable broadcast Storm Control for the port profile. Defaults to `false`.
	StormctrlBcastEnabled *bool `pulumi:"stormctrlBcastEnabled"`
	// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlBcastLevel *int `pulumi:"stormctrlBcastLevel"`
	// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlBcastRate *int `pulumi:"stormctrlBcastRate"`
	// Enable multicast Storm Control for the port profile. Defaults to `false`.
	StormctrlMcastEnabled *bool `pulumi:"stormctrlMcastEnabled"`
	// The multicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlMcastLevel *int `pulumi:"stormctrlMcastLevel"`
	// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlMcastRate *int `pulumi:"stormctrlMcastRate"`
	// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
	StormctrlType *string `pulumi:"stormctrlType"`
	// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
	StormctrlUcastEnabled *bool `pulumi:"stormctrlUcastEnabled"`
	// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlUcastLevel *int `pulumi:"stormctrlUcastLevel"`
	// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlUcastRate *int `pulumi:"stormctrlUcastRate"`
	// Enable spanning tree protocol on the port profile. Defaults to `true`.
	StpPortMode *bool `pulumi:"stpPortMode"`
	// The IDs of networks to tag traffic with for the port profile.
	TaggedNetworkconfIds []string `pulumi:"taggedNetworkconfIds"`
	// The ID of network to use as the voice network on the port profile.
	VoiceNetworkconfId *string `pulumi:"voiceNetworkconfId"`
}

// The set of arguments for constructing a Profile resource.
type ProfileArgs struct {
	// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
	Autoneg pulumi.BoolPtrInput
	// The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
	Dot1xCtrl pulumi.StringPtrInput
	// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
	Dot1xIdleTimeout pulumi.IntPtrInput
	// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
	EgressRateLimitKbps pulumi.IntPtrInput
	// Enable egress rate limiting for the port profile. Defaults to `false`.
	EgressRateLimitKbpsEnabled pulumi.BoolPtrInput
	// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
	Forward pulumi.StringPtrInput
	// Enable full duplex for the port profile. Defaults to `false`.
	FullDuplex pulumi.BoolPtrInput
	// Enable port isolation for the port profile. Defaults to `false`.
	Isolation pulumi.BoolPtrInput
	// Enable LLDP-MED for the port profile. Defaults to `true`.
	LldpmedEnabled pulumi.BoolPtrInput
	// Enable LLDP-MED topology change notifications for the port profile.
	LldpmedNotifyEnabled pulumi.BoolPtrInput
	// The name of the port profile.
	Name pulumi.StringPtrInput
	// The ID of network to use as the main network on the port profile.
	NativeNetworkconfId pulumi.StringPtrInput
	// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
	OpMode pulumi.StringPtrInput
	// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
	PoeMode pulumi.StringPtrInput
	// Enable port security for the port profile. Defaults to `false`.
	PortSecurityEnabled pulumi.BoolPtrInput
	// The MAC addresses associated with the port security for the port profile.
	PortSecurityMacAddresses pulumi.StringArrayInput
	// The priority queue 1 level for the port profile. Can be between 0 and 100.
	PriorityQueue1Level pulumi.IntPtrInput
	// The priority queue 2 level for the port profile. Can be between 0 and 100.
	PriorityQueue2Level pulumi.IntPtrInput
	// The priority queue 3 level for the port profile. Can be between 0 and 100.
	PriorityQueue3Level pulumi.IntPtrInput
	// The priority queue 4 level for the port profile. Can be between 0 and 100.
	PriorityQueue4Level pulumi.IntPtrInput
	// The name of the site to associate the port profile with.
	Site pulumi.StringPtrInput
	// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
	Speed pulumi.IntPtrInput
	// Enable broadcast Storm Control for the port profile. Defaults to `false`.
	StormctrlBcastEnabled pulumi.BoolPtrInput
	// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlBcastLevel pulumi.IntPtrInput
	// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlBcastRate pulumi.IntPtrInput
	// Enable multicast Storm Control for the port profile. Defaults to `false`.
	StormctrlMcastEnabled pulumi.BoolPtrInput
	// The multicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlMcastLevel pulumi.IntPtrInput
	// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlMcastRate pulumi.IntPtrInput
	// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
	StormctrlType pulumi.StringPtrInput
	// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
	StormctrlUcastEnabled pulumi.BoolPtrInput
	// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
	StormctrlUcastLevel pulumi.IntPtrInput
	// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
	StormctrlUcastRate pulumi.IntPtrInput
	// Enable spanning tree protocol on the port profile. Defaults to `true`.
	StpPortMode pulumi.BoolPtrInput
	// The IDs of networks to tag traffic with for the port profile.
	TaggedNetworkconfIds pulumi.StringArrayInput
	// The ID of network to use as the voice network on the port profile.
	VoiceNetworkconfId pulumi.StringPtrInput
}

func (ProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileArgs)(nil)).Elem()
}

type ProfileInput interface {
	pulumi.Input

	ToProfileOutput() ProfileOutput
	ToProfileOutputWithContext(ctx context.Context) ProfileOutput
}

func (*Profile) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (i *Profile) ToProfileOutput() ProfileOutput {
	return i.ToProfileOutputWithContext(context.Background())
}

func (i *Profile) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileOutput)
}

// ProfileArrayInput is an input type that accepts ProfileArray and ProfileArrayOutput values.
// You can construct a concrete instance of `ProfileArrayInput` via:
//
//	ProfileArray{ ProfileArgs{...} }
type ProfileArrayInput interface {
	pulumi.Input

	ToProfileArrayOutput() ProfileArrayOutput
	ToProfileArrayOutputWithContext(context.Context) ProfileArrayOutput
}

type ProfileArray []ProfileInput

func (ProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (i ProfileArray) ToProfileArrayOutput() ProfileArrayOutput {
	return i.ToProfileArrayOutputWithContext(context.Background())
}

func (i ProfileArray) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileArrayOutput)
}

// ProfileMapInput is an input type that accepts ProfileMap and ProfileMapOutput values.
// You can construct a concrete instance of `ProfileMapInput` via:
//
//	ProfileMap{ "key": ProfileArgs{...} }
type ProfileMapInput interface {
	pulumi.Input

	ToProfileMapOutput() ProfileMapOutput
	ToProfileMapOutputWithContext(context.Context) ProfileMapOutput
}

type ProfileMap map[string]ProfileInput

func (ProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (i ProfileMap) ToProfileMapOutput() ProfileMapOutput {
	return i.ToProfileMapOutputWithContext(context.Background())
}

func (i ProfileMap) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMapOutput)
}

type ProfileOutput struct{ *pulumi.OutputState }

func (ProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (o ProfileOutput) ToProfileOutput() ProfileOutput {
	return o
}

func (o ProfileOutput) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return o
}

// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
func (o ProfileOutput) Autoneg() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.Autoneg }).(pulumi.BoolPtrOutput)
}

// The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
func (o ProfileOutput) Dot1xCtrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.Dot1xCtrl }).(pulumi.StringPtrOutput)
}

// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
func (o ProfileOutput) Dot1xIdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.Dot1xIdleTimeout }).(pulumi.IntPtrOutput)
}

// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
func (o ProfileOutput) EgressRateLimitKbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.EgressRateLimitKbps }).(pulumi.IntPtrOutput)
}

// Enable egress rate limiting for the port profile. Defaults to `false`.
func (o ProfileOutput) EgressRateLimitKbpsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.EgressRateLimitKbpsEnabled }).(pulumi.BoolPtrOutput)
}

// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
func (o ProfileOutput) Forward() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.Forward }).(pulumi.StringPtrOutput)
}

// Enable full duplex for the port profile. Defaults to `false`.
func (o ProfileOutput) FullDuplex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.FullDuplex }).(pulumi.BoolPtrOutput)
}

// Enable port isolation for the port profile. Defaults to `false`.
func (o ProfileOutput) Isolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.Isolation }).(pulumi.BoolPtrOutput)
}

// Enable LLDP-MED for the port profile. Defaults to `true`.
func (o ProfileOutput) LldpmedEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.LldpmedEnabled }).(pulumi.BoolPtrOutput)
}

// Enable LLDP-MED topology change notifications for the port profile.
func (o ProfileOutput) LldpmedNotifyEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.LldpmedNotifyEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the port profile.
func (o ProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of network to use as the main network on the port profile.
func (o ProfileOutput) NativeNetworkconfId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.NativeNetworkconfId }).(pulumi.StringPtrOutput)
}

// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
func (o ProfileOutput) OpMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.OpMode }).(pulumi.StringPtrOutput)
}

// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
func (o ProfileOutput) PoeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.PoeMode }).(pulumi.StringPtrOutput)
}

// Enable port security for the port profile. Defaults to `false`.
func (o ProfileOutput) PortSecurityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.PortSecurityEnabled }).(pulumi.BoolPtrOutput)
}

// The MAC addresses associated with the port security for the port profile.
func (o ProfileOutput) PortSecurityMacAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringArrayOutput { return v.PortSecurityMacAddresses }).(pulumi.StringArrayOutput)
}

// The priority queue 1 level for the port profile. Can be between 0 and 100.
func (o ProfileOutput) PriorityQueue1Level() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.PriorityQueue1Level }).(pulumi.IntPtrOutput)
}

// The priority queue 2 level for the port profile. Can be between 0 and 100.
func (o ProfileOutput) PriorityQueue2Level() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.PriorityQueue2Level }).(pulumi.IntPtrOutput)
}

// The priority queue 3 level for the port profile. Can be between 0 and 100.
func (o ProfileOutput) PriorityQueue3Level() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.PriorityQueue3Level }).(pulumi.IntPtrOutput)
}

// The priority queue 4 level for the port profile. Can be between 0 and 100.
func (o ProfileOutput) PriorityQueue4Level() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.PriorityQueue4Level }).(pulumi.IntPtrOutput)
}

// The name of the site to associate the port profile with.
func (o ProfileOutput) Site() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Site }).(pulumi.StringOutput)
}

// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
func (o ProfileOutput) Speed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.Speed }).(pulumi.IntPtrOutput)
}

// Enable broadcast Storm Control for the port profile. Defaults to `false`.
func (o ProfileOutput) StormctrlBcastEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.StormctrlBcastEnabled }).(pulumi.BoolPtrOutput)
}

// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
func (o ProfileOutput) StormctrlBcastLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.StormctrlBcastLevel }).(pulumi.IntPtrOutput)
}

// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
func (o ProfileOutput) StormctrlBcastRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.StormctrlBcastRate }).(pulumi.IntPtrOutput)
}

// Enable multicast Storm Control for the port profile. Defaults to `false`.
func (o ProfileOutput) StormctrlMcastEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.StormctrlMcastEnabled }).(pulumi.BoolPtrOutput)
}

// The multicast Storm Control level for the port profile. Can be between 0 and 100.
func (o ProfileOutput) StormctrlMcastLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.StormctrlMcastLevel }).(pulumi.IntPtrOutput)
}

// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
func (o ProfileOutput) StormctrlMcastRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.StormctrlMcastRate }).(pulumi.IntPtrOutput)
}

// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
func (o ProfileOutput) StormctrlType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.StormctrlType }).(pulumi.StringPtrOutput)
}

// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
func (o ProfileOutput) StormctrlUcastEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.StormctrlUcastEnabled }).(pulumi.BoolPtrOutput)
}

// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
func (o ProfileOutput) StormctrlUcastLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.StormctrlUcastLevel }).(pulumi.IntPtrOutput)
}

// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
func (o ProfileOutput) StormctrlUcastRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.StormctrlUcastRate }).(pulumi.IntPtrOutput)
}

// Enable spanning tree protocol on the port profile. Defaults to `true`.
func (o ProfileOutput) StpPortMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.BoolPtrOutput { return v.StpPortMode }).(pulumi.BoolPtrOutput)
}

// The IDs of networks to tag traffic with for the port profile.
func (o ProfileOutput) TaggedNetworkconfIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringArrayOutput { return v.TaggedNetworkconfIds }).(pulumi.StringArrayOutput)
}

// The ID of network to use as the voice network on the port profile.
func (o ProfileOutput) VoiceNetworkconfId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.VoiceNetworkconfId }).(pulumi.StringPtrOutput)
}

type ProfileArrayOutput struct{ *pulumi.OutputState }

func (ProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (o ProfileArrayOutput) ToProfileArrayOutput() ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) Index(i pulumi.IntInput) ProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].([]*Profile)[vs[1].(int)]
	}).(ProfileOutput)
}

type ProfileMapOutput struct{ *pulumi.OutputState }

func (ProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (o ProfileMapOutput) ToProfileMapOutput() ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) MapIndex(k pulumi.StringInput) ProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].(map[string]*Profile)[vs[1].(string)]
	}).(ProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileInput)(nil)).Elem(), &Profile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileArrayInput)(nil)).Elem(), ProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMapInput)(nil)).Elem(), ProfileMap{})
	pulumi.RegisterOutputType(ProfileOutput{})
	pulumi.RegisterOutputType(ProfileArrayOutput{})
	pulumi.RegisterOutputType(ProfileMapOutput{})
}
