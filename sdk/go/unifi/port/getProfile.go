// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package port

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `port.Profile` data source can be used to retrieve the ID for a port profile by name.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/port"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := port.LookupProfile(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupProfile(ctx *pulumi.Context, args *LookupProfileArgs, opts ...pulumi.InvokeOption) (*LookupProfileResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupProfileResult
	err := ctx.Invoke("unifi:port/getProfile:getProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProfile.
type LookupProfileArgs struct {
	// The name of the port profile to look up. Defaults to `All`.
	Name *string `pulumi:"name"`
	// The name of the site the port profile is associated with.
	Site *string `pulumi:"site"`
}

// A collection of values returned by getProfile.
type LookupProfileResult struct {
	// The ID of this port profile.
	Id string `pulumi:"id"`
	// The name of the port profile to look up. Defaults to `All`.
	Name *string `pulumi:"name"`
	// The name of the site the port profile is associated with.
	Site string `pulumi:"site"`
}

func LookupProfileOutput(ctx *pulumi.Context, args LookupProfileOutputArgs, opts ...pulumi.InvokeOption) LookupProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProfileResult, error) {
			args := v.(LookupProfileArgs)
			r, err := LookupProfile(ctx, &args, opts...)
			var s LookupProfileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupProfileResultOutput)
}

// A collection of arguments for invoking getProfile.
type LookupProfileOutputArgs struct {
	// The name of the port profile to look up. Defaults to `All`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name of the site the port profile is associated with.
	Site pulumi.StringPtrInput `pulumi:"site"`
}

func (LookupProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProfileArgs)(nil)).Elem()
}

// A collection of values returned by getProfile.
type LookupProfileResultOutput struct{ *pulumi.OutputState }

func (LookupProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProfileResult)(nil)).Elem()
}

func (o LookupProfileResultOutput) ToLookupProfileResultOutput() LookupProfileResultOutput {
	return o
}

func (o LookupProfileResultOutput) ToLookupProfileResultOutputWithContext(ctx context.Context) LookupProfileResultOutput {
	return o
}

// The ID of this port profile.
func (o LookupProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the port profile to look up. Defaults to `All`.
func (o LookupProfileResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupProfileResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name of the site the port profile is associated with.
func (o LookupProfileResultOutput) Site() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProfileResult) string { return v.Site }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProfileResultOutput{})
}
