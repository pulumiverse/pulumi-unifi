// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package unifi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/internal"
)

// The provider type for the unifi package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the
	// path (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more
	// standard controller paths.
	ApiUrl pulumi.StringPtrOutput `pulumi:"apiUrl"`
	// Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.
	// Default: `default`
	Site pulumi.StringPtrOutput `pulumi:"site"`
	// Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.AllowInsecure == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "UNIFI_INSECURE"); d != nil {
			args.AllowInsecure = pulumi.BoolPtr(d.(bool))
		}
	}
	if args.ApiUrl == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "UNIFI_API"); d != nil {
			args.ApiUrl = pulumi.StringPtr(d.(string))
		}
	}
	if args.Password == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "UNIFI_PASSWORD"); d != nil {
			args.Password = pulumi.StringPtr(d.(string))
		}
	}
	if args.Site == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "UNIFI_SITE"); d != nil {
			args.Site = pulumi.StringPtr(d.(string))
		}
	}
	if args.Username == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "UNIFI_USERNAME"); d != nil {
			args.Username = pulumi.StringPtr(d.(string))
		}
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:unifi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// Skip verification of TLS certificates of API requests. You may need to set this to `true` if you are using your local
	// API without setting up a signed certificate. Can be specified with the `UNIFI_INSECURE` environment variable.
	AllowInsecure *bool `pulumi:"allowInsecure"`
	// URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the
	// path (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more
	// standard controller paths.
	ApiUrl *string `pulumi:"apiUrl"`
	// Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.
	Password *string `pulumi:"password"`
	// The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.
	// Default: `default`
	Site *string `pulumi:"site"`
	// Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// Skip verification of TLS certificates of API requests. You may need to set this to `true` if you are using your local
	// API without setting up a signed certificate. Can be specified with the `UNIFI_INSECURE` environment variable.
	AllowInsecure pulumi.BoolPtrInput
	// URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the
	// path (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more
	// standard controller paths.
	ApiUrl pulumi.StringPtrInput
	// Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.
	Password pulumi.StringPtrInput
	// The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.
	// Default: `default`
	Site pulumi.StringPtrInput
	// Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.
	Username pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
func (r *Provider) TerraformConfig(ctx *pulumi.Context) (ProviderTerraformConfigResultOutput, error) {
	out, err := ctx.Call("pulumi:providers:unifi/terraformConfig", nil, ProviderTerraformConfigResultOutput{}, r)
	if err != nil {
		return ProviderTerraformConfigResultOutput{}, err
	}
	return out.(ProviderTerraformConfigResultOutput), nil
}

type ProviderTerraformConfigResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

type ProviderTerraformConfigResultOutput struct{ *pulumi.OutputState }

func (ProviderTerraformConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTerraformConfigResult)(nil)).Elem()
}

func (o ProviderTerraformConfigResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v ProviderTerraformConfigResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// URL of the controller API. Can be specified with the `UNIFI_API` environment variable. You should **NOT** supply the
// path (`/api`), the SDK will discover the appropriate paths. This is to support UDM Pro style API paths as well as more
// standard controller paths.
func (o ProviderOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiUrl }).(pulumi.StringPtrOutput)
}

// Password for the user accessing the API. Can be specified with the `UNIFI_PASSWORD` environment variable.
func (o ProviderOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The site in the Unifi controller this provider will manage. Can be specified with the `UNIFI_SITE` environment variable.
// Default: `default`
func (o ProviderOutput) Site() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Site }).(pulumi.StringPtrOutput)
}

// Local user name for the Unifi controller API. Can be specified with the `UNIFI_USERNAME` environment variable.
func (o ProviderOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderTerraformConfigResultOutput{})
}
