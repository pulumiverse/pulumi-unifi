// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package unifi

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/internal"
)

// `StaticRoute` manages a static route.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := unifi.NewStaticRoute(ctx, "nexthop", &unifi.StaticRouteArgs{
//				Type:     pulumi.String("nexthop-route"),
//				Network:  pulumi.String("172.17.0.0/16"),
//				Name:     pulumi.String("basic nexthop"),
//				Distance: pulumi.Int(1),
//				NextHop:  pulumi.String("172.16.0.1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = unifi.NewStaticRoute(ctx, "blackhole", &unifi.StaticRouteArgs{
//				Type:     pulumi.String("blackhole"),
//				Network:  pulumi.Any(blackholeCidr),
//				Name:     pulumi.String("blackhole traffice to cidr"),
//				Distance: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = unifi.NewStaticRoute(ctx, "interface", &unifi.StaticRouteArgs{
//				Type:      pulumi.String("interface-route"),
//				Network:   pulumi.Any(wan2Cidr),
//				Name:      pulumi.String("send traffic over wan2"),
//				Distance:  pulumi.Int(1),
//				Interface: pulumi.String("WAN2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StaticRoute struct {
	pulumi.CustomResourceState

	// The distance of the static route.
	Distance pulumi.IntOutput `pulumi:"distance"`
	// The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.
	Interface pulumi.StringPtrOutput `pulumi:"interface"`
	// The name of the static route.
	Name pulumi.StringOutput `pulumi:"name"`
	// The network subnet address.
	Network pulumi.StringOutput `pulumi:"network"`
	// The next hop of the static route (only valid for `nexthop-route` type).
	NextHop pulumi.StringPtrOutput `pulumi:"nextHop"`
	// The name of the site to associate the static route with.
	Site pulumi.StringOutput `pulumi:"site"`
	// The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewStaticRoute registers a new resource with the given unique name, arguments, and options.
func NewStaticRoute(ctx *pulumi.Context,
	name string, args *StaticRouteArgs, opts ...pulumi.ResourceOption) (*StaticRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Distance == nil {
		return nil, errors.New("invalid value for required argument 'Distance'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StaticRoute
	err := ctx.RegisterResource("unifi:index/staticRoute:StaticRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticRoute gets an existing StaticRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticRouteState, opts ...pulumi.ResourceOption) (*StaticRoute, error) {
	var resource StaticRoute
	err := ctx.ReadResource("unifi:index/staticRoute:StaticRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticRoute resources.
type staticRouteState struct {
	// The distance of the static route.
	Distance *int `pulumi:"distance"`
	// The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.
	Interface *string `pulumi:"interface"`
	// The name of the static route.
	Name *string `pulumi:"name"`
	// The network subnet address.
	Network *string `pulumi:"network"`
	// The next hop of the static route (only valid for `nexthop-route` type).
	NextHop *string `pulumi:"nextHop"`
	// The name of the site to associate the static route with.
	Site *string `pulumi:"site"`
	// The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.
	Type *string `pulumi:"type"`
}

type StaticRouteState struct {
	// The distance of the static route.
	Distance pulumi.IntPtrInput
	// The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.
	Interface pulumi.StringPtrInput
	// The name of the static route.
	Name pulumi.StringPtrInput
	// The network subnet address.
	Network pulumi.StringPtrInput
	// The next hop of the static route (only valid for `nexthop-route` type).
	NextHop pulumi.StringPtrInput
	// The name of the site to associate the static route with.
	Site pulumi.StringPtrInput
	// The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.
	Type pulumi.StringPtrInput
}

func (StaticRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*staticRouteState)(nil)).Elem()
}

type staticRouteArgs struct {
	// The distance of the static route.
	Distance int `pulumi:"distance"`
	// The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.
	Interface *string `pulumi:"interface"`
	// The name of the static route.
	Name *string `pulumi:"name"`
	// The network subnet address.
	Network string `pulumi:"network"`
	// The next hop of the static route (only valid for `nexthop-route` type).
	NextHop *string `pulumi:"nextHop"`
	// The name of the site to associate the static route with.
	Site *string `pulumi:"site"`
	// The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a StaticRoute resource.
type StaticRouteArgs struct {
	// The distance of the static route.
	Distance pulumi.IntInput
	// The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.
	Interface pulumi.StringPtrInput
	// The name of the static route.
	Name pulumi.StringPtrInput
	// The network subnet address.
	Network pulumi.StringInput
	// The next hop of the static route (only valid for `nexthop-route` type).
	NextHop pulumi.StringPtrInput
	// The name of the site to associate the static route with.
	Site pulumi.StringPtrInput
	// The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.
	Type pulumi.StringInput
}

func (StaticRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*staticRouteArgs)(nil)).Elem()
}

type StaticRouteInput interface {
	pulumi.Input

	ToStaticRouteOutput() StaticRouteOutput
	ToStaticRouteOutputWithContext(ctx context.Context) StaticRouteOutput
}

func (*StaticRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticRoute)(nil)).Elem()
}

func (i *StaticRoute) ToStaticRouteOutput() StaticRouteOutput {
	return i.ToStaticRouteOutputWithContext(context.Background())
}

func (i *StaticRoute) ToStaticRouteOutputWithContext(ctx context.Context) StaticRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteOutput)
}

// StaticRouteArrayInput is an input type that accepts StaticRouteArray and StaticRouteArrayOutput values.
// You can construct a concrete instance of `StaticRouteArrayInput` via:
//
//	StaticRouteArray{ StaticRouteArgs{...} }
type StaticRouteArrayInput interface {
	pulumi.Input

	ToStaticRouteArrayOutput() StaticRouteArrayOutput
	ToStaticRouteArrayOutputWithContext(context.Context) StaticRouteArrayOutput
}

type StaticRouteArray []StaticRouteInput

func (StaticRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticRoute)(nil)).Elem()
}

func (i StaticRouteArray) ToStaticRouteArrayOutput() StaticRouteArrayOutput {
	return i.ToStaticRouteArrayOutputWithContext(context.Background())
}

func (i StaticRouteArray) ToStaticRouteArrayOutputWithContext(ctx context.Context) StaticRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteArrayOutput)
}

// StaticRouteMapInput is an input type that accepts StaticRouteMap and StaticRouteMapOutput values.
// You can construct a concrete instance of `StaticRouteMapInput` via:
//
//	StaticRouteMap{ "key": StaticRouteArgs{...} }
type StaticRouteMapInput interface {
	pulumi.Input

	ToStaticRouteMapOutput() StaticRouteMapOutput
	ToStaticRouteMapOutputWithContext(context.Context) StaticRouteMapOutput
}

type StaticRouteMap map[string]StaticRouteInput

func (StaticRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticRoute)(nil)).Elem()
}

func (i StaticRouteMap) ToStaticRouteMapOutput() StaticRouteMapOutput {
	return i.ToStaticRouteMapOutputWithContext(context.Background())
}

func (i StaticRouteMap) ToStaticRouteMapOutputWithContext(ctx context.Context) StaticRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteMapOutput)
}

type StaticRouteOutput struct{ *pulumi.OutputState }

func (StaticRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticRoute)(nil)).Elem()
}

func (o StaticRouteOutput) ToStaticRouteOutput() StaticRouteOutput {
	return o
}

func (o StaticRouteOutput) ToStaticRouteOutputWithContext(ctx context.Context) StaticRouteOutput {
	return o
}

// The distance of the static route.
func (o StaticRouteOutput) Distance() pulumi.IntOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.IntOutput { return v.Distance }).(pulumi.IntOutput)
}

// The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.
func (o StaticRouteOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringPtrOutput { return v.Interface }).(pulumi.StringPtrOutput)
}

// The name of the static route.
func (o StaticRouteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network subnet address.
func (o StaticRouteOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The next hop of the static route (only valid for `nexthop-route` type).
func (o StaticRouteOutput) NextHop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringPtrOutput { return v.NextHop }).(pulumi.StringPtrOutput)
}

// The name of the site to associate the static route with.
func (o StaticRouteOutput) Site() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.Site }).(pulumi.StringOutput)
}

// The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.
func (o StaticRouteOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type StaticRouteArrayOutput struct{ *pulumi.OutputState }

func (StaticRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticRoute)(nil)).Elem()
}

func (o StaticRouteArrayOutput) ToStaticRouteArrayOutput() StaticRouteArrayOutput {
	return o
}

func (o StaticRouteArrayOutput) ToStaticRouteArrayOutputWithContext(ctx context.Context) StaticRouteArrayOutput {
	return o
}

func (o StaticRouteArrayOutput) Index(i pulumi.IntInput) StaticRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StaticRoute {
		return vs[0].([]*StaticRoute)[vs[1].(int)]
	}).(StaticRouteOutput)
}

type StaticRouteMapOutput struct{ *pulumi.OutputState }

func (StaticRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticRoute)(nil)).Elem()
}

func (o StaticRouteMapOutput) ToStaticRouteMapOutput() StaticRouteMapOutput {
	return o
}

func (o StaticRouteMapOutput) ToStaticRouteMapOutputWithContext(ctx context.Context) StaticRouteMapOutput {
	return o
}

func (o StaticRouteMapOutput) MapIndex(k pulumi.StringInput) StaticRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StaticRoute {
		return vs[0].(map[string]*StaticRoute)[vs[1].(string)]
	}).(StaticRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteInput)(nil)).Elem(), &StaticRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteArrayInput)(nil)).Elem(), StaticRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteMapInput)(nil)).Elem(), StaticRouteMap{})
	pulumi.RegisterOutputType(StaticRouteOutput{})
	pulumi.RegisterOutputType(StaticRouteArrayOutput{})
	pulumi.RegisterOutputType(StaticRouteMapOutput{})
}
