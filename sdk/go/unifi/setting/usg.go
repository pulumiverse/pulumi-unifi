// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package setting

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/internal"
)

// `setting.USG` manages settings for a Unifi Security Gateway.
type USG struct {
	pulumi.CustomResourceState

	// The DHCP relay servers.
	DhcpRelayServers pulumi.StringArrayOutput `pulumi:"dhcpRelayServers"`
	// Whether the guest firewall log is enabled.
	FirewallGuestDefaultLog pulumi.BoolOutput `pulumi:"firewallGuestDefaultLog"`
	// Whether the LAN firewall log is enabled.
	FirewallLanDefaultLog pulumi.BoolOutput `pulumi:"firewallLanDefaultLog"`
	// Whether the WAN firewall log is enabled.
	FirewallWanDefaultLog pulumi.BoolOutput `pulumi:"firewallWanDefaultLog"`
	// Whether multicast DNS is enabled.
	MulticastDnsEnabled pulumi.BoolOutput `pulumi:"multicastDnsEnabled"`
	// The name of the site to associate the settings with.
	Site pulumi.StringOutput `pulumi:"site"`
}

// NewUSG registers a new resource with the given unique name, arguments, and options.
func NewUSG(ctx *pulumi.Context,
	name string, args *USGArgs, opts ...pulumi.ResourceOption) (*USG, error) {
	if args == nil {
		args = &USGArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource USG
	err := ctx.RegisterResource("unifi:setting/uSG:USG", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUSG gets an existing USG resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUSG(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *USGState, opts ...pulumi.ResourceOption) (*USG, error) {
	var resource USG
	err := ctx.ReadResource("unifi:setting/uSG:USG", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering USG resources.
type usgState struct {
	// The DHCP relay servers.
	DhcpRelayServers []string `pulumi:"dhcpRelayServers"`
	// Whether the guest firewall log is enabled.
	FirewallGuestDefaultLog *bool `pulumi:"firewallGuestDefaultLog"`
	// Whether the LAN firewall log is enabled.
	FirewallLanDefaultLog *bool `pulumi:"firewallLanDefaultLog"`
	// Whether the WAN firewall log is enabled.
	FirewallWanDefaultLog *bool `pulumi:"firewallWanDefaultLog"`
	// Whether multicast DNS is enabled.
	MulticastDnsEnabled *bool `pulumi:"multicastDnsEnabled"`
	// The name of the site to associate the settings with.
	Site *string `pulumi:"site"`
}

type USGState struct {
	// The DHCP relay servers.
	DhcpRelayServers pulumi.StringArrayInput
	// Whether the guest firewall log is enabled.
	FirewallGuestDefaultLog pulumi.BoolPtrInput
	// Whether the LAN firewall log is enabled.
	FirewallLanDefaultLog pulumi.BoolPtrInput
	// Whether the WAN firewall log is enabled.
	FirewallWanDefaultLog pulumi.BoolPtrInput
	// Whether multicast DNS is enabled.
	MulticastDnsEnabled pulumi.BoolPtrInput
	// The name of the site to associate the settings with.
	Site pulumi.StringPtrInput
}

func (USGState) ElementType() reflect.Type {
	return reflect.TypeOf((*usgState)(nil)).Elem()
}

type usgArgs struct {
	// The DHCP relay servers.
	DhcpRelayServers []string `pulumi:"dhcpRelayServers"`
	// Whether the guest firewall log is enabled.
	FirewallGuestDefaultLog *bool `pulumi:"firewallGuestDefaultLog"`
	// Whether the LAN firewall log is enabled.
	FirewallLanDefaultLog *bool `pulumi:"firewallLanDefaultLog"`
	// Whether the WAN firewall log is enabled.
	FirewallWanDefaultLog *bool `pulumi:"firewallWanDefaultLog"`
	// Whether multicast DNS is enabled.
	MulticastDnsEnabled *bool `pulumi:"multicastDnsEnabled"`
	// The name of the site to associate the settings with.
	Site *string `pulumi:"site"`
}

// The set of arguments for constructing a USG resource.
type USGArgs struct {
	// The DHCP relay servers.
	DhcpRelayServers pulumi.StringArrayInput
	// Whether the guest firewall log is enabled.
	FirewallGuestDefaultLog pulumi.BoolPtrInput
	// Whether the LAN firewall log is enabled.
	FirewallLanDefaultLog pulumi.BoolPtrInput
	// Whether the WAN firewall log is enabled.
	FirewallWanDefaultLog pulumi.BoolPtrInput
	// Whether multicast DNS is enabled.
	MulticastDnsEnabled pulumi.BoolPtrInput
	// The name of the site to associate the settings with.
	Site pulumi.StringPtrInput
}

func (USGArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usgArgs)(nil)).Elem()
}

type USGInput interface {
	pulumi.Input

	ToUSGOutput() USGOutput
	ToUSGOutputWithContext(ctx context.Context) USGOutput
}

func (*USG) ElementType() reflect.Type {
	return reflect.TypeOf((**USG)(nil)).Elem()
}

func (i *USG) ToUSGOutput() USGOutput {
	return i.ToUSGOutputWithContext(context.Background())
}

func (i *USG) ToUSGOutputWithContext(ctx context.Context) USGOutput {
	return pulumi.ToOutputWithContext(ctx, i).(USGOutput)
}

// USGArrayInput is an input type that accepts USGArray and USGArrayOutput values.
// You can construct a concrete instance of `USGArrayInput` via:
//
//	USGArray{ USGArgs{...} }
type USGArrayInput interface {
	pulumi.Input

	ToUSGArrayOutput() USGArrayOutput
	ToUSGArrayOutputWithContext(context.Context) USGArrayOutput
}

type USGArray []USGInput

func (USGArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*USG)(nil)).Elem()
}

func (i USGArray) ToUSGArrayOutput() USGArrayOutput {
	return i.ToUSGArrayOutputWithContext(context.Background())
}

func (i USGArray) ToUSGArrayOutputWithContext(ctx context.Context) USGArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(USGArrayOutput)
}

// USGMapInput is an input type that accepts USGMap and USGMapOutput values.
// You can construct a concrete instance of `USGMapInput` via:
//
//	USGMap{ "key": USGArgs{...} }
type USGMapInput interface {
	pulumi.Input

	ToUSGMapOutput() USGMapOutput
	ToUSGMapOutputWithContext(context.Context) USGMapOutput
}

type USGMap map[string]USGInput

func (USGMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*USG)(nil)).Elem()
}

func (i USGMap) ToUSGMapOutput() USGMapOutput {
	return i.ToUSGMapOutputWithContext(context.Background())
}

func (i USGMap) ToUSGMapOutputWithContext(ctx context.Context) USGMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(USGMapOutput)
}

type USGOutput struct{ *pulumi.OutputState }

func (USGOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**USG)(nil)).Elem()
}

func (o USGOutput) ToUSGOutput() USGOutput {
	return o
}

func (o USGOutput) ToUSGOutputWithContext(ctx context.Context) USGOutput {
	return o
}

// The DHCP relay servers.
func (o USGOutput) DhcpRelayServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *USG) pulumi.StringArrayOutput { return v.DhcpRelayServers }).(pulumi.StringArrayOutput)
}

// Whether the guest firewall log is enabled.
func (o USGOutput) FirewallGuestDefaultLog() pulumi.BoolOutput {
	return o.ApplyT(func(v *USG) pulumi.BoolOutput { return v.FirewallGuestDefaultLog }).(pulumi.BoolOutput)
}

// Whether the LAN firewall log is enabled.
func (o USGOutput) FirewallLanDefaultLog() pulumi.BoolOutput {
	return o.ApplyT(func(v *USG) pulumi.BoolOutput { return v.FirewallLanDefaultLog }).(pulumi.BoolOutput)
}

// Whether the WAN firewall log is enabled.
func (o USGOutput) FirewallWanDefaultLog() pulumi.BoolOutput {
	return o.ApplyT(func(v *USG) pulumi.BoolOutput { return v.FirewallWanDefaultLog }).(pulumi.BoolOutput)
}

// Whether multicast DNS is enabled.
func (o USGOutput) MulticastDnsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *USG) pulumi.BoolOutput { return v.MulticastDnsEnabled }).(pulumi.BoolOutput)
}

// The name of the site to associate the settings with.
func (o USGOutput) Site() pulumi.StringOutput {
	return o.ApplyT(func(v *USG) pulumi.StringOutput { return v.Site }).(pulumi.StringOutput)
}

type USGArrayOutput struct{ *pulumi.OutputState }

func (USGArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*USG)(nil)).Elem()
}

func (o USGArrayOutput) ToUSGArrayOutput() USGArrayOutput {
	return o
}

func (o USGArrayOutput) ToUSGArrayOutputWithContext(ctx context.Context) USGArrayOutput {
	return o
}

func (o USGArrayOutput) Index(i pulumi.IntInput) USGOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *USG {
		return vs[0].([]*USG)[vs[1].(int)]
	}).(USGOutput)
}

type USGMapOutput struct{ *pulumi.OutputState }

func (USGMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*USG)(nil)).Elem()
}

func (o USGMapOutput) ToUSGMapOutput() USGMapOutput {
	return o
}

func (o USGMapOutput) ToUSGMapOutputWithContext(ctx context.Context) USGMapOutput {
	return o
}

func (o USGMapOutput) MapIndex(k pulumi.StringInput) USGOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *USG {
		return vs[0].(map[string]*USG)[vs[1].(string)]
	}).(USGOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*USGInput)(nil)).Elem(), &USG{})
	pulumi.RegisterInputType(reflect.TypeOf((*USGArrayInput)(nil)).Elem(), USGArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*USGMapInput)(nil)).Elem(), USGMap{})
	pulumi.RegisterOutputType(USGOutput{})
	pulumi.RegisterOutputType(USGArrayOutput{})
	pulumi.RegisterOutputType(USGMapOutput{})
}
