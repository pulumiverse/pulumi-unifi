// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package unifi

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi/internal"
)

// `Network` manages WAN/LAN/VLAN networks.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-unifi/sdk/go/unifi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vlanId := float64(10)
//			if param := cfg.GetFloat64("vlanId"); param != 0 {
//				vlanId = param
//			}
//			_, err := unifi.NewNetwork(ctx, "vlan", &unifi.NetworkArgs{
//				Name:        pulumi.String("wifi-vlan"),
//				Purpose:     pulumi.String("corporate"),
//				Subnet:      pulumi.String("10.0.0.1/24"),
//				VlanId:      pulumi.Float64(vlanId),
//				DhcpStart:   pulumi.String("10.0.0.6"),
//				DhcpStop:    pulumi.String("10.0.0.254"),
//				DhcpEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = unifi.NewNetwork(ctx, "wan", &unifi.NetworkArgs{
//				Name:            pulumi.String("wan"),
//				Purpose:         pulumi.String("wan"),
//				WanNetworkgroup: pulumi.String("WAN"),
//				WanType:         pulumi.String("pppoe"),
//				WanIp:           pulumi.String("192.168.1.1"),
//				WanEgressQos:    pulumi.Int(1),
//				WanUsername:     pulumi.String("username"),
//				XWanPassword:    pulumi.String("password"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import from provider configured site
//
// ```sh
// $ pulumi import unifi:index/network:Network mynetwork 5dc28e5e9106d105bdc87217
// ```
//
// import from another site
//
// ```sh
// $ pulumi import unifi:index/network:Network mynetwork bfa2l6i7:5dc28e5e9106d105bdc87217
// ```
//
// import network by name
//
// ```sh
// $ pulumi import unifi:index/network:Network mynetwork name=LAN
// ```
type Network struct {
	pulumi.CustomResourceState

	// Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
	DhcpDns pulumi.StringArrayOutput `pulumi:"dhcpDns"`
	// Specifies whether DHCP is enabled or not on this network.
	DhcpEnabled pulumi.BoolPtrOutput `pulumi:"dhcpEnabled"`
	// Specifies the lease time for DHCP addresses in seconds. Defaults to `86400`.
	DhcpLease pulumi.IntPtrOutput `pulumi:"dhcpLease"`
	// Specifies whether DHCP relay is enabled or not on this network.
	DhcpRelayEnabled pulumi.BoolPtrOutput `pulumi:"dhcpRelayEnabled"`
	// The IPv4 address where the DHCP range of addresses starts.
	DhcpStart pulumi.StringPtrOutput `pulumi:"dhcpStart"`
	// The IPv4 address where the DHCP range of addresses stops.
	DhcpStop pulumi.StringPtrOutput `pulumi:"dhcpStop"`
	// Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcpV6DnsAuto` is set to `false`.
	DhcpV6Dns pulumi.StringArrayOutput `pulumi:"dhcpV6Dns"`
	// Specifies DNS source to propagate. If set `false` the entries in `dhcpV6Dns` are used, the upstream entries otherwise Defaults to `true`.
	DhcpV6DnsAuto pulumi.BoolPtrOutput `pulumi:"dhcpV6DnsAuto"`
	// Enable stateful DHCPv6 for static configuration.
	DhcpV6Enabled pulumi.BoolPtrOutput `pulumi:"dhcpV6Enabled"`
	// Specifies the lease time for DHCPv6 addresses in seconds. Defaults to `86400`.
	DhcpV6Lease pulumi.IntPtrOutput `pulumi:"dhcpV6Lease"`
	// Start address of the DHCPv6 range. Used in static DHCPv6 configuration.
	DhcpV6Start pulumi.StringPtrOutput `pulumi:"dhcpV6Start"`
	// End address of the DHCPv6 range. Used in static DHCPv6 configuration.
	DhcpV6Stop pulumi.StringPtrOutput `pulumi:"dhcpV6Stop"`
	// Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.
	DhcpdBootEnabled pulumi.BoolPtrOutput `pulumi:"dhcpdBootEnabled"`
	// Specifies the file to PXE boot from on the dhcpd*boot*server.
	DhcpdBootFilename pulumi.StringPtrOutput `pulumi:"dhcpdBootFilename"`
	// Specifies the IPv4 address of a TFTP server to network boot from.
	DhcpdBootServer pulumi.StringPtrOutput `pulumi:"dhcpdBootServer"`
	// The domain name of this network.
	DomainName pulumi.StringPtrOutput `pulumi:"domainName"`
	// Specifies whether IGMP snooping is enabled or not.
	IgmpSnooping pulumi.BoolPtrOutput `pulumi:"igmpSnooping"`
	// Specifies whether this network should be allowed to access the internet or not. Defaults to `true`.
	InternetAccessEnabled pulumi.BoolPtrOutput `pulumi:"internetAccessEnabled"`
	// Specifies whether this network should be allowed to access other local networks or not. Defaults to `true`.
	IntraNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"intraNetworkAccessEnabled"`
	// Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`. Defaults to `none`.
	Ipv6InterfaceType pulumi.StringPtrOutput `pulumi:"ipv6InterfaceType"`
	// Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.
	Ipv6PdInterface pulumi.StringPtrOutput `pulumi:"ipv6PdInterface"`
	// Specifies the IPv6 Prefix ID.
	Ipv6PdPrefixid pulumi.StringPtrOutput `pulumi:"ipv6PdPrefixid"`
	// Start address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
	Ipv6PdStart pulumi.StringPtrOutput `pulumi:"ipv6PdStart"`
	// End address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
	Ipv6PdStop pulumi.StringPtrOutput `pulumi:"ipv6PdStop"`
	// Specifies whether to enable router advertisements or not.
	Ipv6RaEnable pulumi.BoolPtrOutput `pulumi:"ipv6RaEnable"`
	// Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6RaValidLifetime` Defaults to `14400`.
	Ipv6RaPreferredLifetime pulumi.IntPtrOutput `pulumi:"ipv6RaPreferredLifetime"`
	// IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`
	Ipv6RaPriority pulumi.StringPtrOutput `pulumi:"ipv6RaPriority"`
	// Total lifetime in which the address can be used. Must be equal to or greater than `ipv6RaPreferredLifetime`. Defaults to `86400`.
	Ipv6RaValidLifetime pulumi.IntPtrOutput `pulumi:"ipv6RaValidLifetime"`
	// Specifies the static IPv6 subnet when `ipv6InterfaceType` is 'static'.
	Ipv6StaticSubnet pulumi.StringPtrOutput `pulumi:"ipv6StaticSubnet"`
	// Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller >=v7).
	MulticastDns pulumi.BoolPtrOutput `pulumi:"multicastDns"`
	// The name of the network.
	Name pulumi.StringOutput `pulumi:"name"`
	// The group of the network. Defaults to `LAN`.
	NetworkGroup pulumi.StringPtrOutput `pulumi:"networkGroup"`
	// The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.
	Purpose pulumi.StringOutput `pulumi:"purpose"`
	// The name of the site to associate the network with.
	Site pulumi.StringOutput `pulumi:"site"`
	// The subnet of the network. Must be a valid CIDR address.
	Subnet pulumi.StringPtrOutput `pulumi:"subnet"`
	// The VLAN ID of the network.
	VlanId pulumi.IntPtrOutput `pulumi:"vlanId"`
	// Specifies the IPv6 prefix size to request from ISP. Must be between 48 and 64.
	WanDhcpV6PdSize pulumi.IntPtrOutput `pulumi:"wanDhcpV6PdSize"`
	// DNS servers IPs of the WAN.
	WanDns pulumi.StringArrayOutput `pulumi:"wanDns"`
	// Specifies the WAN egress quality of service. Defaults to `0`.
	WanEgressQos pulumi.IntPtrOutput `pulumi:"wanEgressQos"`
	// The IPv4 gateway of the WAN.
	WanGateway pulumi.StringPtrOutput `pulumi:"wanGateway"`
	// The IPv6 gateway of the WAN.
	WanGatewayV6 pulumi.StringPtrOutput `pulumi:"wanGatewayV6"`
	// The IPv4 address of the WAN.
	WanIp pulumi.StringPtrOutput `pulumi:"wanIp"`
	// The IPv6 address of the WAN.
	WanIpv6 pulumi.StringPtrOutput `pulumi:"wanIpv6"`
	// The IPv4 netmask of the WAN.
	WanNetmask pulumi.StringPtrOutput `pulumi:"wanNetmask"`
	// Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
	WanNetworkgroup pulumi.StringPtrOutput `pulumi:"wanNetworkgroup"`
	// The IPv6 prefix length of the WAN. Must be between 1 and 128.
	WanPrefixlen pulumi.IntPtrOutput `pulumi:"wanPrefixlen"`
	// Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.
	WanType pulumi.StringPtrOutput `pulumi:"wanType"`
	// Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.
	WanTypeV6 pulumi.StringPtrOutput `pulumi:"wanTypeV6"`
	// Specifies the IPV4 WAN username.
	WanUsername pulumi.StringPtrOutput `pulumi:"wanUsername"`
	// Specifies the IPV4 WAN password.
	XWanPassword pulumi.StringPtrOutput `pulumi:"xWanPassword"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Purpose == nil {
		return nil, errors.New("invalid value for required argument 'Purpose'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Network
	err := ctx.RegisterResource("unifi:index/network:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("unifi:index/network:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
	// Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
	DhcpDns []string `pulumi:"dhcpDns"`
	// Specifies whether DHCP is enabled or not on this network.
	DhcpEnabled *bool `pulumi:"dhcpEnabled"`
	// Specifies the lease time for DHCP addresses in seconds. Defaults to `86400`.
	DhcpLease *int `pulumi:"dhcpLease"`
	// Specifies whether DHCP relay is enabled or not on this network.
	DhcpRelayEnabled *bool `pulumi:"dhcpRelayEnabled"`
	// The IPv4 address where the DHCP range of addresses starts.
	DhcpStart *string `pulumi:"dhcpStart"`
	// The IPv4 address where the DHCP range of addresses stops.
	DhcpStop *string `pulumi:"dhcpStop"`
	// Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcpV6DnsAuto` is set to `false`.
	DhcpV6Dns []string `pulumi:"dhcpV6Dns"`
	// Specifies DNS source to propagate. If set `false` the entries in `dhcpV6Dns` are used, the upstream entries otherwise Defaults to `true`.
	DhcpV6DnsAuto *bool `pulumi:"dhcpV6DnsAuto"`
	// Enable stateful DHCPv6 for static configuration.
	DhcpV6Enabled *bool `pulumi:"dhcpV6Enabled"`
	// Specifies the lease time for DHCPv6 addresses in seconds. Defaults to `86400`.
	DhcpV6Lease *int `pulumi:"dhcpV6Lease"`
	// Start address of the DHCPv6 range. Used in static DHCPv6 configuration.
	DhcpV6Start *string `pulumi:"dhcpV6Start"`
	// End address of the DHCPv6 range. Used in static DHCPv6 configuration.
	DhcpV6Stop *string `pulumi:"dhcpV6Stop"`
	// Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.
	DhcpdBootEnabled *bool `pulumi:"dhcpdBootEnabled"`
	// Specifies the file to PXE boot from on the dhcpd*boot*server.
	DhcpdBootFilename *string `pulumi:"dhcpdBootFilename"`
	// Specifies the IPv4 address of a TFTP server to network boot from.
	DhcpdBootServer *string `pulumi:"dhcpdBootServer"`
	// The domain name of this network.
	DomainName *string `pulumi:"domainName"`
	// Specifies whether IGMP snooping is enabled or not.
	IgmpSnooping *bool `pulumi:"igmpSnooping"`
	// Specifies whether this network should be allowed to access the internet or not. Defaults to `true`.
	InternetAccessEnabled *bool `pulumi:"internetAccessEnabled"`
	// Specifies whether this network should be allowed to access other local networks or not. Defaults to `true`.
	IntraNetworkAccessEnabled *bool `pulumi:"intraNetworkAccessEnabled"`
	// Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`. Defaults to `none`.
	Ipv6InterfaceType *string `pulumi:"ipv6InterfaceType"`
	// Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.
	Ipv6PdInterface *string `pulumi:"ipv6PdInterface"`
	// Specifies the IPv6 Prefix ID.
	Ipv6PdPrefixid *string `pulumi:"ipv6PdPrefixid"`
	// Start address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
	Ipv6PdStart *string `pulumi:"ipv6PdStart"`
	// End address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
	Ipv6PdStop *string `pulumi:"ipv6PdStop"`
	// Specifies whether to enable router advertisements or not.
	Ipv6RaEnable *bool `pulumi:"ipv6RaEnable"`
	// Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6RaValidLifetime` Defaults to `14400`.
	Ipv6RaPreferredLifetime *int `pulumi:"ipv6RaPreferredLifetime"`
	// IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`
	Ipv6RaPriority *string `pulumi:"ipv6RaPriority"`
	// Total lifetime in which the address can be used. Must be equal to or greater than `ipv6RaPreferredLifetime`. Defaults to `86400`.
	Ipv6RaValidLifetime *int `pulumi:"ipv6RaValidLifetime"`
	// Specifies the static IPv6 subnet when `ipv6InterfaceType` is 'static'.
	Ipv6StaticSubnet *string `pulumi:"ipv6StaticSubnet"`
	// Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller >=v7).
	MulticastDns *bool `pulumi:"multicastDns"`
	// The name of the network.
	Name *string `pulumi:"name"`
	// The group of the network. Defaults to `LAN`.
	NetworkGroup *string `pulumi:"networkGroup"`
	// The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.
	Purpose *string `pulumi:"purpose"`
	// The name of the site to associate the network with.
	Site *string `pulumi:"site"`
	// The subnet of the network. Must be a valid CIDR address.
	Subnet *string `pulumi:"subnet"`
	// The VLAN ID of the network.
	VlanId *int `pulumi:"vlanId"`
	// Specifies the IPv6 prefix size to request from ISP. Must be between 48 and 64.
	WanDhcpV6PdSize *int `pulumi:"wanDhcpV6PdSize"`
	// DNS servers IPs of the WAN.
	WanDns []string `pulumi:"wanDns"`
	// Specifies the WAN egress quality of service. Defaults to `0`.
	WanEgressQos *int `pulumi:"wanEgressQos"`
	// The IPv4 gateway of the WAN.
	WanGateway *string `pulumi:"wanGateway"`
	// The IPv6 gateway of the WAN.
	WanGatewayV6 *string `pulumi:"wanGatewayV6"`
	// The IPv4 address of the WAN.
	WanIp *string `pulumi:"wanIp"`
	// The IPv6 address of the WAN.
	WanIpv6 *string `pulumi:"wanIpv6"`
	// The IPv4 netmask of the WAN.
	WanNetmask *string `pulumi:"wanNetmask"`
	// Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
	WanNetworkgroup *string `pulumi:"wanNetworkgroup"`
	// The IPv6 prefix length of the WAN. Must be between 1 and 128.
	WanPrefixlen *int `pulumi:"wanPrefixlen"`
	// Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.
	WanType *string `pulumi:"wanType"`
	// Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.
	WanTypeV6 *string `pulumi:"wanTypeV6"`
	// Specifies the IPV4 WAN username.
	WanUsername *string `pulumi:"wanUsername"`
	// Specifies the IPV4 WAN password.
	XWanPassword *string `pulumi:"xWanPassword"`
}

type NetworkState struct {
	// Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
	DhcpDns pulumi.StringArrayInput
	// Specifies whether DHCP is enabled or not on this network.
	DhcpEnabled pulumi.BoolPtrInput
	// Specifies the lease time for DHCP addresses in seconds. Defaults to `86400`.
	DhcpLease pulumi.IntPtrInput
	// Specifies whether DHCP relay is enabled or not on this network.
	DhcpRelayEnabled pulumi.BoolPtrInput
	// The IPv4 address where the DHCP range of addresses starts.
	DhcpStart pulumi.StringPtrInput
	// The IPv4 address where the DHCP range of addresses stops.
	DhcpStop pulumi.StringPtrInput
	// Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcpV6DnsAuto` is set to `false`.
	DhcpV6Dns pulumi.StringArrayInput
	// Specifies DNS source to propagate. If set `false` the entries in `dhcpV6Dns` are used, the upstream entries otherwise Defaults to `true`.
	DhcpV6DnsAuto pulumi.BoolPtrInput
	// Enable stateful DHCPv6 for static configuration.
	DhcpV6Enabled pulumi.BoolPtrInput
	// Specifies the lease time for DHCPv6 addresses in seconds. Defaults to `86400`.
	DhcpV6Lease pulumi.IntPtrInput
	// Start address of the DHCPv6 range. Used in static DHCPv6 configuration.
	DhcpV6Start pulumi.StringPtrInput
	// End address of the DHCPv6 range. Used in static DHCPv6 configuration.
	DhcpV6Stop pulumi.StringPtrInput
	// Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.
	DhcpdBootEnabled pulumi.BoolPtrInput
	// Specifies the file to PXE boot from on the dhcpd*boot*server.
	DhcpdBootFilename pulumi.StringPtrInput
	// Specifies the IPv4 address of a TFTP server to network boot from.
	DhcpdBootServer pulumi.StringPtrInput
	// The domain name of this network.
	DomainName pulumi.StringPtrInput
	// Specifies whether IGMP snooping is enabled or not.
	IgmpSnooping pulumi.BoolPtrInput
	// Specifies whether this network should be allowed to access the internet or not. Defaults to `true`.
	InternetAccessEnabled pulumi.BoolPtrInput
	// Specifies whether this network should be allowed to access other local networks or not. Defaults to `true`.
	IntraNetworkAccessEnabled pulumi.BoolPtrInput
	// Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`. Defaults to `none`.
	Ipv6InterfaceType pulumi.StringPtrInput
	// Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.
	Ipv6PdInterface pulumi.StringPtrInput
	// Specifies the IPv6 Prefix ID.
	Ipv6PdPrefixid pulumi.StringPtrInput
	// Start address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
	Ipv6PdStart pulumi.StringPtrInput
	// End address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
	Ipv6PdStop pulumi.StringPtrInput
	// Specifies whether to enable router advertisements or not.
	Ipv6RaEnable pulumi.BoolPtrInput
	// Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6RaValidLifetime` Defaults to `14400`.
	Ipv6RaPreferredLifetime pulumi.IntPtrInput
	// IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`
	Ipv6RaPriority pulumi.StringPtrInput
	// Total lifetime in which the address can be used. Must be equal to or greater than `ipv6RaPreferredLifetime`. Defaults to `86400`.
	Ipv6RaValidLifetime pulumi.IntPtrInput
	// Specifies the static IPv6 subnet when `ipv6InterfaceType` is 'static'.
	Ipv6StaticSubnet pulumi.StringPtrInput
	// Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller >=v7).
	MulticastDns pulumi.BoolPtrInput
	// The name of the network.
	Name pulumi.StringPtrInput
	// The group of the network. Defaults to `LAN`.
	NetworkGroup pulumi.StringPtrInput
	// The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.
	Purpose pulumi.StringPtrInput
	// The name of the site to associate the network with.
	Site pulumi.StringPtrInput
	// The subnet of the network. Must be a valid CIDR address.
	Subnet pulumi.StringPtrInput
	// The VLAN ID of the network.
	VlanId pulumi.IntPtrInput
	// Specifies the IPv6 prefix size to request from ISP. Must be between 48 and 64.
	WanDhcpV6PdSize pulumi.IntPtrInput
	// DNS servers IPs of the WAN.
	WanDns pulumi.StringArrayInput
	// Specifies the WAN egress quality of service. Defaults to `0`.
	WanEgressQos pulumi.IntPtrInput
	// The IPv4 gateway of the WAN.
	WanGateway pulumi.StringPtrInput
	// The IPv6 gateway of the WAN.
	WanGatewayV6 pulumi.StringPtrInput
	// The IPv4 address of the WAN.
	WanIp pulumi.StringPtrInput
	// The IPv6 address of the WAN.
	WanIpv6 pulumi.StringPtrInput
	// The IPv4 netmask of the WAN.
	WanNetmask pulumi.StringPtrInput
	// Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
	WanNetworkgroup pulumi.StringPtrInput
	// The IPv6 prefix length of the WAN. Must be between 1 and 128.
	WanPrefixlen pulumi.IntPtrInput
	// Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.
	WanType pulumi.StringPtrInput
	// Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.
	WanTypeV6 pulumi.StringPtrInput
	// Specifies the IPV4 WAN username.
	WanUsername pulumi.StringPtrInput
	// Specifies the IPV4 WAN password.
	XWanPassword pulumi.StringPtrInput
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	// Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
	DhcpDns []string `pulumi:"dhcpDns"`
	// Specifies whether DHCP is enabled or not on this network.
	DhcpEnabled *bool `pulumi:"dhcpEnabled"`
	// Specifies the lease time for DHCP addresses in seconds. Defaults to `86400`.
	DhcpLease *int `pulumi:"dhcpLease"`
	// Specifies whether DHCP relay is enabled or not on this network.
	DhcpRelayEnabled *bool `pulumi:"dhcpRelayEnabled"`
	// The IPv4 address where the DHCP range of addresses starts.
	DhcpStart *string `pulumi:"dhcpStart"`
	// The IPv4 address where the DHCP range of addresses stops.
	DhcpStop *string `pulumi:"dhcpStop"`
	// Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcpV6DnsAuto` is set to `false`.
	DhcpV6Dns []string `pulumi:"dhcpV6Dns"`
	// Specifies DNS source to propagate. If set `false` the entries in `dhcpV6Dns` are used, the upstream entries otherwise Defaults to `true`.
	DhcpV6DnsAuto *bool `pulumi:"dhcpV6DnsAuto"`
	// Enable stateful DHCPv6 for static configuration.
	DhcpV6Enabled *bool `pulumi:"dhcpV6Enabled"`
	// Specifies the lease time for DHCPv6 addresses in seconds. Defaults to `86400`.
	DhcpV6Lease *int `pulumi:"dhcpV6Lease"`
	// Start address of the DHCPv6 range. Used in static DHCPv6 configuration.
	DhcpV6Start *string `pulumi:"dhcpV6Start"`
	// End address of the DHCPv6 range. Used in static DHCPv6 configuration.
	DhcpV6Stop *string `pulumi:"dhcpV6Stop"`
	// Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.
	DhcpdBootEnabled *bool `pulumi:"dhcpdBootEnabled"`
	// Specifies the file to PXE boot from on the dhcpd*boot*server.
	DhcpdBootFilename *string `pulumi:"dhcpdBootFilename"`
	// Specifies the IPv4 address of a TFTP server to network boot from.
	DhcpdBootServer *string `pulumi:"dhcpdBootServer"`
	// The domain name of this network.
	DomainName *string `pulumi:"domainName"`
	// Specifies whether IGMP snooping is enabled or not.
	IgmpSnooping *bool `pulumi:"igmpSnooping"`
	// Specifies whether this network should be allowed to access the internet or not. Defaults to `true`.
	InternetAccessEnabled *bool `pulumi:"internetAccessEnabled"`
	// Specifies whether this network should be allowed to access other local networks or not. Defaults to `true`.
	IntraNetworkAccessEnabled *bool `pulumi:"intraNetworkAccessEnabled"`
	// Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`. Defaults to `none`.
	Ipv6InterfaceType *string `pulumi:"ipv6InterfaceType"`
	// Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.
	Ipv6PdInterface *string `pulumi:"ipv6PdInterface"`
	// Specifies the IPv6 Prefix ID.
	Ipv6PdPrefixid *string `pulumi:"ipv6PdPrefixid"`
	// Start address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
	Ipv6PdStart *string `pulumi:"ipv6PdStart"`
	// End address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
	Ipv6PdStop *string `pulumi:"ipv6PdStop"`
	// Specifies whether to enable router advertisements or not.
	Ipv6RaEnable *bool `pulumi:"ipv6RaEnable"`
	// Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6RaValidLifetime` Defaults to `14400`.
	Ipv6RaPreferredLifetime *int `pulumi:"ipv6RaPreferredLifetime"`
	// IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`
	Ipv6RaPriority *string `pulumi:"ipv6RaPriority"`
	// Total lifetime in which the address can be used. Must be equal to or greater than `ipv6RaPreferredLifetime`. Defaults to `86400`.
	Ipv6RaValidLifetime *int `pulumi:"ipv6RaValidLifetime"`
	// Specifies the static IPv6 subnet when `ipv6InterfaceType` is 'static'.
	Ipv6StaticSubnet *string `pulumi:"ipv6StaticSubnet"`
	// Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller >=v7).
	MulticastDns *bool `pulumi:"multicastDns"`
	// The name of the network.
	Name *string `pulumi:"name"`
	// The group of the network. Defaults to `LAN`.
	NetworkGroup *string `pulumi:"networkGroup"`
	// The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.
	Purpose string `pulumi:"purpose"`
	// The name of the site to associate the network with.
	Site *string `pulumi:"site"`
	// The subnet of the network. Must be a valid CIDR address.
	Subnet *string `pulumi:"subnet"`
	// The VLAN ID of the network.
	VlanId *int `pulumi:"vlanId"`
	// Specifies the IPv6 prefix size to request from ISP. Must be between 48 and 64.
	WanDhcpV6PdSize *int `pulumi:"wanDhcpV6PdSize"`
	// DNS servers IPs of the WAN.
	WanDns []string `pulumi:"wanDns"`
	// Specifies the WAN egress quality of service. Defaults to `0`.
	WanEgressQos *int `pulumi:"wanEgressQos"`
	// The IPv4 gateway of the WAN.
	WanGateway *string `pulumi:"wanGateway"`
	// The IPv6 gateway of the WAN.
	WanGatewayV6 *string `pulumi:"wanGatewayV6"`
	// The IPv4 address of the WAN.
	WanIp *string `pulumi:"wanIp"`
	// The IPv6 address of the WAN.
	WanIpv6 *string `pulumi:"wanIpv6"`
	// The IPv4 netmask of the WAN.
	WanNetmask *string `pulumi:"wanNetmask"`
	// Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
	WanNetworkgroup *string `pulumi:"wanNetworkgroup"`
	// The IPv6 prefix length of the WAN. Must be between 1 and 128.
	WanPrefixlen *int `pulumi:"wanPrefixlen"`
	// Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.
	WanType *string `pulumi:"wanType"`
	// Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.
	WanTypeV6 *string `pulumi:"wanTypeV6"`
	// Specifies the IPV4 WAN username.
	WanUsername *string `pulumi:"wanUsername"`
	// Specifies the IPV4 WAN password.
	XWanPassword *string `pulumi:"xWanPassword"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
	DhcpDns pulumi.StringArrayInput
	// Specifies whether DHCP is enabled or not on this network.
	DhcpEnabled pulumi.BoolPtrInput
	// Specifies the lease time for DHCP addresses in seconds. Defaults to `86400`.
	DhcpLease pulumi.IntPtrInput
	// Specifies whether DHCP relay is enabled or not on this network.
	DhcpRelayEnabled pulumi.BoolPtrInput
	// The IPv4 address where the DHCP range of addresses starts.
	DhcpStart pulumi.StringPtrInput
	// The IPv4 address where the DHCP range of addresses stops.
	DhcpStop pulumi.StringPtrInput
	// Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcpV6DnsAuto` is set to `false`.
	DhcpV6Dns pulumi.StringArrayInput
	// Specifies DNS source to propagate. If set `false` the entries in `dhcpV6Dns` are used, the upstream entries otherwise Defaults to `true`.
	DhcpV6DnsAuto pulumi.BoolPtrInput
	// Enable stateful DHCPv6 for static configuration.
	DhcpV6Enabled pulumi.BoolPtrInput
	// Specifies the lease time for DHCPv6 addresses in seconds. Defaults to `86400`.
	DhcpV6Lease pulumi.IntPtrInput
	// Start address of the DHCPv6 range. Used in static DHCPv6 configuration.
	DhcpV6Start pulumi.StringPtrInput
	// End address of the DHCPv6 range. Used in static DHCPv6 configuration.
	DhcpV6Stop pulumi.StringPtrInput
	// Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.
	DhcpdBootEnabled pulumi.BoolPtrInput
	// Specifies the file to PXE boot from on the dhcpd*boot*server.
	DhcpdBootFilename pulumi.StringPtrInput
	// Specifies the IPv4 address of a TFTP server to network boot from.
	DhcpdBootServer pulumi.StringPtrInput
	// The domain name of this network.
	DomainName pulumi.StringPtrInput
	// Specifies whether IGMP snooping is enabled or not.
	IgmpSnooping pulumi.BoolPtrInput
	// Specifies whether this network should be allowed to access the internet or not. Defaults to `true`.
	InternetAccessEnabled pulumi.BoolPtrInput
	// Specifies whether this network should be allowed to access other local networks or not. Defaults to `true`.
	IntraNetworkAccessEnabled pulumi.BoolPtrInput
	// Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`. Defaults to `none`.
	Ipv6InterfaceType pulumi.StringPtrInput
	// Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.
	Ipv6PdInterface pulumi.StringPtrInput
	// Specifies the IPv6 Prefix ID.
	Ipv6PdPrefixid pulumi.StringPtrInput
	// Start address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
	Ipv6PdStart pulumi.StringPtrInput
	// End address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
	Ipv6PdStop pulumi.StringPtrInput
	// Specifies whether to enable router advertisements or not.
	Ipv6RaEnable pulumi.BoolPtrInput
	// Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6RaValidLifetime` Defaults to `14400`.
	Ipv6RaPreferredLifetime pulumi.IntPtrInput
	// IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`
	Ipv6RaPriority pulumi.StringPtrInput
	// Total lifetime in which the address can be used. Must be equal to or greater than `ipv6RaPreferredLifetime`. Defaults to `86400`.
	Ipv6RaValidLifetime pulumi.IntPtrInput
	// Specifies the static IPv6 subnet when `ipv6InterfaceType` is 'static'.
	Ipv6StaticSubnet pulumi.StringPtrInput
	// Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller >=v7).
	MulticastDns pulumi.BoolPtrInput
	// The name of the network.
	Name pulumi.StringPtrInput
	// The group of the network. Defaults to `LAN`.
	NetworkGroup pulumi.StringPtrInput
	// The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.
	Purpose pulumi.StringInput
	// The name of the site to associate the network with.
	Site pulumi.StringPtrInput
	// The subnet of the network. Must be a valid CIDR address.
	Subnet pulumi.StringPtrInput
	// The VLAN ID of the network.
	VlanId pulumi.IntPtrInput
	// Specifies the IPv6 prefix size to request from ISP. Must be between 48 and 64.
	WanDhcpV6PdSize pulumi.IntPtrInput
	// DNS servers IPs of the WAN.
	WanDns pulumi.StringArrayInput
	// Specifies the WAN egress quality of service. Defaults to `0`.
	WanEgressQos pulumi.IntPtrInput
	// The IPv4 gateway of the WAN.
	WanGateway pulumi.StringPtrInput
	// The IPv6 gateway of the WAN.
	WanGatewayV6 pulumi.StringPtrInput
	// The IPv4 address of the WAN.
	WanIp pulumi.StringPtrInput
	// The IPv6 address of the WAN.
	WanIpv6 pulumi.StringPtrInput
	// The IPv4 netmask of the WAN.
	WanNetmask pulumi.StringPtrInput
	// Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
	WanNetworkgroup pulumi.StringPtrInput
	// The IPv6 prefix length of the WAN. Must be between 1 and 128.
	WanPrefixlen pulumi.IntPtrInput
	// Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.
	WanType pulumi.StringPtrInput
	// Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.
	WanTypeV6 pulumi.StringPtrInput
	// Specifies the IPV4 WAN username.
	WanUsername pulumi.StringPtrInput
	// Specifies the IPV4 WAN password.
	XWanPassword pulumi.StringPtrInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}

type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(ctx context.Context) NetworkOutput
}

func (*Network) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *Network) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i *Network) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

// NetworkArrayInput is an input type that accepts NetworkArray and NetworkArrayOutput values.
// You can construct a concrete instance of `NetworkArrayInput` via:
//
//	NetworkArray{ NetworkArgs{...} }
type NetworkArrayInput interface {
	pulumi.Input

	ToNetworkArrayOutput() NetworkArrayOutput
	ToNetworkArrayOutputWithContext(context.Context) NetworkArrayOutput
}

type NetworkArray []NetworkInput

func (NetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (i NetworkArray) ToNetworkArrayOutput() NetworkArrayOutput {
	return i.ToNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkArray) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkArrayOutput)
}

// NetworkMapInput is an input type that accepts NetworkMap and NetworkMapOutput values.
// You can construct a concrete instance of `NetworkMapInput` via:
//
//	NetworkMap{ "key": NetworkArgs{...} }
type NetworkMapInput interface {
	pulumi.Input

	ToNetworkMapOutput() NetworkMapOutput
	ToNetworkMapOutputWithContext(context.Context) NetworkMapOutput
}

type NetworkMap map[string]NetworkInput

func (NetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (i NetworkMap) ToNetworkMapOutput() NetworkMapOutput {
	return i.ToNetworkMapOutputWithContext(context.Background())
}

func (i NetworkMap) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMapOutput)
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

// Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
func (o NetworkOutput) DhcpDns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Network) pulumi.StringArrayOutput { return v.DhcpDns }).(pulumi.StringArrayOutput)
}

// Specifies whether DHCP is enabled or not on this network.
func (o NetworkOutput) DhcpEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.DhcpEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the lease time for DHCP addresses in seconds. Defaults to `86400`.
func (o NetworkOutput) DhcpLease() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.IntPtrOutput { return v.DhcpLease }).(pulumi.IntPtrOutput)
}

// Specifies whether DHCP relay is enabled or not on this network.
func (o NetworkOutput) DhcpRelayEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.DhcpRelayEnabled }).(pulumi.BoolPtrOutput)
}

// The IPv4 address where the DHCP range of addresses starts.
func (o NetworkOutput) DhcpStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.DhcpStart }).(pulumi.StringPtrOutput)
}

// The IPv4 address where the DHCP range of addresses stops.
func (o NetworkOutput) DhcpStop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.DhcpStop }).(pulumi.StringPtrOutput)
}

// Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcpV6DnsAuto` is set to `false`.
func (o NetworkOutput) DhcpV6Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Network) pulumi.StringArrayOutput { return v.DhcpV6Dns }).(pulumi.StringArrayOutput)
}

// Specifies DNS source to propagate. If set `false` the entries in `dhcpV6Dns` are used, the upstream entries otherwise Defaults to `true`.
func (o NetworkOutput) DhcpV6DnsAuto() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.DhcpV6DnsAuto }).(pulumi.BoolPtrOutput)
}

// Enable stateful DHCPv6 for static configuration.
func (o NetworkOutput) DhcpV6Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.DhcpV6Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the lease time for DHCPv6 addresses in seconds. Defaults to `86400`.
func (o NetworkOutput) DhcpV6Lease() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.IntPtrOutput { return v.DhcpV6Lease }).(pulumi.IntPtrOutput)
}

// Start address of the DHCPv6 range. Used in static DHCPv6 configuration.
func (o NetworkOutput) DhcpV6Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.DhcpV6Start }).(pulumi.StringPtrOutput)
}

// End address of the DHCPv6 range. Used in static DHCPv6 configuration.
func (o NetworkOutput) DhcpV6Stop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.DhcpV6Stop }).(pulumi.StringPtrOutput)
}

// Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.
func (o NetworkOutput) DhcpdBootEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.DhcpdBootEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the file to PXE boot from on the dhcpd*boot*server.
func (o NetworkOutput) DhcpdBootFilename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.DhcpdBootFilename }).(pulumi.StringPtrOutput)
}

// Specifies the IPv4 address of a TFTP server to network boot from.
func (o NetworkOutput) DhcpdBootServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.DhcpdBootServer }).(pulumi.StringPtrOutput)
}

// The domain name of this network.
func (o NetworkOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.DomainName }).(pulumi.StringPtrOutput)
}

// Specifies whether IGMP snooping is enabled or not.
func (o NetworkOutput) IgmpSnooping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.IgmpSnooping }).(pulumi.BoolPtrOutput)
}

// Specifies whether this network should be allowed to access the internet or not. Defaults to `true`.
func (o NetworkOutput) InternetAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.InternetAccessEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies whether this network should be allowed to access other local networks or not. Defaults to `true`.
func (o NetworkOutput) IntraNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.IntraNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`. Defaults to `none`.
func (o NetworkOutput) Ipv6InterfaceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Ipv6InterfaceType }).(pulumi.StringPtrOutput)
}

// Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.
func (o NetworkOutput) Ipv6PdInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Ipv6PdInterface }).(pulumi.StringPtrOutput)
}

// Specifies the IPv6 Prefix ID.
func (o NetworkOutput) Ipv6PdPrefixid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Ipv6PdPrefixid }).(pulumi.StringPtrOutput)
}

// Start address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
func (o NetworkOutput) Ipv6PdStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Ipv6PdStart }).(pulumi.StringPtrOutput)
}

// End address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
func (o NetworkOutput) Ipv6PdStop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Ipv6PdStop }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable router advertisements or not.
func (o NetworkOutput) Ipv6RaEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.Ipv6RaEnable }).(pulumi.BoolPtrOutput)
}

// Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6RaValidLifetime` Defaults to `14400`.
func (o NetworkOutput) Ipv6RaPreferredLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.IntPtrOutput { return v.Ipv6RaPreferredLifetime }).(pulumi.IntPtrOutput)
}

// IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`
func (o NetworkOutput) Ipv6RaPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Ipv6RaPriority }).(pulumi.StringPtrOutput)
}

// Total lifetime in which the address can be used. Must be equal to or greater than `ipv6RaPreferredLifetime`. Defaults to `86400`.
func (o NetworkOutput) Ipv6RaValidLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.IntPtrOutput { return v.Ipv6RaValidLifetime }).(pulumi.IntPtrOutput)
}

// Specifies the static IPv6 subnet when `ipv6InterfaceType` is 'static'.
func (o NetworkOutput) Ipv6StaticSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Ipv6StaticSubnet }).(pulumi.StringPtrOutput)
}

// Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller >=v7).
func (o NetworkOutput) MulticastDns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.MulticastDns }).(pulumi.BoolPtrOutput)
}

// The name of the network.
func (o NetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The group of the network. Defaults to `LAN`.
func (o NetworkOutput) NetworkGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.NetworkGroup }).(pulumi.StringPtrOutput)
}

// The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.
func (o NetworkOutput) Purpose() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Purpose }).(pulumi.StringOutput)
}

// The name of the site to associate the network with.
func (o NetworkOutput) Site() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Site }).(pulumi.StringOutput)
}

// The subnet of the network. Must be a valid CIDR address.
func (o NetworkOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Subnet }).(pulumi.StringPtrOutput)
}

// The VLAN ID of the network.
func (o NetworkOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.IntPtrOutput { return v.VlanId }).(pulumi.IntPtrOutput)
}

// Specifies the IPv6 prefix size to request from ISP. Must be between 48 and 64.
func (o NetworkOutput) WanDhcpV6PdSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.IntPtrOutput { return v.WanDhcpV6PdSize }).(pulumi.IntPtrOutput)
}

// DNS servers IPs of the WAN.
func (o NetworkOutput) WanDns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Network) pulumi.StringArrayOutput { return v.WanDns }).(pulumi.StringArrayOutput)
}

// Specifies the WAN egress quality of service. Defaults to `0`.
func (o NetworkOutput) WanEgressQos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.IntPtrOutput { return v.WanEgressQos }).(pulumi.IntPtrOutput)
}

// The IPv4 gateway of the WAN.
func (o NetworkOutput) WanGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.WanGateway }).(pulumi.StringPtrOutput)
}

// The IPv6 gateway of the WAN.
func (o NetworkOutput) WanGatewayV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.WanGatewayV6 }).(pulumi.StringPtrOutput)
}

// The IPv4 address of the WAN.
func (o NetworkOutput) WanIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.WanIp }).(pulumi.StringPtrOutput)
}

// The IPv6 address of the WAN.
func (o NetworkOutput) WanIpv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.WanIpv6 }).(pulumi.StringPtrOutput)
}

// The IPv4 netmask of the WAN.
func (o NetworkOutput) WanNetmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.WanNetmask }).(pulumi.StringPtrOutput)
}

// Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
func (o NetworkOutput) WanNetworkgroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.WanNetworkgroup }).(pulumi.StringPtrOutput)
}

// The IPv6 prefix length of the WAN. Must be between 1 and 128.
func (o NetworkOutput) WanPrefixlen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.IntPtrOutput { return v.WanPrefixlen }).(pulumi.IntPtrOutput)
}

// Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.
func (o NetworkOutput) WanType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.WanType }).(pulumi.StringPtrOutput)
}

// Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.
func (o NetworkOutput) WanTypeV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.WanTypeV6 }).(pulumi.StringPtrOutput)
}

// Specifies the IPV4 WAN username.
func (o NetworkOutput) WanUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.WanUsername }).(pulumi.StringPtrOutput)
}

// Specifies the IPV4 WAN password.
func (o NetworkOutput) XWanPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.XWanPassword }).(pulumi.StringPtrOutput)
}

type NetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (o NetworkArrayOutput) ToNetworkArrayOutput() NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) Index(i pulumi.IntInput) NetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Network {
		return vs[0].([]*Network)[vs[1].(int)]
	}).(NetworkOutput)
}

type NetworkMapOutput struct{ *pulumi.OutputState }

func (NetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (o NetworkMapOutput) ToNetworkMapOutput() NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) MapIndex(k pulumi.StringInput) NetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Network {
		return vs[0].(map[string]*Network)[vs[1].(string)]
	}).(NetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), &Network{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkArrayInput)(nil)).Elem(), NetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMapInput)(nil)).Elem(), NetworkMap{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkArrayOutput{})
	pulumi.RegisterOutputType(NetworkMapOutput{})
}
