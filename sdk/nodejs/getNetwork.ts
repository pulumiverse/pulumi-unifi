// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `unifi.Network` data source can be used to retrieve settings for a network by name or ID.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as unifi from "@pulumi/unifi";
 *
 * //retrieve network data by unifi network name
 * const lanNetwork = unifi.getNetwork({
 *     name: "Default",
 * });
 * //retrieve network data from user record
 * const myDevice = unifi.iam.getUser({
 *     mac: "01:23:45:67:89:ab",
 * });
 * const myNetwork = myDevice.then(myDevice => unifi.getNetwork({
 *     id: myDevice.networkId,
 * }));
 * ```
 */
export function getNetwork(args?: GetNetworkArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("unifi:index/getNetwork:getNetwork", {
        "id": args.id,
        "name": args.name,
        "site": args.site,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetwork.
 */
export interface GetNetworkArgs {
    /**
     * The ID of the network.
     */
    id?: string;
    /**
     * The name of the network.
     */
    name?: string;
    /**
     * The name of the site to associate the network with.
     */
    site?: string;
}

/**
 * A collection of values returned by getNetwork.
 */
export interface GetNetworkResult {
    /**
     * IPv4 addresses for the DNS server to be returned from the DHCP server.
     */
    readonly dhcpDns: string[];
    /**
     * whether DHCP is enabled or not on this network.
     */
    readonly dhcpEnabled: boolean;
    /**
     * lease time for DHCP addresses.
     */
    readonly dhcpLease: number;
    /**
     * The IPv4 address where the DHCP range of addresses starts.
     */
    readonly dhcpStart: string;
    /**
     * The IPv4 address where the DHCP range of addresses stops.
     */
    readonly dhcpStop: string;
    /**
     * Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcpV6DnsAuto` is set to `false`.
     */
    readonly dhcpV6Dns: string[];
    /**
     * Specifies DNS source to propagate. If set `false` the entries in `dhcpV6Dns` are used, the upstream entries otherwise
     */
    readonly dhcpV6DnsAuto: boolean;
    /**
     * Enable stateful DHCPv6 for static configuration.
     */
    readonly dhcpV6Enabled: boolean;
    /**
     * Specifies the lease time for DHCPv6 addresses.
     */
    readonly dhcpV6Lease: number;
    /**
     * Start address of the DHCPv6 range. Used in static DHCPv6 configuration.
     */
    readonly dhcpV6Start: string;
    /**
     * End address of the DHCPv6 range. Used in static DHCPv6 configuration.
     */
    readonly dhcpV6Stop: string;
    /**
     * Toggles on the DHCP boot options. will be set to true if you have dhcpd*boot*filename, and dhcpd*boot*server set.
     */
    readonly dhcpdBootEnabled: boolean;
    /**
     * the file to PXE boot from on the dhcpd*boot*server.
     */
    readonly dhcpdBootFilename: string;
    /**
     * IPv4 address of a TFTP server to network boot from.
     */
    readonly dhcpdBootServer: string;
    /**
     * The domain name of this network.
     */
    readonly domainName: string;
    /**
     * The ID of the network.
     */
    readonly id: string;
    /**
     * Specifies whether IGMP snooping is enabled or not.
     */
    readonly igmpSnooping: boolean;
    /**
     * Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`.
     */
    readonly ipv6InterfaceType: string;
    /**
     * Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.
     */
    readonly ipv6PdInterface: string;
    /**
     * Specifies the IPv6 Prefix ID.
     */
    readonly ipv6PdPrefixid: string;
    /**
     * Start address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
     */
    readonly ipv6PdStart: string;
    /**
     * End address of the DHCPv6 range. Used if `ipv6InterfaceType` is set to `pd`.
     */
    readonly ipv6PdStop: string;
    /**
     * Specifies whether to enable router advertisements or not.
     */
    readonly ipv6RaEnable: boolean;
    /**
     * Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6RaValidLifetime`
     */
    readonly ipv6RaPreferredLifetime: number;
    /**
     * IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`
     */
    readonly ipv6RaPriority: string;
    /**
     * Total lifetime in which the address can be used. Must be equal to or greater than `ipv6RaPreferredLifetime`.
     */
    readonly ipv6RaValidLifetime: number;
    /**
     * Specifies the static IPv6 subnet (when ipv6*interface*type is 'static').
     */
    readonly ipv6StaticSubnet: string;
    /**
     * Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller >=v7).
     */
    readonly multicastDns: boolean;
    /**
     * The name of the network.
     */
    readonly name: string;
    /**
     * The group of the network.
     */
    readonly networkGroup: string;
    /**
     * The purpose of the network. One of `corporate`, `guest`, `wan`, or `vlan-only`.
     */
    readonly purpose: string;
    /**
     * The name of the site to associate the network with.
     */
    readonly site: string;
    /**
     * The subnet of the network (CIDR address).
     */
    readonly subnet: string;
    /**
     * The VLAN ID of the network.
     */
    readonly vlanId: number;
    /**
     * Specifies the IPv6 prefix size to request from ISP. Must be a number between 48 and 64.
     */
    readonly wanDhcpV6PdSize: number;
    /**
     * DNS servers IPs of the WAN.
     */
    readonly wanDns: string[];
    /**
     * Specifies the WAN egress quality of service.
     */
    readonly wanEgressQos: number;
    /**
     * The IPv4 gateway of the WAN.
     */
    readonly wanGateway: string;
    /**
     * The IPv6 gateway of the WAN.
     */
    readonly wanGatewayV6: string;
    /**
     * The IPv4 address of the WAN.
     */
    readonly wanIp: string;
    /**
     * The IPv6 address of the WAN.
     */
    readonly wanIpv6: string;
    /**
     * The IPv4 netmask of the WAN.
     */
    readonly wanNetmask: string;
    /**
     * Specifies the WAN network group. One of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
     */
    readonly wanNetworkgroup: string;
    /**
     * The IPv6 prefix length of the WAN. Must be between 1 and 128.
     */
    readonly wanPrefixlen: number;
    /**
     * Specifies the IPV4 WAN connection type. One of either `disabled`, `static`, `dhcp`, or `pppoe`.
     */
    readonly wanType: string;
    /**
     * Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.
     */
    readonly wanTypeV6: string;
    /**
     * Specifies the IPV4 WAN username.
     */
    readonly wanUsername: string;
    /**
     * Specifies the IPV4 WAN password.
     */
    readonly xWanPassword: string;
}
/**
 * `unifi.Network` data source can be used to retrieve settings for a network by name or ID.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as unifi from "@pulumi/unifi";
 *
 * //retrieve network data by unifi network name
 * const lanNetwork = unifi.getNetwork({
 *     name: "Default",
 * });
 * //retrieve network data from user record
 * const myDevice = unifi.iam.getUser({
 *     mac: "01:23:45:67:89:ab",
 * });
 * const myNetwork = myDevice.then(myDevice => unifi.getNetwork({
 *     id: myDevice.networkId,
 * }));
 * ```
 */
export function getNetworkOutput(args?: GetNetworkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("unifi:index/getNetwork:getNetwork", {
        "id": args.id,
        "name": args.name,
        "site": args.site,
    }, opts);
}

/**
 * A collection of arguments for invoking getNetwork.
 */
export interface GetNetworkOutputArgs {
    /**
     * The ID of the network.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the network.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the site to associate the network with.
     */
    site?: pulumi.Input<string>;
}
