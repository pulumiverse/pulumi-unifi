// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `unifi.Network` manages WAN/LAN/VLAN networks.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as unifi from "@pulumiverse/unifi";
 *
 * const config = new pulumi.Config();
 * const vlanId = config.getNumber("vlanId") || 10;
 * const vlan = new unifi.Network("vlan", {
 *     purpose: "corporate",
 *     subnet: "10.0.0.1/24",
 *     vlanId: vlanId,
 *     dhcpStart: "10.0.0.6",
 *     dhcpStop: "10.0.0.254",
 *     dhcpEnabled: true,
 * });
 * const wan = new unifi.Network("wan", {
 *     purpose: "wan",
 *     wanNetworkgroup: "WAN",
 *     wanType: "pppoe",
 *     wanIp: "192.168.1.1",
 *     wanEgressQos: 1,
 *     wanUsername: "username",
 *     xWanPassword: "password",
 * });
 * ```
 *
 * ## Import
 *
 * import from provider configured site
 *
 * ```sh
 *  $ pulumi import unifi:index/network:Network mynetwork 5dc28e5e9106d105bdc87217
 * ```
 *
 *  import from another site
 *
 * ```sh
 *  $ pulumi import unifi:index/network:Network mynetwork bfa2l6i7:5dc28e5e9106d105bdc87217
 * ```
 *
 *  import network by name
 *
 * ```sh
 *  $ pulumi import unifi:index/network:Network mynetwork name=LAN
 * ```
 */
export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'unifi:index/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
     */
    public readonly dhcpDns!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies whether DHCP is enabled or not on this network.
     */
    public readonly dhcpEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the lease time for DHCP addresses. Defaults to `86400`.
     */
    public readonly dhcpLease!: pulumi.Output<number | undefined>;
    /**
     * Specifies whether DHCP relay is enabled or not on this network.
     */
    public readonly dhcpRelayEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The IPv4 address where the DHCP range of addresses starts.
     */
    public readonly dhcpStart!: pulumi.Output<string | undefined>;
    /**
     * The IPv4 address where the DHCP range of addresses stops.
     */
    public readonly dhcpStop!: pulumi.Output<string | undefined>;
    /**
     * Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.
     */
    public readonly dhcpdBootEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the file to PXE boot from on the dhcpd*boot*server.
     */
    public readonly dhcpdBootFilename!: pulumi.Output<string | undefined>;
    /**
     * Specifies the IPv4 address of a TFTP server to network boot from.
     */
    public readonly dhcpdBootServer!: pulumi.Output<string | undefined>;
    /**
     * The domain name of this network.
     */
    public readonly domainName!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether IGMP snooping is enabled or not.
     */
    public readonly igmpSnooping!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies which type of IPv6 connection to use. Defaults to `none`.
     */
    public readonly ipv6InterfaceType!: pulumi.Output<string | undefined>;
    /**
     * Specifies which WAN interface to use for IPv6 PD.
     */
    public readonly ipv6PdInterface!: pulumi.Output<string | undefined>;
    /**
     * Specifies the IPv6 Prefix ID.
     */
    public readonly ipv6PdPrefixid!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enable router advertisements or not.
     */
    public readonly ipv6RaEnable!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the static IPv6 subnet when ipv6*interface*type is 'static'.
     */
    public readonly ipv6StaticSubnet!: pulumi.Output<string | undefined>;
    /**
     * The name of the network.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The group of the network. Defaults to `LAN`.
     */
    public readonly networkGroup!: pulumi.Output<string | undefined>;
    /**
     * The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.
     */
    public readonly purpose!: pulumi.Output<string>;
    /**
     * The name of the site to associate the network with.
     */
    public readonly site!: pulumi.Output<string>;
    /**
     * The subnet of the network. Must be a valid CIDR address.
     */
    public readonly subnet!: pulumi.Output<string | undefined>;
    /**
     * The VLAN ID of the network.
     */
    public readonly vlanId!: pulumi.Output<number | undefined>;
    /**
     * DNS servers IPs of the WAN.
     */
    public readonly wanDns!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the WAN egress quality of service. Defaults to `0`.
     */
    public readonly wanEgressQos!: pulumi.Output<number | undefined>;
    /**
     * The IPv4 gateway of the WAN.
     */
    public readonly wanGateway!: pulumi.Output<string | undefined>;
    /**
     * The IPv4 address of the WAN.
     */
    public readonly wanIp!: pulumi.Output<string | undefined>;
    /**
     * The IPv4 netmask of the WAN.
     */
    public readonly wanNetmask!: pulumi.Output<string | undefined>;
    /**
     * Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
     */
    public readonly wanNetworkgroup!: pulumi.Output<string | undefined>;
    /**
     * Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.
     */
    public readonly wanType!: pulumi.Output<string | undefined>;
    /**
     * Specifies the IPV4 WAN username.
     */
    public readonly wanUsername!: pulumi.Output<string | undefined>;
    /**
     * Specifies the IPV4 WAN password.
     */
    public readonly xWanPassword!: pulumi.Output<string | undefined>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["dhcpDns"] = state ? state.dhcpDns : undefined;
            resourceInputs["dhcpEnabled"] = state ? state.dhcpEnabled : undefined;
            resourceInputs["dhcpLease"] = state ? state.dhcpLease : undefined;
            resourceInputs["dhcpRelayEnabled"] = state ? state.dhcpRelayEnabled : undefined;
            resourceInputs["dhcpStart"] = state ? state.dhcpStart : undefined;
            resourceInputs["dhcpStop"] = state ? state.dhcpStop : undefined;
            resourceInputs["dhcpdBootEnabled"] = state ? state.dhcpdBootEnabled : undefined;
            resourceInputs["dhcpdBootFilename"] = state ? state.dhcpdBootFilename : undefined;
            resourceInputs["dhcpdBootServer"] = state ? state.dhcpdBootServer : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["igmpSnooping"] = state ? state.igmpSnooping : undefined;
            resourceInputs["ipv6InterfaceType"] = state ? state.ipv6InterfaceType : undefined;
            resourceInputs["ipv6PdInterface"] = state ? state.ipv6PdInterface : undefined;
            resourceInputs["ipv6PdPrefixid"] = state ? state.ipv6PdPrefixid : undefined;
            resourceInputs["ipv6RaEnable"] = state ? state.ipv6RaEnable : undefined;
            resourceInputs["ipv6StaticSubnet"] = state ? state.ipv6StaticSubnet : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkGroup"] = state ? state.networkGroup : undefined;
            resourceInputs["purpose"] = state ? state.purpose : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
            resourceInputs["wanDns"] = state ? state.wanDns : undefined;
            resourceInputs["wanEgressQos"] = state ? state.wanEgressQos : undefined;
            resourceInputs["wanGateway"] = state ? state.wanGateway : undefined;
            resourceInputs["wanIp"] = state ? state.wanIp : undefined;
            resourceInputs["wanNetmask"] = state ? state.wanNetmask : undefined;
            resourceInputs["wanNetworkgroup"] = state ? state.wanNetworkgroup : undefined;
            resourceInputs["wanType"] = state ? state.wanType : undefined;
            resourceInputs["wanUsername"] = state ? state.wanUsername : undefined;
            resourceInputs["xWanPassword"] = state ? state.xWanPassword : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            if ((!args || args.purpose === undefined) && !opts.urn) {
                throw new Error("Missing required property 'purpose'");
            }
            resourceInputs["dhcpDns"] = args ? args.dhcpDns : undefined;
            resourceInputs["dhcpEnabled"] = args ? args.dhcpEnabled : undefined;
            resourceInputs["dhcpLease"] = args ? args.dhcpLease : undefined;
            resourceInputs["dhcpRelayEnabled"] = args ? args.dhcpRelayEnabled : undefined;
            resourceInputs["dhcpStart"] = args ? args.dhcpStart : undefined;
            resourceInputs["dhcpStop"] = args ? args.dhcpStop : undefined;
            resourceInputs["dhcpdBootEnabled"] = args ? args.dhcpdBootEnabled : undefined;
            resourceInputs["dhcpdBootFilename"] = args ? args.dhcpdBootFilename : undefined;
            resourceInputs["dhcpdBootServer"] = args ? args.dhcpdBootServer : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["igmpSnooping"] = args ? args.igmpSnooping : undefined;
            resourceInputs["ipv6InterfaceType"] = args ? args.ipv6InterfaceType : undefined;
            resourceInputs["ipv6PdInterface"] = args ? args.ipv6PdInterface : undefined;
            resourceInputs["ipv6PdPrefixid"] = args ? args.ipv6PdPrefixid : undefined;
            resourceInputs["ipv6RaEnable"] = args ? args.ipv6RaEnable : undefined;
            resourceInputs["ipv6StaticSubnet"] = args ? args.ipv6StaticSubnet : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkGroup"] = args ? args.networkGroup : undefined;
            resourceInputs["purpose"] = args ? args.purpose : undefined;
            resourceInputs["site"] = args ? args.site : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["wanDns"] = args ? args.wanDns : undefined;
            resourceInputs["wanEgressQos"] = args ? args.wanEgressQos : undefined;
            resourceInputs["wanGateway"] = args ? args.wanGateway : undefined;
            resourceInputs["wanIp"] = args ? args.wanIp : undefined;
            resourceInputs["wanNetmask"] = args ? args.wanNetmask : undefined;
            resourceInputs["wanNetworkgroup"] = args ? args.wanNetworkgroup : undefined;
            resourceInputs["wanType"] = args ? args.wanType : undefined;
            resourceInputs["wanUsername"] = args ? args.wanUsername : undefined;
            resourceInputs["xWanPassword"] = args ? args.xWanPassword : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    /**
     * Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
     */
    dhcpDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether DHCP is enabled or not on this network.
     */
    dhcpEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the lease time for DHCP addresses. Defaults to `86400`.
     */
    dhcpLease?: pulumi.Input<number>;
    /**
     * Specifies whether DHCP relay is enabled or not on this network.
     */
    dhcpRelayEnabled?: pulumi.Input<boolean>;
    /**
     * The IPv4 address where the DHCP range of addresses starts.
     */
    dhcpStart?: pulumi.Input<string>;
    /**
     * The IPv4 address where the DHCP range of addresses stops.
     */
    dhcpStop?: pulumi.Input<string>;
    /**
     * Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.
     */
    dhcpdBootEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the file to PXE boot from on the dhcpd*boot*server.
     */
    dhcpdBootFilename?: pulumi.Input<string>;
    /**
     * Specifies the IPv4 address of a TFTP server to network boot from.
     */
    dhcpdBootServer?: pulumi.Input<string>;
    /**
     * The domain name of this network.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Specifies whether IGMP snooping is enabled or not.
     */
    igmpSnooping?: pulumi.Input<boolean>;
    /**
     * Specifies which type of IPv6 connection to use. Defaults to `none`.
     */
    ipv6InterfaceType?: pulumi.Input<string>;
    /**
     * Specifies which WAN interface to use for IPv6 PD.
     */
    ipv6PdInterface?: pulumi.Input<string>;
    /**
     * Specifies the IPv6 Prefix ID.
     */
    ipv6PdPrefixid?: pulumi.Input<string>;
    /**
     * Specifies whether to enable router advertisements or not.
     */
    ipv6RaEnable?: pulumi.Input<boolean>;
    /**
     * Specifies the static IPv6 subnet when ipv6*interface*type is 'static'.
     */
    ipv6StaticSubnet?: pulumi.Input<string>;
    /**
     * The name of the network.
     */
    name?: pulumi.Input<string>;
    /**
     * The group of the network. Defaults to `LAN`.
     */
    networkGroup?: pulumi.Input<string>;
    /**
     * The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.
     */
    purpose?: pulumi.Input<string>;
    /**
     * The name of the site to associate the network with.
     */
    site?: pulumi.Input<string>;
    /**
     * The subnet of the network. Must be a valid CIDR address.
     */
    subnet?: pulumi.Input<string>;
    /**
     * The VLAN ID of the network.
     */
    vlanId?: pulumi.Input<number>;
    /**
     * DNS servers IPs of the WAN.
     */
    wanDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the WAN egress quality of service. Defaults to `0`.
     */
    wanEgressQos?: pulumi.Input<number>;
    /**
     * The IPv4 gateway of the WAN.
     */
    wanGateway?: pulumi.Input<string>;
    /**
     * The IPv4 address of the WAN.
     */
    wanIp?: pulumi.Input<string>;
    /**
     * The IPv4 netmask of the WAN.
     */
    wanNetmask?: pulumi.Input<string>;
    /**
     * Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
     */
    wanNetworkgroup?: pulumi.Input<string>;
    /**
     * Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.
     */
    wanType?: pulumi.Input<string>;
    /**
     * Specifies the IPV4 WAN username.
     */
    wanUsername?: pulumi.Input<string>;
    /**
     * Specifies the IPV4 WAN password.
     */
    xWanPassword?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * Specifies the IPv4 addresses for the DNS server to be returned from the DHCP server. Leave blank to disable this feature.
     */
    dhcpDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether DHCP is enabled or not on this network.
     */
    dhcpEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the lease time for DHCP addresses. Defaults to `86400`.
     */
    dhcpLease?: pulumi.Input<number>;
    /**
     * Specifies whether DHCP relay is enabled or not on this network.
     */
    dhcpRelayEnabled?: pulumi.Input<boolean>;
    /**
     * The IPv4 address where the DHCP range of addresses starts.
     */
    dhcpStart?: pulumi.Input<string>;
    /**
     * The IPv4 address where the DHCP range of addresses stops.
     */
    dhcpStop?: pulumi.Input<string>;
    /**
     * Toggles on the DHCP boot options. Should be set to true when you want to have dhcpd*boot*filename, and dhcpd*boot*server to take effect.
     */
    dhcpdBootEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the file to PXE boot from on the dhcpd*boot*server.
     */
    dhcpdBootFilename?: pulumi.Input<string>;
    /**
     * Specifies the IPv4 address of a TFTP server to network boot from.
     */
    dhcpdBootServer?: pulumi.Input<string>;
    /**
     * The domain name of this network.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Specifies whether IGMP snooping is enabled or not.
     */
    igmpSnooping?: pulumi.Input<boolean>;
    /**
     * Specifies which type of IPv6 connection to use. Defaults to `none`.
     */
    ipv6InterfaceType?: pulumi.Input<string>;
    /**
     * Specifies which WAN interface to use for IPv6 PD.
     */
    ipv6PdInterface?: pulumi.Input<string>;
    /**
     * Specifies the IPv6 Prefix ID.
     */
    ipv6PdPrefixid?: pulumi.Input<string>;
    /**
     * Specifies whether to enable router advertisements or not.
     */
    ipv6RaEnable?: pulumi.Input<boolean>;
    /**
     * Specifies the static IPv6 subnet when ipv6*interface*type is 'static'.
     */
    ipv6StaticSubnet?: pulumi.Input<string>;
    /**
     * The name of the network.
     */
    name?: pulumi.Input<string>;
    /**
     * The group of the network. Defaults to `LAN`.
     */
    networkGroup?: pulumi.Input<string>;
    /**
     * The purpose of the network. Must be one of `corporate`, `guest`, `wan`, or `vlan-only`.
     */
    purpose: pulumi.Input<string>;
    /**
     * The name of the site to associate the network with.
     */
    site?: pulumi.Input<string>;
    /**
     * The subnet of the network. Must be a valid CIDR address.
     */
    subnet?: pulumi.Input<string>;
    /**
     * The VLAN ID of the network.
     */
    vlanId?: pulumi.Input<number>;
    /**
     * DNS servers IPs of the WAN.
     */
    wanDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the WAN egress quality of service. Defaults to `0`.
     */
    wanEgressQos?: pulumi.Input<number>;
    /**
     * The IPv4 gateway of the WAN.
     */
    wanGateway?: pulumi.Input<string>;
    /**
     * The IPv4 address of the WAN.
     */
    wanIp?: pulumi.Input<string>;
    /**
     * The IPv4 netmask of the WAN.
     */
    wanNetmask?: pulumi.Input<string>;
    /**
     * Specifies the WAN network group. Must be one of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
     */
    wanNetworkgroup?: pulumi.Input<string>;
    /**
     * Specifies the IPV4 WAN connection type. Must be one of either `disabled`, `static`, `dhcp`, or `pppoe`.
     */
    wanType?: pulumi.Input<string>;
    /**
     * Specifies the IPV4 WAN username.
     */
    wanUsername?: pulumi.Input<string>;
    /**
     * Specifies the IPV4 WAN password.
     */
    xWanPassword?: pulumi.Input<string>;
}
