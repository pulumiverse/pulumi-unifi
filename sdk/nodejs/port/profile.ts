// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * `unifi.port.Profile` manages a port profile for use on network switches.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as unifi from "@pulumiverse/unifi";
 *
 * const config = new pulumi.Config();
 * const vlanId = config.getNumber("vlanId") || 10;
 * const vlan = new unifi.Network("vlan", {
 *     name: "wifi-vlan",
 *     purpose: "corporate",
 *     subnet: "10.0.0.1/24",
 *     vlanId: vlanId,
 *     dhcpStart: "10.0.0.6",
 *     dhcpStop: "10.0.0.254",
 *     dhcpEnabled: true,
 * });
 * const poeDisabled = new unifi.port.Profile("poe_disabled", {
 *     name: "POE Disabled",
 *     nativeNetworkconfId: vlan.id,
 *     poeMode: "off",
 * });
 * ```
 */
export class Profile extends pulumi.CustomResource {
    /**
     * Get an existing Profile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfileState, opts?: pulumi.CustomResourceOptions): Profile {
        return new Profile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'unifi:port/profile:Profile';

    /**
     * Returns true if the given object is an instance of Profile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Profile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Profile.__pulumiType;
    }

    /**
     * Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
     */
    public readonly autoneg!: pulumi.Output<boolean | undefined>;
    /**
     * The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
     */
    public readonly dot1xCtrl!: pulumi.Output<string | undefined>;
    /**
     * The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
     */
    public readonly dot1xIdleTimeout!: pulumi.Output<number | undefined>;
    /**
     * The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
     */
    public readonly egressRateLimitKbps!: pulumi.Output<number | undefined>;
    /**
     * Enable egress rate limiting for the port profile. Defaults to `false`.
     */
    public readonly egressRateLimitKbpsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
     */
    public readonly forward!: pulumi.Output<string | undefined>;
    /**
     * Enable full duplex for the port profile. Defaults to `false`.
     */
    public readonly fullDuplex!: pulumi.Output<boolean | undefined>;
    /**
     * Enable port isolation for the port profile. Defaults to `false`.
     */
    public readonly isolation!: pulumi.Output<boolean | undefined>;
    /**
     * Enable LLDP-MED for the port profile. Defaults to `true`.
     */
    public readonly lldpmedEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Enable LLDP-MED topology change notifications for the port profile.
     */
    public readonly lldpmedNotifyEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the port profile.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of network to use as the main network on the port profile.
     */
    public readonly nativeNetworkconfId!: pulumi.Output<string | undefined>;
    /**
     * The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
     */
    public readonly opMode!: pulumi.Output<string | undefined>;
    /**
     * The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
     */
    public readonly poeMode!: pulumi.Output<string | undefined>;
    /**
     * Enable port security for the port profile. Defaults to `false`.
     */
    public readonly portSecurityEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The MAC addresses associated with the port security for the port profile.
     */
    public readonly portSecurityMacAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * The priority queue 1 level for the port profile. Can be between 0 and 100.
     */
    public readonly priorityQueue1Level!: pulumi.Output<number | undefined>;
    /**
     * The priority queue 2 level for the port profile. Can be between 0 and 100.
     */
    public readonly priorityQueue2Level!: pulumi.Output<number | undefined>;
    /**
     * The priority queue 3 level for the port profile. Can be between 0 and 100.
     */
    public readonly priorityQueue3Level!: pulumi.Output<number | undefined>;
    /**
     * The priority queue 4 level for the port profile. Can be between 0 and 100.
     */
    public readonly priorityQueue4Level!: pulumi.Output<number | undefined>;
    /**
     * The name of the site to associate the port profile with.
     */
    public readonly site!: pulumi.Output<string>;
    /**
     * The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
     */
    public readonly speed!: pulumi.Output<number | undefined>;
    /**
     * Enable broadcast Storm Control for the port profile. Defaults to `false`.
     */
    public readonly stormctrlBcastEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The broadcast Storm Control level for the port profile. Can be between 0 and 100.
     */
    public readonly stormctrlBcastLevel!: pulumi.Output<number | undefined>;
    /**
     * The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    public readonly stormctrlBcastRate!: pulumi.Output<number | undefined>;
    /**
     * Enable multicast Storm Control for the port profile. Defaults to `false`.
     */
    public readonly stormctrlMcastEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The multicast Storm Control level for the port profile. Can be between 0 and 100.
     */
    public readonly stormctrlMcastLevel!: pulumi.Output<number | undefined>;
    /**
     * The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    public readonly stormctrlMcastRate!: pulumi.Output<number | undefined>;
    /**
     * The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
     */
    public readonly stormctrlType!: pulumi.Output<string | undefined>;
    /**
     * Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
     */
    public readonly stormctrlUcastEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
     */
    public readonly stormctrlUcastLevel!: pulumi.Output<number | undefined>;
    /**
     * The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    public readonly stormctrlUcastRate!: pulumi.Output<number | undefined>;
    /**
     * Enable spanning tree protocol on the port profile. Defaults to `true`.
     */
    public readonly stpPortMode!: pulumi.Output<boolean | undefined>;
    /**
     * The IDs of networks to tag traffic with for the port profile.
     */
    public readonly taggedNetworkconfIds!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of network to use as the voice network on the port profile.
     */
    public readonly voiceNetworkconfId!: pulumi.Output<string | undefined>;

    /**
     * Create a Profile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProfileArgs | ProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProfileState | undefined;
            resourceInputs["autoneg"] = state ? state.autoneg : undefined;
            resourceInputs["dot1xCtrl"] = state ? state.dot1xCtrl : undefined;
            resourceInputs["dot1xIdleTimeout"] = state ? state.dot1xIdleTimeout : undefined;
            resourceInputs["egressRateLimitKbps"] = state ? state.egressRateLimitKbps : undefined;
            resourceInputs["egressRateLimitKbpsEnabled"] = state ? state.egressRateLimitKbpsEnabled : undefined;
            resourceInputs["forward"] = state ? state.forward : undefined;
            resourceInputs["fullDuplex"] = state ? state.fullDuplex : undefined;
            resourceInputs["isolation"] = state ? state.isolation : undefined;
            resourceInputs["lldpmedEnabled"] = state ? state.lldpmedEnabled : undefined;
            resourceInputs["lldpmedNotifyEnabled"] = state ? state.lldpmedNotifyEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nativeNetworkconfId"] = state ? state.nativeNetworkconfId : undefined;
            resourceInputs["opMode"] = state ? state.opMode : undefined;
            resourceInputs["poeMode"] = state ? state.poeMode : undefined;
            resourceInputs["portSecurityEnabled"] = state ? state.portSecurityEnabled : undefined;
            resourceInputs["portSecurityMacAddresses"] = state ? state.portSecurityMacAddresses : undefined;
            resourceInputs["priorityQueue1Level"] = state ? state.priorityQueue1Level : undefined;
            resourceInputs["priorityQueue2Level"] = state ? state.priorityQueue2Level : undefined;
            resourceInputs["priorityQueue3Level"] = state ? state.priorityQueue3Level : undefined;
            resourceInputs["priorityQueue4Level"] = state ? state.priorityQueue4Level : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["stormctrlBcastEnabled"] = state ? state.stormctrlBcastEnabled : undefined;
            resourceInputs["stormctrlBcastLevel"] = state ? state.stormctrlBcastLevel : undefined;
            resourceInputs["stormctrlBcastRate"] = state ? state.stormctrlBcastRate : undefined;
            resourceInputs["stormctrlMcastEnabled"] = state ? state.stormctrlMcastEnabled : undefined;
            resourceInputs["stormctrlMcastLevel"] = state ? state.stormctrlMcastLevel : undefined;
            resourceInputs["stormctrlMcastRate"] = state ? state.stormctrlMcastRate : undefined;
            resourceInputs["stormctrlType"] = state ? state.stormctrlType : undefined;
            resourceInputs["stormctrlUcastEnabled"] = state ? state.stormctrlUcastEnabled : undefined;
            resourceInputs["stormctrlUcastLevel"] = state ? state.stormctrlUcastLevel : undefined;
            resourceInputs["stormctrlUcastRate"] = state ? state.stormctrlUcastRate : undefined;
            resourceInputs["stpPortMode"] = state ? state.stpPortMode : undefined;
            resourceInputs["taggedNetworkconfIds"] = state ? state.taggedNetworkconfIds : undefined;
            resourceInputs["voiceNetworkconfId"] = state ? state.voiceNetworkconfId : undefined;
        } else {
            const args = argsOrState as ProfileArgs | undefined;
            resourceInputs["autoneg"] = args ? args.autoneg : undefined;
            resourceInputs["dot1xCtrl"] = args ? args.dot1xCtrl : undefined;
            resourceInputs["dot1xIdleTimeout"] = args ? args.dot1xIdleTimeout : undefined;
            resourceInputs["egressRateLimitKbps"] = args ? args.egressRateLimitKbps : undefined;
            resourceInputs["egressRateLimitKbpsEnabled"] = args ? args.egressRateLimitKbpsEnabled : undefined;
            resourceInputs["forward"] = args ? args.forward : undefined;
            resourceInputs["fullDuplex"] = args ? args.fullDuplex : undefined;
            resourceInputs["isolation"] = args ? args.isolation : undefined;
            resourceInputs["lldpmedEnabled"] = args ? args.lldpmedEnabled : undefined;
            resourceInputs["lldpmedNotifyEnabled"] = args ? args.lldpmedNotifyEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nativeNetworkconfId"] = args ? args.nativeNetworkconfId : undefined;
            resourceInputs["opMode"] = args ? args.opMode : undefined;
            resourceInputs["poeMode"] = args ? args.poeMode : undefined;
            resourceInputs["portSecurityEnabled"] = args ? args.portSecurityEnabled : undefined;
            resourceInputs["portSecurityMacAddresses"] = args ? args.portSecurityMacAddresses : undefined;
            resourceInputs["priorityQueue1Level"] = args ? args.priorityQueue1Level : undefined;
            resourceInputs["priorityQueue2Level"] = args ? args.priorityQueue2Level : undefined;
            resourceInputs["priorityQueue3Level"] = args ? args.priorityQueue3Level : undefined;
            resourceInputs["priorityQueue4Level"] = args ? args.priorityQueue4Level : undefined;
            resourceInputs["site"] = args ? args.site : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["stormctrlBcastEnabled"] = args ? args.stormctrlBcastEnabled : undefined;
            resourceInputs["stormctrlBcastLevel"] = args ? args.stormctrlBcastLevel : undefined;
            resourceInputs["stormctrlBcastRate"] = args ? args.stormctrlBcastRate : undefined;
            resourceInputs["stormctrlMcastEnabled"] = args ? args.stormctrlMcastEnabled : undefined;
            resourceInputs["stormctrlMcastLevel"] = args ? args.stormctrlMcastLevel : undefined;
            resourceInputs["stormctrlMcastRate"] = args ? args.stormctrlMcastRate : undefined;
            resourceInputs["stormctrlType"] = args ? args.stormctrlType : undefined;
            resourceInputs["stormctrlUcastEnabled"] = args ? args.stormctrlUcastEnabled : undefined;
            resourceInputs["stormctrlUcastLevel"] = args ? args.stormctrlUcastLevel : undefined;
            resourceInputs["stormctrlUcastRate"] = args ? args.stormctrlUcastRate : undefined;
            resourceInputs["stpPortMode"] = args ? args.stpPortMode : undefined;
            resourceInputs["taggedNetworkconfIds"] = args ? args.taggedNetworkconfIds : undefined;
            resourceInputs["voiceNetworkconfId"] = args ? args.voiceNetworkconfId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Profile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Profile resources.
 */
export interface ProfileState {
    /**
     * Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
     */
    autoneg?: pulumi.Input<boolean>;
    /**
     * The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
     */
    dot1xCtrl?: pulumi.Input<string>;
    /**
     * The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
     */
    dot1xIdleTimeout?: pulumi.Input<number>;
    /**
     * The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
     */
    egressRateLimitKbps?: pulumi.Input<number>;
    /**
     * Enable egress rate limiting for the port profile. Defaults to `false`.
     */
    egressRateLimitKbpsEnabled?: pulumi.Input<boolean>;
    /**
     * The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
     */
    forward?: pulumi.Input<string>;
    /**
     * Enable full duplex for the port profile. Defaults to `false`.
     */
    fullDuplex?: pulumi.Input<boolean>;
    /**
     * Enable port isolation for the port profile. Defaults to `false`.
     */
    isolation?: pulumi.Input<boolean>;
    /**
     * Enable LLDP-MED for the port profile. Defaults to `true`.
     */
    lldpmedEnabled?: pulumi.Input<boolean>;
    /**
     * Enable LLDP-MED topology change notifications for the port profile.
     */
    lldpmedNotifyEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the port profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of network to use as the main network on the port profile.
     */
    nativeNetworkconfId?: pulumi.Input<string>;
    /**
     * The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
     */
    opMode?: pulumi.Input<string>;
    /**
     * The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
     */
    poeMode?: pulumi.Input<string>;
    /**
     * Enable port security for the port profile. Defaults to `false`.
     */
    portSecurityEnabled?: pulumi.Input<boolean>;
    /**
     * The MAC addresses associated with the port security for the port profile.
     */
    portSecurityMacAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The priority queue 1 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue1Level?: pulumi.Input<number>;
    /**
     * The priority queue 2 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue2Level?: pulumi.Input<number>;
    /**
     * The priority queue 3 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue3Level?: pulumi.Input<number>;
    /**
     * The priority queue 4 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue4Level?: pulumi.Input<number>;
    /**
     * The name of the site to associate the port profile with.
     */
    site?: pulumi.Input<string>;
    /**
     * The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
     */
    speed?: pulumi.Input<number>;
    /**
     * Enable broadcast Storm Control for the port profile. Defaults to `false`.
     */
    stormctrlBcastEnabled?: pulumi.Input<boolean>;
    /**
     * The broadcast Storm Control level for the port profile. Can be between 0 and 100.
     */
    stormctrlBcastLevel?: pulumi.Input<number>;
    /**
     * The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    stormctrlBcastRate?: pulumi.Input<number>;
    /**
     * Enable multicast Storm Control for the port profile. Defaults to `false`.
     */
    stormctrlMcastEnabled?: pulumi.Input<boolean>;
    /**
     * The multicast Storm Control level for the port profile. Can be between 0 and 100.
     */
    stormctrlMcastLevel?: pulumi.Input<number>;
    /**
     * The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    stormctrlMcastRate?: pulumi.Input<number>;
    /**
     * The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
     */
    stormctrlType?: pulumi.Input<string>;
    /**
     * Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
     */
    stormctrlUcastEnabled?: pulumi.Input<boolean>;
    /**
     * The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
     */
    stormctrlUcastLevel?: pulumi.Input<number>;
    /**
     * The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    stormctrlUcastRate?: pulumi.Input<number>;
    /**
     * Enable spanning tree protocol on the port profile. Defaults to `true`.
     */
    stpPortMode?: pulumi.Input<boolean>;
    /**
     * The IDs of networks to tag traffic with for the port profile.
     */
    taggedNetworkconfIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of network to use as the voice network on the port profile.
     */
    voiceNetworkconfId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Profile resource.
 */
export interface ProfileArgs {
    /**
     * Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
     */
    autoneg?: pulumi.Input<boolean>;
    /**
     * The type of 802.1X control to use. Can be `auto`, `forceAuthorized`, `forceUnauthorized`, `macBased` or `multiHost`. Defaults to `forceAuthorized`.
     */
    dot1xCtrl?: pulumi.Input<string>;
    /**
     * The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
     */
    dot1xIdleTimeout?: pulumi.Input<number>;
    /**
     * The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
     */
    egressRateLimitKbps?: pulumi.Input<number>;
    /**
     * Enable egress rate limiting for the port profile. Defaults to `false`.
     */
    egressRateLimitKbpsEnabled?: pulumi.Input<boolean>;
    /**
     * The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
     */
    forward?: pulumi.Input<string>;
    /**
     * Enable full duplex for the port profile. Defaults to `false`.
     */
    fullDuplex?: pulumi.Input<boolean>;
    /**
     * Enable port isolation for the port profile. Defaults to `false`.
     */
    isolation?: pulumi.Input<boolean>;
    /**
     * Enable LLDP-MED for the port profile. Defaults to `true`.
     */
    lldpmedEnabled?: pulumi.Input<boolean>;
    /**
     * Enable LLDP-MED topology change notifications for the port profile.
     */
    lldpmedNotifyEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the port profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of network to use as the main network on the port profile.
     */
    nativeNetworkconfId?: pulumi.Input<string>;
    /**
     * The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
     */
    opMode?: pulumi.Input<string>;
    /**
     * The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
     */
    poeMode?: pulumi.Input<string>;
    /**
     * Enable port security for the port profile. Defaults to `false`.
     */
    portSecurityEnabled?: pulumi.Input<boolean>;
    /**
     * The MAC addresses associated with the port security for the port profile.
     */
    portSecurityMacAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The priority queue 1 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue1Level?: pulumi.Input<number>;
    /**
     * The priority queue 2 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue2Level?: pulumi.Input<number>;
    /**
     * The priority queue 3 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue3Level?: pulumi.Input<number>;
    /**
     * The priority queue 4 level for the port profile. Can be between 0 and 100.
     */
    priorityQueue4Level?: pulumi.Input<number>;
    /**
     * The name of the site to associate the port profile with.
     */
    site?: pulumi.Input<string>;
    /**
     * The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
     */
    speed?: pulumi.Input<number>;
    /**
     * Enable broadcast Storm Control for the port profile. Defaults to `false`.
     */
    stormctrlBcastEnabled?: pulumi.Input<boolean>;
    /**
     * The broadcast Storm Control level for the port profile. Can be between 0 and 100.
     */
    stormctrlBcastLevel?: pulumi.Input<number>;
    /**
     * The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    stormctrlBcastRate?: pulumi.Input<number>;
    /**
     * Enable multicast Storm Control for the port profile. Defaults to `false`.
     */
    stormctrlMcastEnabled?: pulumi.Input<boolean>;
    /**
     * The multicast Storm Control level for the port profile. Can be between 0 and 100.
     */
    stormctrlMcastLevel?: pulumi.Input<number>;
    /**
     * The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    stormctrlMcastRate?: pulumi.Input<number>;
    /**
     * The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
     */
    stormctrlType?: pulumi.Input<string>;
    /**
     * Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
     */
    stormctrlUcastEnabled?: pulumi.Input<boolean>;
    /**
     * The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
     */
    stormctrlUcastLevel?: pulumi.Input<number>;
    /**
     * The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
     */
    stormctrlUcastRate?: pulumi.Input<number>;
    /**
     * Enable spanning tree protocol on the port profile. Defaults to `true`.
     */
    stpPortMode?: pulumi.Input<boolean>;
    /**
     * The IDs of networks to tag traffic with for the port profile.
     */
    taggedNetworkconfIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of network to use as the voice network on the port profile.
     */
    voiceNetworkconfId?: pulumi.Input<string>;
}
