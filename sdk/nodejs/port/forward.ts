// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * `unifi.port.Forward` manages a port forwarding rule on the gateway.
 */
export class Forward extends pulumi.CustomResource {
    /**
     * Get an existing Forward resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ForwardState, opts?: pulumi.CustomResourceOptions): Forward {
        return new Forward(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'unifi:port/forward:Forward';

    /**
     * Returns true if the given object is an instance of Forward.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Forward {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Forward.__pulumiType;
    }

    /**
     * The destination port for the forwarding.
     */
    public readonly dstPort!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the port forwarding rule is enabled or not. Defaults to `true`. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
     *
     * @deprecated This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The IPv4 address to forward traffic to.
     */
    public readonly fwdIp!: pulumi.Output<string | undefined>;
    /**
     * The port to forward traffic to.
     */
    public readonly fwdPort!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to log forwarded traffic or not. Defaults to `false`.
     */
    public readonly log!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the port forwarding rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The port forwarding interface. Can be `wan`, `wan2`, or `both`.
     */
    public readonly portForwardInterface!: pulumi.Output<string | undefined>;
    /**
     * The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcpUdp`. Defaults to `tcpUdp`.
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * The name of the site to associate the port forwarding rule with.
     */
    public readonly site!: pulumi.Output<string>;
    /**
     * The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.
     */
    public readonly srcIp!: pulumi.Output<string | undefined>;

    /**
     * Create a Forward resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ForwardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ForwardArgs | ForwardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ForwardState | undefined;
            resourceInputs["dstPort"] = state ? state.dstPort : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["fwdIp"] = state ? state.fwdIp : undefined;
            resourceInputs["fwdPort"] = state ? state.fwdPort : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["portForwardInterface"] = state ? state.portForwardInterface : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
            resourceInputs["srcIp"] = state ? state.srcIp : undefined;
        } else {
            const args = argsOrState as ForwardArgs | undefined;
            resourceInputs["dstPort"] = args ? args.dstPort : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["fwdIp"] = args ? args.fwdIp : undefined;
            resourceInputs["fwdPort"] = args ? args.fwdPort : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portForwardInterface"] = args ? args.portForwardInterface : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["site"] = args ? args.site : undefined;
            resourceInputs["srcIp"] = args ? args.srcIp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Forward.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Forward resources.
 */
export interface ForwardState {
    /**
     * The destination port for the forwarding.
     */
    dstPort?: pulumi.Input<string>;
    /**
     * Specifies whether the port forwarding rule is enabled or not. Defaults to `true`. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
     *
     * @deprecated This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The IPv4 address to forward traffic to.
     */
    fwdIp?: pulumi.Input<string>;
    /**
     * The port to forward traffic to.
     */
    fwdPort?: pulumi.Input<string>;
    /**
     * Specifies whether to log forwarded traffic or not. Defaults to `false`.
     */
    log?: pulumi.Input<boolean>;
    /**
     * The name of the port forwarding rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The port forwarding interface. Can be `wan`, `wan2`, or `both`.
     */
    portForwardInterface?: pulumi.Input<string>;
    /**
     * The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcpUdp`. Defaults to `tcpUdp`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The name of the site to associate the port forwarding rule with.
     */
    site?: pulumi.Input<string>;
    /**
     * The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.
     */
    srcIp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Forward resource.
 */
export interface ForwardArgs {
    /**
     * The destination port for the forwarding.
     */
    dstPort?: pulumi.Input<string>;
    /**
     * Specifies whether the port forwarding rule is enabled or not. Defaults to `true`. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
     *
     * @deprecated This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The IPv4 address to forward traffic to.
     */
    fwdIp?: pulumi.Input<string>;
    /**
     * The port to forward traffic to.
     */
    fwdPort?: pulumi.Input<string>;
    /**
     * Specifies whether to log forwarded traffic or not. Defaults to `false`.
     */
    log?: pulumi.Input<boolean>;
    /**
     * The name of the port forwarding rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The port forwarding interface. Can be `wan`, `wan2`, or `both`.
     */
    portForwardInterface?: pulumi.Input<string>;
    /**
     * The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcpUdp`. Defaults to `tcpUdp`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The name of the site to associate the port forwarding rule with.
     */
    site?: pulumi.Input<string>;
    /**
     * The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.
     */
    srcIp?: pulumi.Input<string>;
}
