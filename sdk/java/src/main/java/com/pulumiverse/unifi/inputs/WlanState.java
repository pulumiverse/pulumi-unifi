// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.unifi.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumiverse.unifi.inputs.WlanScheduleArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WlanState extends com.pulumi.resources.ResourceArgs {

    public static final WlanState Empty = new WlanState();

    /**
     * IDs of the AP groups to use for this network.
     * 
     */
    @Import(name="apGroupIds")
    private @Nullable Output<List<String>> apGroupIds;

    /**
     * @return IDs of the AP groups to use for this network.
     * 
     */
    public Optional<Output<List<String>>> apGroupIds() {
        return Optional.ofNullable(this.apGroupIds);
    }

    /**
     * Improves client transitions between APs when they have a weak signal. Defaults to `true`.
     * 
     */
    @Import(name="bssTransition")
    private @Nullable Output<Boolean> bssTransition;

    /**
     * @return Improves client transitions between APs when they have a weak signal. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> bssTransition() {
        return Optional.ofNullable(this.bssTransition);
    }

    /**
     * Enables 802.11r fast roaming. Defaults to `false`.
     * 
     */
    @Import(name="fastRoamingEnabled")
    private @Nullable Output<Boolean> fastRoamingEnabled;

    /**
     * @return Enables 802.11r fast roaming. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> fastRoamingEnabled() {
        return Optional.ofNullable(this.fastRoamingEnabled);
    }

    /**
     * Indicates whether or not to hide the SSID from broadcast.
     * 
     */
    @Import(name="hideSsid")
    private @Nullable Output<Boolean> hideSsid;

    /**
     * @return Indicates whether or not to hide the SSID from broadcast.
     * 
     */
    public Optional<Output<Boolean>> hideSsid() {
        return Optional.ofNullable(this.hideSsid);
    }

    /**
     * Indicates that this is a guest WLAN and should use guest behaviors.
     * 
     */
    @Import(name="isGuest")
    private @Nullable Output<Boolean> isGuest;

    /**
     * @return Indicates that this is a guest WLAN and should use guest behaviors.
     * 
     */
    public Optional<Output<Boolean>> isGuest() {
        return Optional.ofNullable(this.isGuest);
    }

    /**
     * Isolates stations on layer 2 (ethernet) level. Defaults to `false`.
     * 
     */
    @Import(name="l2Isolation")
    private @Nullable Output<Boolean> l2Isolation;

    /**
     * @return Isolates stations on layer 2 (ethernet) level. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> l2Isolation() {
        return Optional.ofNullable(this.l2Isolation);
    }

    /**
     * Indicates whether or not the MAC filter is turned of for the network.
     * 
     */
    @Import(name="macFilterEnabled")
    private @Nullable Output<Boolean> macFilterEnabled;

    /**
     * @return Indicates whether or not the MAC filter is turned of for the network.
     * 
     */
    public Optional<Output<Boolean>> macFilterEnabled() {
        return Optional.ofNullable(this.macFilterEnabled);
    }

    /**
     * List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).
     * 
     */
    @Import(name="macFilterLists")
    private @Nullable Output<List<String>> macFilterLists;

    /**
     * @return List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).
     * 
     */
    public Optional<Output<List<String>>> macFilterLists() {
        return Optional.ofNullable(this.macFilterLists);
    }

    /**
     * MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Defaults to `deny`.
     * 
     */
    @Import(name="macFilterPolicy")
    private @Nullable Output<String> macFilterPolicy;

    /**
     * @return MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Defaults to `deny`.
     * 
     */
    public Optional<Output<String>> macFilterPolicy() {
        return Optional.ofNullable(this.macFilterPolicy);
    }

    /**
     * Set minimum data rate control for 2G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
     * 
     */
    @Import(name="minimumDataRate2gKbps")
    private @Nullable Output<Integer> minimumDataRate2gKbps;

    /**
     * @return Set minimum data rate control for 2G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
     * 
     */
    public Optional<Output<Integer>> minimumDataRate2gKbps() {
        return Optional.ofNullable(this.minimumDataRate2gKbps);
    }

    /**
     * Set minimum data rate control for 5G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
     * 
     */
    @Import(name="minimumDataRate5gKbps")
    private @Nullable Output<Integer> minimumDataRate5gKbps;

    /**
     * @return Set minimum data rate control for 5G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
     * 
     */
    public Optional<Output<Integer>> minimumDataRate5gKbps() {
        return Optional.ofNullable(this.minimumDataRate5gKbps);
    }

    /**
     * Indicates whether or not Multicast Enhance is turned of for the network.
     * 
     */
    @Import(name="multicastEnhance")
    private @Nullable Output<Boolean> multicastEnhance;

    /**
     * @return Indicates whether or not Multicast Enhance is turned of for the network.
     * 
     */
    public Optional<Output<Boolean>> multicastEnhance() {
        return Optional.ofNullable(this.multicastEnhance);
    }

    /**
     * The SSID of the network.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The SSID of the network.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ID of the network for this SSID
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return ID of the network for this SSID
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * Connect high performance clients to 5 GHz only. Defaults to `true`.
     * 
     */
    @Import(name="no2ghzOui")
    private @Nullable Output<Boolean> no2ghzOui;

    /**
     * @return Connect high performance clients to 5 GHz only. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> no2ghzOui() {
        return Optional.ofNullable(this.no2ghzOui);
    }

    /**
     * The passphrase for the network, this is only required if `security` is not set to `open`.
     * 
     */
    @Import(name="passphrase")
    private @Nullable Output<String> passphrase;

    /**
     * @return The passphrase for the network, this is only required if `security` is not set to `open`.
     * 
     */
    public Optional<Output<String>> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    /**
     * Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`. Defaults to `disabled`.
     * 
     */
    @Import(name="pmfMode")
    private @Nullable Output<String> pmfMode;

    /**
     * @return Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`. Defaults to `disabled`.
     * 
     */
    public Optional<Output<String>> pmfMode() {
        return Optional.ofNullable(this.pmfMode);
    }

    /**
     * Reduces airtime usage by allowing APs to &#34;proxy&#34; common broadcast frames as unicast. Defaults to `false`.
     * 
     */
    @Import(name="proxyArp")
    private @Nullable Output<Boolean> proxyArp;

    /**
     * @return Reduces airtime usage by allowing APs to &#34;proxy&#34; common broadcast frames as unicast. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> proxyArp() {
        return Optional.ofNullable(this.proxyArp);
    }

    /**
     * ID of the RADIUS profile to use when security `wpaeap`. You can query this via the `unifi.RadiusProfile` data source.
     * 
     */
    @Import(name="radiusProfileId")
    private @Nullable Output<String> radiusProfileId;

    /**
     * @return ID of the RADIUS profile to use when security `wpaeap`. You can query this via the `unifi.RadiusProfile` data source.
     * 
     */
    public Optional<Output<String>> radiusProfileId() {
        return Optional.ofNullable(this.radiusProfileId);
    }

    /**
     * Start and stop schedules for the WLAN
     * 
     */
    @Import(name="schedules")
    private @Nullable Output<List<WlanScheduleArgs>> schedules;

    /**
     * @return Start and stop schedules for the WLAN
     * 
     */
    public Optional<Output<List<WlanScheduleArgs>>> schedules() {
        return Optional.ofNullable(this.schedules);
    }

    /**
     * The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.
     * 
     */
    @Import(name="security")
    private @Nullable Output<String> security;

    /**
     * @return The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.
     * 
     */
    public Optional<Output<String>> security() {
        return Optional.ofNullable(this.security);
    }

    /**
     * The name of the site to associate the wlan with.
     * 
     */
    @Import(name="site")
    private @Nullable Output<String> site;

    /**
     * @return The name of the site to associate the wlan with.
     * 
     */
    public Optional<Output<String>> site() {
        return Optional.ofNullable(this.site);
    }

    /**
     * Enable Unscheduled Automatic Power Save Delivery. Defaults to `false`.
     * 
     */
    @Import(name="uapsd")
    private @Nullable Output<Boolean> uapsd;

    /**
     * @return Enable Unscheduled Automatic Power Save Delivery. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> uapsd() {
        return Optional.ofNullable(this.uapsd);
    }

    /**
     * ID of the user group to use for this network.
     * 
     */
    @Import(name="userGroupId")
    private @Nullable Output<String> userGroupId;

    /**
     * @return ID of the user group to use for this network.
     * 
     */
    public Optional<Output<String>> userGroupId() {
        return Optional.ofNullable(this.userGroupId);
    }

    /**
     * Radio band your WiFi network will use. Defaults to `both`.
     * 
     */
    @Import(name="wlanBand")
    private @Nullable Output<String> wlanBand;

    /**
     * @return Radio band your WiFi network will use. Defaults to `both`.
     * 
     */
    public Optional<Output<String>> wlanBand() {
        return Optional.ofNullable(this.wlanBand);
    }

    /**
     * Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).
     * 
     */
    @Import(name="wpa3Support")
    private @Nullable Output<Boolean> wpa3Support;

    /**
     * @return Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).
     * 
     */
    public Optional<Output<Boolean>> wpa3Support() {
        return Optional.ofNullable(this.wpa3Support);
    }

    /**
     * Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).
     * 
     */
    @Import(name="wpa3Transition")
    private @Nullable Output<Boolean> wpa3Transition;

    /**
     * @return Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).
     * 
     */
    public Optional<Output<Boolean>> wpa3Transition() {
        return Optional.ofNullable(this.wpa3Transition);
    }

    private WlanState() {}

    private WlanState(WlanState $) {
        this.apGroupIds = $.apGroupIds;
        this.bssTransition = $.bssTransition;
        this.fastRoamingEnabled = $.fastRoamingEnabled;
        this.hideSsid = $.hideSsid;
        this.isGuest = $.isGuest;
        this.l2Isolation = $.l2Isolation;
        this.macFilterEnabled = $.macFilterEnabled;
        this.macFilterLists = $.macFilterLists;
        this.macFilterPolicy = $.macFilterPolicy;
        this.minimumDataRate2gKbps = $.minimumDataRate2gKbps;
        this.minimumDataRate5gKbps = $.minimumDataRate5gKbps;
        this.multicastEnhance = $.multicastEnhance;
        this.name = $.name;
        this.networkId = $.networkId;
        this.no2ghzOui = $.no2ghzOui;
        this.passphrase = $.passphrase;
        this.pmfMode = $.pmfMode;
        this.proxyArp = $.proxyArp;
        this.radiusProfileId = $.radiusProfileId;
        this.schedules = $.schedules;
        this.security = $.security;
        this.site = $.site;
        this.uapsd = $.uapsd;
        this.userGroupId = $.userGroupId;
        this.wlanBand = $.wlanBand;
        this.wpa3Support = $.wpa3Support;
        this.wpa3Transition = $.wpa3Transition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WlanState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WlanState $;

        public Builder() {
            $ = new WlanState();
        }

        public Builder(WlanState defaults) {
            $ = new WlanState(Objects.requireNonNull(defaults));
        }

        /**
         * @param apGroupIds IDs of the AP groups to use for this network.
         * 
         * @return builder
         * 
         */
        public Builder apGroupIds(@Nullable Output<List<String>> apGroupIds) {
            $.apGroupIds = apGroupIds;
            return this;
        }

        /**
         * @param apGroupIds IDs of the AP groups to use for this network.
         * 
         * @return builder
         * 
         */
        public Builder apGroupIds(List<String> apGroupIds) {
            return apGroupIds(Output.of(apGroupIds));
        }

        /**
         * @param apGroupIds IDs of the AP groups to use for this network.
         * 
         * @return builder
         * 
         */
        public Builder apGroupIds(String... apGroupIds) {
            return apGroupIds(List.of(apGroupIds));
        }

        /**
         * @param bssTransition Improves client transitions between APs when they have a weak signal. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder bssTransition(@Nullable Output<Boolean> bssTransition) {
            $.bssTransition = bssTransition;
            return this;
        }

        /**
         * @param bssTransition Improves client transitions between APs when they have a weak signal. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder bssTransition(Boolean bssTransition) {
            return bssTransition(Output.of(bssTransition));
        }

        /**
         * @param fastRoamingEnabled Enables 802.11r fast roaming. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder fastRoamingEnabled(@Nullable Output<Boolean> fastRoamingEnabled) {
            $.fastRoamingEnabled = fastRoamingEnabled;
            return this;
        }

        /**
         * @param fastRoamingEnabled Enables 802.11r fast roaming. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder fastRoamingEnabled(Boolean fastRoamingEnabled) {
            return fastRoamingEnabled(Output.of(fastRoamingEnabled));
        }

        /**
         * @param hideSsid Indicates whether or not to hide the SSID from broadcast.
         * 
         * @return builder
         * 
         */
        public Builder hideSsid(@Nullable Output<Boolean> hideSsid) {
            $.hideSsid = hideSsid;
            return this;
        }

        /**
         * @param hideSsid Indicates whether or not to hide the SSID from broadcast.
         * 
         * @return builder
         * 
         */
        public Builder hideSsid(Boolean hideSsid) {
            return hideSsid(Output.of(hideSsid));
        }

        /**
         * @param isGuest Indicates that this is a guest WLAN and should use guest behaviors.
         * 
         * @return builder
         * 
         */
        public Builder isGuest(@Nullable Output<Boolean> isGuest) {
            $.isGuest = isGuest;
            return this;
        }

        /**
         * @param isGuest Indicates that this is a guest WLAN and should use guest behaviors.
         * 
         * @return builder
         * 
         */
        public Builder isGuest(Boolean isGuest) {
            return isGuest(Output.of(isGuest));
        }

        /**
         * @param l2Isolation Isolates stations on layer 2 (ethernet) level. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder l2Isolation(@Nullable Output<Boolean> l2Isolation) {
            $.l2Isolation = l2Isolation;
            return this;
        }

        /**
         * @param l2Isolation Isolates stations on layer 2 (ethernet) level. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder l2Isolation(Boolean l2Isolation) {
            return l2Isolation(Output.of(l2Isolation));
        }

        /**
         * @param macFilterEnabled Indicates whether or not the MAC filter is turned of for the network.
         * 
         * @return builder
         * 
         */
        public Builder macFilterEnabled(@Nullable Output<Boolean> macFilterEnabled) {
            $.macFilterEnabled = macFilterEnabled;
            return this;
        }

        /**
         * @param macFilterEnabled Indicates whether or not the MAC filter is turned of for the network.
         * 
         * @return builder
         * 
         */
        public Builder macFilterEnabled(Boolean macFilterEnabled) {
            return macFilterEnabled(Output.of(macFilterEnabled));
        }

        /**
         * @param macFilterLists List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).
         * 
         * @return builder
         * 
         */
        public Builder macFilterLists(@Nullable Output<List<String>> macFilterLists) {
            $.macFilterLists = macFilterLists;
            return this;
        }

        /**
         * @param macFilterLists List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).
         * 
         * @return builder
         * 
         */
        public Builder macFilterLists(List<String> macFilterLists) {
            return macFilterLists(Output.of(macFilterLists));
        }

        /**
         * @param macFilterLists List of MAC addresses to filter (only valid if `mac_filter_enabled` is `true`).
         * 
         * @return builder
         * 
         */
        public Builder macFilterLists(String... macFilterLists) {
            return macFilterLists(List.of(macFilterLists));
        }

        /**
         * @param macFilterPolicy MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Defaults to `deny`.
         * 
         * @return builder
         * 
         */
        public Builder macFilterPolicy(@Nullable Output<String> macFilterPolicy) {
            $.macFilterPolicy = macFilterPolicy;
            return this;
        }

        /**
         * @param macFilterPolicy MAC address filter policy (only valid if `mac_filter_enabled` is `true`). Defaults to `deny`.
         * 
         * @return builder
         * 
         */
        public Builder macFilterPolicy(String macFilterPolicy) {
            return macFilterPolicy(Output.of(macFilterPolicy));
        }

        /**
         * @param minimumDataRate2gKbps Set minimum data rate control for 2G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
         * 
         * @return builder
         * 
         */
        public Builder minimumDataRate2gKbps(@Nullable Output<Integer> minimumDataRate2gKbps) {
            $.minimumDataRate2gKbps = minimumDataRate2gKbps;
            return this;
        }

        /**
         * @param minimumDataRate2gKbps Set minimum data rate control for 2G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `1000`, `2000`, `5500`, `6000`, `9000`, `11000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
         * 
         * @return builder
         * 
         */
        public Builder minimumDataRate2gKbps(Integer minimumDataRate2gKbps) {
            return minimumDataRate2gKbps(Output.of(minimumDataRate2gKbps));
        }

        /**
         * @param minimumDataRate5gKbps Set minimum data rate control for 5G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
         * 
         * @return builder
         * 
         */
        public Builder minimumDataRate5gKbps(@Nullable Output<Integer> minimumDataRate5gKbps) {
            $.minimumDataRate5gKbps = minimumDataRate5gKbps;
            return this;
        }

        /**
         * @param minimumDataRate5gKbps Set minimum data rate control for 5G devices, in Kbps. Use `0` to disable minimum data rates. Valid values are: `6000`, `9000`, `12000`, `18000`, `24000`, `36000`, `48000`,  and `54000`.
         * 
         * @return builder
         * 
         */
        public Builder minimumDataRate5gKbps(Integer minimumDataRate5gKbps) {
            return minimumDataRate5gKbps(Output.of(minimumDataRate5gKbps));
        }

        /**
         * @param multicastEnhance Indicates whether or not Multicast Enhance is turned of for the network.
         * 
         * @return builder
         * 
         */
        public Builder multicastEnhance(@Nullable Output<Boolean> multicastEnhance) {
            $.multicastEnhance = multicastEnhance;
            return this;
        }

        /**
         * @param multicastEnhance Indicates whether or not Multicast Enhance is turned of for the network.
         * 
         * @return builder
         * 
         */
        public Builder multicastEnhance(Boolean multicastEnhance) {
            return multicastEnhance(Output.of(multicastEnhance));
        }

        /**
         * @param name The SSID of the network.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The SSID of the network.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkId ID of the network for this SSID
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId ID of the network for this SSID
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param no2ghzOui Connect high performance clients to 5 GHz only. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder no2ghzOui(@Nullable Output<Boolean> no2ghzOui) {
            $.no2ghzOui = no2ghzOui;
            return this;
        }

        /**
         * @param no2ghzOui Connect high performance clients to 5 GHz only. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder no2ghzOui(Boolean no2ghzOui) {
            return no2ghzOui(Output.of(no2ghzOui));
        }

        /**
         * @param passphrase The passphrase for the network, this is only required if `security` is not set to `open`.
         * 
         * @return builder
         * 
         */
        public Builder passphrase(@Nullable Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        /**
         * @param passphrase The passphrase for the network, this is only required if `security` is not set to `open`.
         * 
         * @return builder
         * 
         */
        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        /**
         * @param pmfMode Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`. Defaults to `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder pmfMode(@Nullable Output<String> pmfMode) {
            $.pmfMode = pmfMode;
            return this;
        }

        /**
         * @param pmfMode Enable Protected Management Frames. This cannot be disabled if using WPA 3. Valid values are `required`, `optional` and `disabled`. Defaults to `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder pmfMode(String pmfMode) {
            return pmfMode(Output.of(pmfMode));
        }

        /**
         * @param proxyArp Reduces airtime usage by allowing APs to &#34;proxy&#34; common broadcast frames as unicast. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder proxyArp(@Nullable Output<Boolean> proxyArp) {
            $.proxyArp = proxyArp;
            return this;
        }

        /**
         * @param proxyArp Reduces airtime usage by allowing APs to &#34;proxy&#34; common broadcast frames as unicast. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder proxyArp(Boolean proxyArp) {
            return proxyArp(Output.of(proxyArp));
        }

        /**
         * @param radiusProfileId ID of the RADIUS profile to use when security `wpaeap`. You can query this via the `unifi.RadiusProfile` data source.
         * 
         * @return builder
         * 
         */
        public Builder radiusProfileId(@Nullable Output<String> radiusProfileId) {
            $.radiusProfileId = radiusProfileId;
            return this;
        }

        /**
         * @param radiusProfileId ID of the RADIUS profile to use when security `wpaeap`. You can query this via the `unifi.RadiusProfile` data source.
         * 
         * @return builder
         * 
         */
        public Builder radiusProfileId(String radiusProfileId) {
            return radiusProfileId(Output.of(radiusProfileId));
        }

        /**
         * @param schedules Start and stop schedules for the WLAN
         * 
         * @return builder
         * 
         */
        public Builder schedules(@Nullable Output<List<WlanScheduleArgs>> schedules) {
            $.schedules = schedules;
            return this;
        }

        /**
         * @param schedules Start and stop schedules for the WLAN
         * 
         * @return builder
         * 
         */
        public Builder schedules(List<WlanScheduleArgs> schedules) {
            return schedules(Output.of(schedules));
        }

        /**
         * @param schedules Start and stop schedules for the WLAN
         * 
         * @return builder
         * 
         */
        public Builder schedules(WlanScheduleArgs... schedules) {
            return schedules(List.of(schedules));
        }

        /**
         * @param security The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.
         * 
         * @return builder
         * 
         */
        public Builder security(@Nullable Output<String> security) {
            $.security = security;
            return this;
        }

        /**
         * @param security The type of WiFi security for this network. Valid values are: `wpapsk`, `wpaeap`, and `open`.
         * 
         * @return builder
         * 
         */
        public Builder security(String security) {
            return security(Output.of(security));
        }

        /**
         * @param site The name of the site to associate the wlan with.
         * 
         * @return builder
         * 
         */
        public Builder site(@Nullable Output<String> site) {
            $.site = site;
            return this;
        }

        /**
         * @param site The name of the site to associate the wlan with.
         * 
         * @return builder
         * 
         */
        public Builder site(String site) {
            return site(Output.of(site));
        }

        /**
         * @param uapsd Enable Unscheduled Automatic Power Save Delivery. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder uapsd(@Nullable Output<Boolean> uapsd) {
            $.uapsd = uapsd;
            return this;
        }

        /**
         * @param uapsd Enable Unscheduled Automatic Power Save Delivery. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder uapsd(Boolean uapsd) {
            return uapsd(Output.of(uapsd));
        }

        /**
         * @param userGroupId ID of the user group to use for this network.
         * 
         * @return builder
         * 
         */
        public Builder userGroupId(@Nullable Output<String> userGroupId) {
            $.userGroupId = userGroupId;
            return this;
        }

        /**
         * @param userGroupId ID of the user group to use for this network.
         * 
         * @return builder
         * 
         */
        public Builder userGroupId(String userGroupId) {
            return userGroupId(Output.of(userGroupId));
        }

        /**
         * @param wlanBand Radio band your WiFi network will use. Defaults to `both`.
         * 
         * @return builder
         * 
         */
        public Builder wlanBand(@Nullable Output<String> wlanBand) {
            $.wlanBand = wlanBand;
            return this;
        }

        /**
         * @param wlanBand Radio band your WiFi network will use. Defaults to `both`.
         * 
         * @return builder
         * 
         */
        public Builder wlanBand(String wlanBand) {
            return wlanBand(Output.of(wlanBand));
        }

        /**
         * @param wpa3Support Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).
         * 
         * @return builder
         * 
         */
        public Builder wpa3Support(@Nullable Output<Boolean> wpa3Support) {
            $.wpa3Support = wpa3Support;
            return this;
        }

        /**
         * @param wpa3Support Enable WPA 3 support (security must be `wpapsk` and PMF must be turned on).
         * 
         * @return builder
         * 
         */
        public Builder wpa3Support(Boolean wpa3Support) {
            return wpa3Support(Output.of(wpa3Support));
        }

        /**
         * @param wpa3Transition Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).
         * 
         * @return builder
         * 
         */
        public Builder wpa3Transition(@Nullable Output<Boolean> wpa3Transition) {
            $.wpa3Transition = wpa3Transition;
            return this;
        }

        /**
         * @param wpa3Transition Enable WPA 3 and WPA 2 support (security must be `wpapsk` and `wpa3_support` must be true).
         * 
         * @return builder
         * 
         */
        public Builder wpa3Transition(Boolean wpa3Transition) {
            return wpa3Transition(Output.of(wpa3Transition));
        }

        public WlanState build() {
            return $;
        }
    }

}
