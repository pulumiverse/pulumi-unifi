// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.unifi;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumiverse.unifi.DynamicDNSArgs;
import com.pulumiverse.unifi.Utilities;
import com.pulumiverse.unifi.inputs.DynamicDNSState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * `unifi.DynamicDNS` manages dynamic DNS settings for different providers.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.unifi.DynamicDNS;
 * import com.pulumi.unifi.DynamicDNSArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new DynamicDNS(&#34;test&#34;, DynamicDNSArgs.builder()
 *             .service(&#34;dyndns&#34;)
 *             .hostName(&#34;my-network.example.com&#34;)
 *             .server(&#34;domains.google.com&#34;)
 *             .login(var_.dns_login())
 *             .password(var_.dns_password())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="unifi:index/dynamicDNS:DynamicDNS")
public class DynamicDNS extends com.pulumi.resources.CustomResource {
    /**
     * The host name to update in the dynamic DNS service.
     * 
     */
    @Export(name="hostName", refs={String.class}, tree="[0]")
    private Output<String> hostName;

    /**
     * @return The host name to update in the dynamic DNS service.
     * 
     */
    public Output<String> hostName() {
        return this.hostName;
    }
    /**
     * The interface for the dynamic DNS. Can be `wan` or `wan2`. Defaults to `wan`.
     * 
     */
    @Export(name="interface", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interface_;

    /**
     * @return The interface for the dynamic DNS. Can be `wan` or `wan2`. Defaults to `wan`.
     * 
     */
    public Output<Optional<String>> interface_() {
        return Codegen.optional(this.interface_);
    }
    /**
     * The server for the dynamic DNS service.
     * 
     */
    @Export(name="login", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> login;

    /**
     * @return The server for the dynamic DNS service.
     * 
     */
    public Output<Optional<String>> login() {
        return Codegen.optional(this.login);
    }
    /**
     * The server for the dynamic DNS service.
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> password;

    /**
     * @return The server for the dynamic DNS service.
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * The server for the dynamic DNS service.
     * 
     */
    @Export(name="server", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> server;

    /**
     * @return The server for the dynamic DNS service.
     * 
     */
    public Output<Optional<String>> server() {
        return Codegen.optional(this.server);
    }
    /**
     * The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).
     * 
     */
    @Export(name="service", refs={String.class}, tree="[0]")
    private Output<String> service;

    /**
     * @return The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).
     * 
     */
    public Output<String> service() {
        return this.service;
    }
    /**
     * The name of the site to associate the dynamic DNS with.
     * 
     */
    @Export(name="site", refs={String.class}, tree="[0]")
    private Output<String> site;

    /**
     * @return The name of the site to associate the dynamic DNS with.
     * 
     */
    public Output<String> site() {
        return this.site;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DynamicDNS(String name) {
        this(name, DynamicDNSArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DynamicDNS(String name, DynamicDNSArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DynamicDNS(String name, DynamicDNSArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("unifi:index/dynamicDNS:DynamicDNS", name, args == null ? DynamicDNSArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DynamicDNS(String name, Output<String> id, @Nullable DynamicDNSState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("unifi:index/dynamicDNS:DynamicDNS", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DynamicDNS get(String name, Output<String> id, @Nullable DynamicDNSState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DynamicDNS(name, id, state, options);
    }
}
