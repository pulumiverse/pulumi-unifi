// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.unifi.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DevicePortOverrideArgs extends com.pulumi.resources.ResourceArgs {

    public static final DevicePortOverrideArgs Empty = new DevicePortOverrideArgs();

    /**
     * Number of ports in the aggregate.
     * 
     */
    @Import(name="aggregateNumPorts")
    private @Nullable Output<Integer> aggregateNumPorts;

    /**
     * @return Number of ports in the aggregate.
     * 
     */
    public Optional<Output<Integer>> aggregateNumPorts() {
        return Optional.ofNullable(this.aggregateNumPorts);
    }

    /**
     * Human-readable name of the port.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Human-readable name of the port.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Switch port number.
     * 
     */
    @Import(name="number", required=true)
    private Output<Integer> number;

    /**
     * @return Switch port number.
     * 
     */
    public Output<Integer> number() {
        return this.number;
    }

    /**
     * Operating mode of the port, valid values are `switch`, `mirror`, and `aggregate`. Defaults to `switch`.
     * 
     */
    @Import(name="opMode")
    private @Nullable Output<String> opMode;

    /**
     * @return Operating mode of the port, valid values are `switch`, `mirror`, and `aggregate`. Defaults to `switch`.
     * 
     */
    public Optional<Output<String>> opMode() {
        return Optional.ofNullable(this.opMode);
    }

    /**
     * ID of the Port Profile used on this port.
     * 
     */
    @Import(name="portProfileId")
    private @Nullable Output<String> portProfileId;

    /**
     * @return ID of the Port Profile used on this port.
     * 
     */
    public Optional<Output<String>> portProfileId() {
        return Optional.ofNullable(this.portProfileId);
    }

    private DevicePortOverrideArgs() {}

    private DevicePortOverrideArgs(DevicePortOverrideArgs $) {
        this.aggregateNumPorts = $.aggregateNumPorts;
        this.name = $.name;
        this.number = $.number;
        this.opMode = $.opMode;
        this.portProfileId = $.portProfileId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DevicePortOverrideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DevicePortOverrideArgs $;

        public Builder() {
            $ = new DevicePortOverrideArgs();
        }

        public Builder(DevicePortOverrideArgs defaults) {
            $ = new DevicePortOverrideArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregateNumPorts Number of ports in the aggregate.
         * 
         * @return builder
         * 
         */
        public Builder aggregateNumPorts(@Nullable Output<Integer> aggregateNumPorts) {
            $.aggregateNumPorts = aggregateNumPorts;
            return this;
        }

        /**
         * @param aggregateNumPorts Number of ports in the aggregate.
         * 
         * @return builder
         * 
         */
        public Builder aggregateNumPorts(Integer aggregateNumPorts) {
            return aggregateNumPorts(Output.of(aggregateNumPorts));
        }

        /**
         * @param name Human-readable name of the port.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Human-readable name of the port.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param number Switch port number.
         * 
         * @return builder
         * 
         */
        public Builder number(Output<Integer> number) {
            $.number = number;
            return this;
        }

        /**
         * @param number Switch port number.
         * 
         * @return builder
         * 
         */
        public Builder number(Integer number) {
            return number(Output.of(number));
        }

        /**
         * @param opMode Operating mode of the port, valid values are `switch`, `mirror`, and `aggregate`. Defaults to `switch`.
         * 
         * @return builder
         * 
         */
        public Builder opMode(@Nullable Output<String> opMode) {
            $.opMode = opMode;
            return this;
        }

        /**
         * @param opMode Operating mode of the port, valid values are `switch`, `mirror`, and `aggregate`. Defaults to `switch`.
         * 
         * @return builder
         * 
         */
        public Builder opMode(String opMode) {
            return opMode(Output.of(opMode));
        }

        /**
         * @param portProfileId ID of the Port Profile used on this port.
         * 
         * @return builder
         * 
         */
        public Builder portProfileId(@Nullable Output<String> portProfileId) {
            $.portProfileId = portProfileId;
            return this;
        }

        /**
         * @param portProfileId ID of the Port Profile used on this port.
         * 
         * @return builder
         * 
         */
        public Builder portProfileId(String portProfileId) {
            return portProfileId(Output.of(portProfileId));
        }

        public DevicePortOverrideArgs build() {
            $.number = Objects.requireNonNull($.number, "expected parameter 'number' to be non-null");
            return $;
        }
    }

}
