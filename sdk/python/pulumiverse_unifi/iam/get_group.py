# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetGroupResult',
    'AwaitableGetGroupResult',
    'get_group',
    'get_group_output',
]

@pulumi.output_type
class GetGroupResult:
    """
    A collection of values returned by getGroup.
    """
    def __init__(__self__, id=None, name=None, qos_rate_max_down=None, qos_rate_max_up=None, site=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if qos_rate_max_down and not isinstance(qos_rate_max_down, int):
            raise TypeError("Expected argument 'qos_rate_max_down' to be a int")
        pulumi.set(__self__, "qos_rate_max_down", qos_rate_max_down)
        if qos_rate_max_up and not isinstance(qos_rate_max_up, int):
            raise TypeError("Expected argument 'qos_rate_max_up' to be a int")
        pulumi.set(__self__, "qos_rate_max_up", qos_rate_max_up)
        if site and not isinstance(site, str):
            raise TypeError("Expected argument 'site' to be a str")
        pulumi.set(__self__, "site", site)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this AP group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the user group to look up. Defaults to `Default`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="qosRateMaxDown")
    def qos_rate_max_down(self) -> _builtins.int:
        return pulumi.get(self, "qos_rate_max_down")

    @_builtins.property
    @pulumi.getter(name="qosRateMaxUp")
    def qos_rate_max_up(self) -> _builtins.int:
        return pulumi.get(self, "qos_rate_max_up")

    @_builtins.property
    @pulumi.getter
    def site(self) -> _builtins.str:
        """
        The name of the site the user group is associated with.
        """
        return pulumi.get(self, "site")


class AwaitableGetGroupResult(GetGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupResult(
            id=self.id,
            name=self.name,
            qos_rate_max_down=self.qos_rate_max_down,
            qos_rate_max_up=self.qos_rate_max_up,
            site=self.site)


def get_group(name: Optional[_builtins.str] = None,
              site: Optional[_builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupResult:
    """
    `iam.Group` data source can be used to retrieve the ID for a user group by name.


    :param _builtins.str name: The name of the user group to look up. Defaults to `Default`.
    :param _builtins.str site: The name of the site the user group is associated with.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['site'] = site
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('unifi:iam/getGroup:getGroup', __args__, opts=opts, typ=GetGroupResult).value

    return AwaitableGetGroupResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        qos_rate_max_down=pulumi.get(__ret__, 'qos_rate_max_down'),
        qos_rate_max_up=pulumi.get(__ret__, 'qos_rate_max_up'),
        site=pulumi.get(__ret__, 'site'))
def get_group_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     site: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGroupResult]:
    """
    `iam.Group` data source can be used to retrieve the ID for a user group by name.


    :param _builtins.str name: The name of the user group to look up. Defaults to `Default`.
    :param _builtins.str site: The name of the site the user group is associated with.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['site'] = site
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('unifi:iam/getGroup:getGroup', __args__, opts=opts, typ=GetGroupResult)
    return __ret__.apply(lambda __response__: GetGroupResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        qos_rate_max_down=pulumi.get(__response__, 'qos_rate_max_down'),
        qos_rate_max_up=pulumi.get(__response__, 'qos_rate_max_up'),
        site=pulumi.get(__response__, 'site')))
