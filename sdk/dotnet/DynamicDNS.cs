// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Unifi
{
    /// <summary>
    /// `unifi.DynamicDNS` manages dynamic DNS settings for different providers.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Unifi = Pulumiverse.Unifi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Unifi.DynamicDNS("test", new()
    ///     {
    ///         Service = "dyndns",
    ///         HostName = "my-network.example.com",
    ///         Server = "domains.google.com",
    ///         Login = @var.Dns_login,
    ///         Password = @var.Dns_password,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [UnifiResourceType("unifi:index/dynamicDNS:DynamicDNS")]
    public partial class DynamicDNS : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The host name to update in the dynamic DNS service.
        /// </summary>
        [Output("hostName")]
        public Output<string> HostName { get; private set; } = null!;

        /// <summary>
        /// The interface for the dynamic DNS. Can be `wan` or `wan2`. Defaults to `wan`.
        /// </summary>
        [Output("interface")]
        public Output<string?> Interface { get; private set; } = null!;

        /// <summary>
        /// The server for the dynamic DNS service.
        /// </summary>
        [Output("login")]
        public Output<string?> Login { get; private set; } = null!;

        /// <summary>
        /// The server for the dynamic DNS service.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The server for the dynamic DNS service.
        /// </summary>
        [Output("server")]
        public Output<string?> Server { get; private set; } = null!;

        /// <summary>
        /// The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;

        /// <summary>
        /// The name of the site to associate the dynamic DNS with.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;


        /// <summary>
        /// Create a DynamicDNS resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DynamicDNS(string name, DynamicDNSArgs args, CustomResourceOptions? options = null)
            : base("unifi:index/dynamicDNS:DynamicDNS", name, args ?? new DynamicDNSArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DynamicDNS(string name, Input<string> id, DynamicDNSState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/dynamicDNS:DynamicDNS", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DynamicDNS resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DynamicDNS Get(string name, Input<string> id, DynamicDNSState? state = null, CustomResourceOptions? options = null)
        {
            return new DynamicDNS(name, id, state, options);
        }
    }

    public sealed class DynamicDNSArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The host name to update in the dynamic DNS service.
        /// </summary>
        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        /// <summary>
        /// The interface for the dynamic DNS. Can be `wan` or `wan2`. Defaults to `wan`.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// The server for the dynamic DNS service.
        /// </summary>
        [Input("login")]
        public Input<string>? Login { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The server for the dynamic DNS service.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The server for the dynamic DNS service.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        /// <summary>
        /// The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        /// <summary>
        /// The name of the site to associate the dynamic DNS with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        public DynamicDNSArgs()
        {
        }
        public static new DynamicDNSArgs Empty => new DynamicDNSArgs();
    }

    public sealed class DynamicDNSState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The host name to update in the dynamic DNS service.
        /// </summary>
        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        /// <summary>
        /// The interface for the dynamic DNS. Can be `wan` or `wan2`. Defaults to `wan`.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// The server for the dynamic DNS service.
        /// </summary>
        [Input("login")]
        public Input<string>? Login { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The server for the dynamic DNS service.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The server for the dynamic DNS service.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        /// <summary>
        /// The Dynamic DNS service provider, various values are supported (for example `dyndns`, etc.).
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// The name of the site to associate the dynamic DNS with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        public DynamicDNSState()
        {
        }
        public static new DynamicDNSState Empty => new DynamicDNSState();
    }
}
