// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Unifi.Setting
{
    /// <summary>
    /// `unifi.setting.Radius` manages settings for the built-in RADIUS server.
    /// </summary>
    [UnifiResourceType("unifi:setting/radius:Radius")]
    public partial class Radius : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable RADIUS accounting Defaults to `false`.
        /// </summary>
        [Output("accountingEnabled")]
        public Output<bool?> AccountingEnabled { get; private set; } = null!;

        /// <summary>
        /// The port for accounting communications. Defaults to `1813`.
        /// </summary>
        [Output("accountingPort")]
        public Output<int?> AccountingPort { get; private set; } = null!;

        /// <summary>
        /// The port for authentication communications. Defaults to `1812`.
        /// </summary>
        [Output("authPort")]
        public Output<int?> AuthPort { get; private set; } = null!;

        /// <summary>
        /// RAIDUS server enabled. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Statistics will be collected from connected clients at this interval. Defaults to `3600`.
        /// </summary>
        [Output("interimUpdateInterval")]
        public Output<int?> InterimUpdateInterval { get; private set; } = null!;

        /// <summary>
        /// RAIDUS secret passphrase. Defaults to ``.
        /// </summary>
        [Output("secret")]
        public Output<string?> Secret { get; private set; } = null!;

        /// <summary>
        /// The name of the site to associate the settings with.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// Encrypt communication between the server and the client. Defaults to `true`.
        /// </summary>
        [Output("tunneledReply")]
        public Output<bool?> TunneledReply { get; private set; } = null!;


        /// <summary>
        /// Create a Radius resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Radius(string name, RadiusArgs? args = null, CustomResourceOptions? options = null)
            : base("unifi:setting/radius:Radius", name, args ?? new RadiusArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Radius(string name, Input<string> id, RadiusState? state = null, CustomResourceOptions? options = null)
            : base("unifi:setting/radius:Radius", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "secret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Radius resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Radius Get(string name, Input<string> id, RadiusState? state = null, CustomResourceOptions? options = null)
        {
            return new Radius(name, id, state, options);
        }
    }

    public sealed class RadiusArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable RADIUS accounting Defaults to `false`.
        /// </summary>
        [Input("accountingEnabled")]
        public Input<bool>? AccountingEnabled { get; set; }

        /// <summary>
        /// The port for accounting communications. Defaults to `1813`.
        /// </summary>
        [Input("accountingPort")]
        public Input<int>? AccountingPort { get; set; }

        /// <summary>
        /// The port for authentication communications. Defaults to `1812`.
        /// </summary>
        [Input("authPort")]
        public Input<int>? AuthPort { get; set; }

        /// <summary>
        /// RAIDUS server enabled. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Statistics will be collected from connected clients at this interval. Defaults to `3600`.
        /// </summary>
        [Input("interimUpdateInterval")]
        public Input<int>? InterimUpdateInterval { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// RAIDUS secret passphrase. Defaults to ``.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the site to associate the settings with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Encrypt communication between the server and the client. Defaults to `true`.
        /// </summary>
        [Input("tunneledReply")]
        public Input<bool>? TunneledReply { get; set; }

        public RadiusArgs()
        {
        }
        public static new RadiusArgs Empty => new RadiusArgs();
    }

    public sealed class RadiusState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable RADIUS accounting Defaults to `false`.
        /// </summary>
        [Input("accountingEnabled")]
        public Input<bool>? AccountingEnabled { get; set; }

        /// <summary>
        /// The port for accounting communications. Defaults to `1813`.
        /// </summary>
        [Input("accountingPort")]
        public Input<int>? AccountingPort { get; set; }

        /// <summary>
        /// The port for authentication communications. Defaults to `1812`.
        /// </summary>
        [Input("authPort")]
        public Input<int>? AuthPort { get; set; }

        /// <summary>
        /// RAIDUS server enabled. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Statistics will be collected from connected clients at this interval. Defaults to `3600`.
        /// </summary>
        [Input("interimUpdateInterval")]
        public Input<int>? InterimUpdateInterval { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// RAIDUS secret passphrase. Defaults to ``.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the site to associate the settings with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// Encrypt communication between the server and the client. Defaults to `true`.
        /// </summary>
        [Input("tunneledReply")]
        public Input<bool>? TunneledReply { get; set; }

        public RadiusState()
        {
        }
        public static new RadiusState Empty => new RadiusState();
    }
}
