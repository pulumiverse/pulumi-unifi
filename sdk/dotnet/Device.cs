// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Unifi
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Unifi = Pulumi.Unifi;
    /// using Unifi = Pulumiverse.Unifi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var disabled = Unifi.Port.GetProfile.Invoke(new()
    ///     {
    ///         Name = "Disabled",
    ///     });
    /// 
    ///     var poe = new Unifi.Port.Profile("poe", new()
    ///     {
    ///         Forward = "customize",
    ///         NativeNetworkconfId = @var.Native_network_id,
    ///         TaggedNetworkconfIds = new[]
    ///         {
    ///             @var.Some_vlan_network_id,
    ///         },
    ///         PoeMode = "auto",
    ///     });
    /// 
    ///     var us24Poe = new Unifi.Device("us24Poe", new()
    ///     {
    ///         Mac = "01:23:45:67:89:AB",
    ///         PortOverrides = new[]
    ///         {
    ///             new Unifi.Inputs.DevicePortOverrideArgs
    ///             {
    ///                 Number = 1,
    ///                 Name = "port w/ poe",
    ///                 PortProfileId = poe.Id,
    ///             },
    ///             new Unifi.Inputs.DevicePortOverrideArgs
    ///             {
    ///                 Number = 2,
    ///                 Name = "disabled",
    ///                 PortProfileId = disabled.Apply(getProfileResult =&gt; getProfileResult.Id),
    ///             },
    ///             new Unifi.Inputs.DevicePortOverrideArgs
    ///             {
    ///                 Number = 11,
    ///                 OpMode = "aggregate",
    ///                 AggregateNumPorts = 2,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [UnifiResourceType("unifi:index/device:Device")]
    public partial class Device : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether this resource should tell the controller to adopt the device on create. Defaults to `true`.
        /// </summary>
        [Output("allowAdoption")]
        public Output<bool?> AllowAdoption { get; private set; } = null!;

        /// <summary>
        /// Specifies whether this device should be disabled.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// Specifies whether this resource should tell the controller to forget the device on destroy. Defaults to `true`.
        /// </summary>
        [Output("forgetOnDestroy")]
        public Output<bool?> ForgetOnDestroy { get; private set; } = null!;

        /// <summary>
        /// The MAC address of the device. This can be specified so that the provider can take control of a device (since devices are created through adoption).
        /// </summary>
        [Output("mac")]
        public Output<string> Mac { get; private set; } = null!;

        /// <summary>
        /// The name of the device.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Settings overrides for specific switch ports.
        /// </summary>
        [Output("portOverrides")]
        public Output<ImmutableArray<Outputs.DevicePortOverride>> PortOverrides { get; private set; } = null!;

        /// <summary>
        /// The name of the site to associate the device with.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;


        /// <summary>
        /// Create a Device resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Device(string name, DeviceArgs? args = null, CustomResourceOptions? options = null)
            : base("unifi:index/device:Device", name, args ?? new DeviceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Device(string name, Input<string> id, DeviceState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/device:Device", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Device resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Device Get(string name, Input<string> id, DeviceState? state = null, CustomResourceOptions? options = null)
        {
            return new Device(name, id, state, options);
        }
    }

    public sealed class DeviceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether this resource should tell the controller to adopt the device on create. Defaults to `true`.
        /// </summary>
        [Input("allowAdoption")]
        public Input<bool>? AllowAdoption { get; set; }

        /// <summary>
        /// Specifies whether this resource should tell the controller to forget the device on destroy. Defaults to `true`.
        /// </summary>
        [Input("forgetOnDestroy")]
        public Input<bool>? ForgetOnDestroy { get; set; }

        /// <summary>
        /// The MAC address of the device. This can be specified so that the provider can take control of a device (since devices are created through adoption).
        /// </summary>
        [Input("mac")]
        public Input<string>? Mac { get; set; }

        /// <summary>
        /// The name of the device.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("portOverrides")]
        private InputList<Inputs.DevicePortOverrideArgs>? _portOverrides;

        /// <summary>
        /// Settings overrides for specific switch ports.
        /// </summary>
        public InputList<Inputs.DevicePortOverrideArgs> PortOverrides
        {
            get => _portOverrides ?? (_portOverrides = new InputList<Inputs.DevicePortOverrideArgs>());
            set => _portOverrides = value;
        }

        /// <summary>
        /// The name of the site to associate the device with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        public DeviceArgs()
        {
        }
        public static new DeviceArgs Empty => new DeviceArgs();
    }

    public sealed class DeviceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether this resource should tell the controller to adopt the device on create. Defaults to `true`.
        /// </summary>
        [Input("allowAdoption")]
        public Input<bool>? AllowAdoption { get; set; }

        /// <summary>
        /// Specifies whether this device should be disabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Specifies whether this resource should tell the controller to forget the device on destroy. Defaults to `true`.
        /// </summary>
        [Input("forgetOnDestroy")]
        public Input<bool>? ForgetOnDestroy { get; set; }

        /// <summary>
        /// The MAC address of the device. This can be specified so that the provider can take control of a device (since devices are created through adoption).
        /// </summary>
        [Input("mac")]
        public Input<string>? Mac { get; set; }

        /// <summary>
        /// The name of the device.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("portOverrides")]
        private InputList<Inputs.DevicePortOverrideGetArgs>? _portOverrides;

        /// <summary>
        /// Settings overrides for specific switch ports.
        /// </summary>
        public InputList<Inputs.DevicePortOverrideGetArgs> PortOverrides
        {
            get => _portOverrides ?? (_portOverrides = new InputList<Inputs.DevicePortOverrideGetArgs>());
            set => _portOverrides = value;
        }

        /// <summary>
        /// The name of the site to associate the device with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        public DeviceState()
        {
        }
        public static new DeviceState Empty => new DeviceState();
    }
}
