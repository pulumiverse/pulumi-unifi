// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Unifi
{
    public static class GetNetwork
    {
        /// <summary>
        /// `unifi.Network` data source can be used to retrieve settings for a network by name or ID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Unifi = Pulumi.Unifi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     //retrieve network data by unifi network name
        ///     var lanNetwork = Unifi.GetNetwork.Invoke(new()
        ///     {
        ///         Name = "Default",
        ///     });
        /// 
        ///     //retrieve network data from user record
        ///     var myDevice = Unifi.IAM.GetUser.Invoke(new()
        ///     {
        ///         Mac = "01:23:45:67:89:ab",
        ///     });
        /// 
        ///     var myNetwork = Unifi.GetNetwork.Invoke(new()
        ///     {
        ///         Id = myDevice.Apply(getUserResult =&gt; getUserResult.NetworkId),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNetworkResult> InvokeAsync(GetNetworkArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkResult>("unifi:index/getNetwork:getNetwork", args ?? new GetNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// `unifi.Network` data source can be used to retrieve settings for a network by name or ID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Unifi = Pulumi.Unifi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     //retrieve network data by unifi network name
        ///     var lanNetwork = Unifi.GetNetwork.Invoke(new()
        ///     {
        ///         Name = "Default",
        ///     });
        /// 
        ///     //retrieve network data from user record
        ///     var myDevice = Unifi.IAM.GetUser.Invoke(new()
        ///     {
        ///         Mac = "01:23:45:67:89:ab",
        ///     });
        /// 
        ///     var myNetwork = Unifi.GetNetwork.Invoke(new()
        ///     {
        ///         Id = myDevice.Apply(getUserResult =&gt; getUserResult.NetworkId),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("unifi:index/getNetwork:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// `unifi.Network` data source can be used to retrieve settings for a network by name or ID.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Unifi = Pulumi.Unifi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     //retrieve network data by unifi network name
        ///     var lanNetwork = Unifi.GetNetwork.Invoke(new()
        ///     {
        ///         Name = "Default",
        ///     });
        /// 
        ///     //retrieve network data from user record
        ///     var myDevice = Unifi.IAM.GetUser.Invoke(new()
        ///     {
        ///         Mac = "01:23:45:67:89:ab",
        ///     });
        /// 
        ///     var myNetwork = Unifi.GetNetwork.Invoke(new()
        ///     {
        ///         Id = myDevice.Apply(getUserResult =&gt; getUserResult.NetworkId),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("unifi:index/getNetwork:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the network.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the network.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The name of the site to associate the network with.
        /// </summary>
        [Input("site")]
        public string? Site { get; set; }

        public GetNetworkArgs()
        {
        }
        public static new GetNetworkArgs Empty => new GetNetworkArgs();
    }

    public sealed class GetNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the network.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the network.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the site to associate the network with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        public GetNetworkInvokeArgs()
        {
        }
        public static new GetNetworkInvokeArgs Empty => new GetNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkResult
    {
        /// <summary>
        /// IPv4 addresses for the DNS server to be returned from the DHCP server.
        /// </summary>
        public readonly ImmutableArray<string> DhcpDns;
        /// <summary>
        /// whether DHCP is enabled or not on this network.
        /// </summary>
        public readonly bool DhcpEnabled;
        /// <summary>
        /// lease time for DHCP addresses.
        /// </summary>
        public readonly int DhcpLease;
        /// <summary>
        /// The IPv4 address where the DHCP range of addresses starts.
        /// </summary>
        public readonly string DhcpStart;
        /// <summary>
        /// The IPv4 address where the DHCP range of addresses stops.
        /// </summary>
        public readonly string DhcpStop;
        /// <summary>
        /// Specifies the IPv6 addresses for the DNS server to be returned from the DHCP server. Used if `dhcp_v6_dns_auto` is set to `false`.
        /// </summary>
        public readonly ImmutableArray<string> DhcpV6Dns;
        /// <summary>
        /// Specifies DNS source to propagate. If set `false` the entries in `dhcp_v6_dns` are used, the upstream entries otherwise
        /// </summary>
        public readonly bool DhcpV6DnsAuto;
        /// <summary>
        /// Enable stateful DHCPv6 for static configuration.
        /// </summary>
        public readonly bool DhcpV6Enabled;
        /// <summary>
        /// Specifies the lease time for DHCPv6 addresses.
        /// </summary>
        public readonly int DhcpV6Lease;
        /// <summary>
        /// Start address of the DHCPv6 range. Used in static DHCPv6 configuration.
        /// </summary>
        public readonly string DhcpV6Start;
        /// <summary>
        /// End address of the DHCPv6 range. Used in static DHCPv6 configuration.
        /// </summary>
        public readonly string DhcpV6Stop;
        /// <summary>
        /// Toggles on the DHCP boot options. will be set to true if you have dhcpd*boot*filename, and dhcpd*boot*server set.
        /// </summary>
        public readonly bool DhcpdBootEnabled;
        /// <summary>
        /// the file to PXE boot from on the dhcpd*boot*server.
        /// </summary>
        public readonly string DhcpdBootFilename;
        /// <summary>
        /// IPv4 address of a TFTP server to network boot from.
        /// </summary>
        public readonly string DhcpdBootServer;
        /// <summary>
        /// The domain name of this network.
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// The ID of the network.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies whether IGMP snooping is enabled or not.
        /// </summary>
        public readonly bool IgmpSnooping;
        /// <summary>
        /// Specifies which type of IPv6 connection to use. Must be one of either `static`, `pd`, or `none`.
        /// </summary>
        public readonly string Ipv6InterfaceType;
        /// <summary>
        /// Specifies which WAN interface to use for IPv6 PD. Must be one of either `wan` or `wan2`.
        /// </summary>
        public readonly string Ipv6PdInterface;
        /// <summary>
        /// Specifies the IPv6 Prefix ID.
        /// </summary>
        public readonly string Ipv6PdPrefixid;
        /// <summary>
        /// Start address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.
        /// </summary>
        public readonly string Ipv6PdStart;
        /// <summary>
        /// End address of the DHCPv6 range. Used if `ipv6_interface_type` is set to `pd`.
        /// </summary>
        public readonly string Ipv6PdStop;
        /// <summary>
        /// Specifies whether to enable router advertisements or not.
        /// </summary>
        public readonly bool Ipv6RaEnable;
        /// <summary>
        /// Lifetime in which the address can be used. Address becomes deprecated afterwards. Must be lower than or equal to `ipv6_ra_valid_lifetime`
        /// </summary>
        public readonly int Ipv6RaPreferredLifetime;
        /// <summary>
        /// IPv6 router advertisement priority. Must be one of either `high`, `medium`, or `low`
        /// </summary>
        public readonly string Ipv6RaPriority;
        /// <summary>
        /// Total lifetime in which the address can be used. Must be equal to or greater than `ipv6_ra_preferred_lifetime`.
        /// </summary>
        public readonly int Ipv6RaValidLifetime;
        /// <summary>
        /// Specifies the static IPv6 subnet (when ipv6*interface*type is 'static').
        /// </summary>
        public readonly string Ipv6StaticSubnet;
        /// <summary>
        /// Specifies whether Multicast DNS (mDNS) is enabled or not on the network (Controller &gt;=v7).
        /// </summary>
        public readonly bool MulticastDns;
        /// <summary>
        /// The name of the network.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The group of the network.
        /// </summary>
        public readonly string NetworkGroup;
        /// <summary>
        /// The purpose of the network. One of `corporate`, `guest`, `wan`, or `vlan-only`.
        /// </summary>
        public readonly string Purpose;
        /// <summary>
        /// The name of the site to associate the network with.
        /// </summary>
        public readonly string Site;
        /// <summary>
        /// The subnet of the network (CIDR address).
        /// </summary>
        public readonly string Subnet;
        /// <summary>
        /// The VLAN ID of the network.
        /// </summary>
        public readonly int VlanId;
        /// <summary>
        /// Specifies the IPv6 prefix size to request from ISP. Must be a number between 48 and 64.
        /// </summary>
        public readonly int WanDhcpV6PdSize;
        /// <summary>
        /// DNS servers IPs of the WAN.
        /// </summary>
        public readonly ImmutableArray<string> WanDns;
        /// <summary>
        /// Specifies the WAN egress quality of service.
        /// </summary>
        public readonly int WanEgressQos;
        /// <summary>
        /// The IPv4 gateway of the WAN.
        /// </summary>
        public readonly string WanGateway;
        /// <summary>
        /// The IPv6 gateway of the WAN.
        /// </summary>
        public readonly string WanGatewayV6;
        /// <summary>
        /// The IPv4 address of the WAN.
        /// </summary>
        public readonly string WanIp;
        /// <summary>
        /// The IPv6 address of the WAN.
        /// </summary>
        public readonly string WanIpv6;
        /// <summary>
        /// The IPv4 netmask of the WAN.
        /// </summary>
        public readonly string WanNetmask;
        /// <summary>
        /// Specifies the WAN network group. One of either `WAN`, `WAN2` or `WAN_LTE_FAILOVER`.
        /// </summary>
        public readonly string WanNetworkgroup;
        /// <summary>
        /// The IPv6 prefix length of the WAN. Must be between 1 and 128.
        /// </summary>
        public readonly int WanPrefixlen;
        /// <summary>
        /// Specifies the IPV4 WAN connection type. One of either `disabled`, `static`, `dhcp`, or `pppoe`.
        /// </summary>
        public readonly string WanType;
        /// <summary>
        /// Specifies the IPV6 WAN connection type. Must be one of either `disabled`, `static`, or `dhcpv6`.
        /// </summary>
        public readonly string WanTypeV6;
        /// <summary>
        /// Specifies the IPV4 WAN username.
        /// </summary>
        public readonly string WanUsername;
        /// <summary>
        /// Specifies the IPV4 WAN password.
        /// </summary>
        public readonly string XWanPassword;

        [OutputConstructor]
        private GetNetworkResult(
            ImmutableArray<string> dhcpDns,

            bool dhcpEnabled,

            int dhcpLease,

            string dhcpStart,

            string dhcpStop,

            ImmutableArray<string> dhcpV6Dns,

            bool dhcpV6DnsAuto,

            bool dhcpV6Enabled,

            int dhcpV6Lease,

            string dhcpV6Start,

            string dhcpV6Stop,

            bool dhcpdBootEnabled,

            string dhcpdBootFilename,

            string dhcpdBootServer,

            string domainName,

            string id,

            bool igmpSnooping,

            string ipv6InterfaceType,

            string ipv6PdInterface,

            string ipv6PdPrefixid,

            string ipv6PdStart,

            string ipv6PdStop,

            bool ipv6RaEnable,

            int ipv6RaPreferredLifetime,

            string ipv6RaPriority,

            int ipv6RaValidLifetime,

            string ipv6StaticSubnet,

            bool multicastDns,

            string name,

            string networkGroup,

            string purpose,

            string site,

            string subnet,

            int vlanId,

            int wanDhcpV6PdSize,

            ImmutableArray<string> wanDns,

            int wanEgressQos,

            string wanGateway,

            string wanGatewayV6,

            string wanIp,

            string wanIpv6,

            string wanNetmask,

            string wanNetworkgroup,

            int wanPrefixlen,

            string wanType,

            string wanTypeV6,

            string wanUsername,

            string xWanPassword)
        {
            DhcpDns = dhcpDns;
            DhcpEnabled = dhcpEnabled;
            DhcpLease = dhcpLease;
            DhcpStart = dhcpStart;
            DhcpStop = dhcpStop;
            DhcpV6Dns = dhcpV6Dns;
            DhcpV6DnsAuto = dhcpV6DnsAuto;
            DhcpV6Enabled = dhcpV6Enabled;
            DhcpV6Lease = dhcpV6Lease;
            DhcpV6Start = dhcpV6Start;
            DhcpV6Stop = dhcpV6Stop;
            DhcpdBootEnabled = dhcpdBootEnabled;
            DhcpdBootFilename = dhcpdBootFilename;
            DhcpdBootServer = dhcpdBootServer;
            DomainName = domainName;
            Id = id;
            IgmpSnooping = igmpSnooping;
            Ipv6InterfaceType = ipv6InterfaceType;
            Ipv6PdInterface = ipv6PdInterface;
            Ipv6PdPrefixid = ipv6PdPrefixid;
            Ipv6PdStart = ipv6PdStart;
            Ipv6PdStop = ipv6PdStop;
            Ipv6RaEnable = ipv6RaEnable;
            Ipv6RaPreferredLifetime = ipv6RaPreferredLifetime;
            Ipv6RaPriority = ipv6RaPriority;
            Ipv6RaValidLifetime = ipv6RaValidLifetime;
            Ipv6StaticSubnet = ipv6StaticSubnet;
            MulticastDns = multicastDns;
            Name = name;
            NetworkGroup = networkGroup;
            Purpose = purpose;
            Site = site;
            Subnet = subnet;
            VlanId = vlanId;
            WanDhcpV6PdSize = wanDhcpV6PdSize;
            WanDns = wanDns;
            WanEgressQos = wanEgressQos;
            WanGateway = wanGateway;
            WanGatewayV6 = wanGatewayV6;
            WanIp = wanIp;
            WanIpv6 = wanIpv6;
            WanNetmask = wanNetmask;
            WanNetworkgroup = wanNetworkgroup;
            WanPrefixlen = wanPrefixlen;
            WanType = wanType;
            WanTypeV6 = wanTypeV6;
            WanUsername = wanUsername;
            XWanPassword = xWanPassword;
        }
    }
}
