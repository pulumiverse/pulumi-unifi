// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Unifi.Port
{
    /// <summary>
    /// `unifi.port.Profile` manages a port profile for use on network switches.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Unifi = Pulumiverse.Unifi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var vlanId = config.GetDouble("vlanId") ?? 10;
    ///     var vlan = new Unifi.Network("vlan", new()
    ///     {
    ///         Purpose = "corporate",
    ///         Subnet = "10.0.0.1/24",
    ///         VlanId = vlanId,
    ///         DhcpStart = "10.0.0.6",
    ///         DhcpStop = "10.0.0.254",
    ///         DhcpEnabled = true,
    ///     });
    /// 
    ///     var poeDisabled = new Unifi.Port.Profile("poeDisabled", new()
    ///     {
    ///         NativeNetworkconfId = vlan.Id,
    ///         PoeMode = "off",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [UnifiResourceType("unifi:port/profile:Profile")]
    public partial class Profile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
        /// </summary>
        [Output("autoneg")]
        public Output<bool?> Autoneg { get; private set; } = null!;

        /// <summary>
        /// The type of 802.1X control to use. Can be `auto`, `force_authorized`, `force_unauthorized`, `mac_based` or `multi_host`. Defaults to `force_authorized`.
        /// </summary>
        [Output("dot1xCtrl")]
        public Output<string?> Dot1xCtrl { get; private set; } = null!;

        /// <summary>
        /// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
        /// </summary>
        [Output("dot1xIdleTimeout")]
        public Output<int?> Dot1xIdleTimeout { get; private set; } = null!;

        /// <summary>
        /// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
        /// </summary>
        [Output("egressRateLimitKbps")]
        public Output<int?> EgressRateLimitKbps { get; private set; } = null!;

        /// <summary>
        /// Enable egress rate limiting for the port profile. Defaults to `false`.
        /// </summary>
        [Output("egressRateLimitKbpsEnabled")]
        public Output<bool?> EgressRateLimitKbpsEnabled { get; private set; } = null!;

        /// <summary>
        /// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
        /// </summary>
        [Output("forward")]
        public Output<string?> Forward { get; private set; } = null!;

        /// <summary>
        /// Enable full duplex for the port profile. Defaults to `false`.
        /// </summary>
        [Output("fullDuplex")]
        public Output<bool?> FullDuplex { get; private set; } = null!;

        /// <summary>
        /// Enable port isolation for the port profile. Defaults to `false`.
        /// </summary>
        [Output("isolation")]
        public Output<bool?> Isolation { get; private set; } = null!;

        /// <summary>
        /// Enable LLDP-MED for the port profile. Defaults to `true`.
        /// </summary>
        [Output("lldpmedEnabled")]
        public Output<bool?> LldpmedEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable LLDP-MED topology change notifications for the port profile.
        /// </summary>
        [Output("lldpmedNotifyEnabled")]
        public Output<bool?> LldpmedNotifyEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the port profile.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of network to use as the main network on the port profile.
        /// </summary>
        [Output("nativeNetworkconfId")]
        public Output<string?> NativeNetworkconfId { get; private set; } = null!;

        /// <summary>
        /// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
        /// </summary>
        [Output("opMode")]
        public Output<string?> OpMode { get; private set; } = null!;

        /// <summary>
        /// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
        /// </summary>
        [Output("poeMode")]
        public Output<string?> PoeMode { get; private set; } = null!;

        /// <summary>
        /// Enable port security for the port profile. Defaults to `false`.
        /// </summary>
        [Output("portSecurityEnabled")]
        public Output<bool?> PortSecurityEnabled { get; private set; } = null!;

        /// <summary>
        /// The MAC addresses associated with the port security for the port profile.
        /// </summary>
        [Output("portSecurityMacAddresses")]
        public Output<ImmutableArray<string>> PortSecurityMacAddresses { get; private set; } = null!;

        /// <summary>
        /// The priority queue 1 level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Output("priorityQueue1Level")]
        public Output<int?> PriorityQueue1Level { get; private set; } = null!;

        /// <summary>
        /// The priority queue 2 level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Output("priorityQueue2Level")]
        public Output<int?> PriorityQueue2Level { get; private set; } = null!;

        /// <summary>
        /// The priority queue 3 level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Output("priorityQueue3Level")]
        public Output<int?> PriorityQueue3Level { get; private set; } = null!;

        /// <summary>
        /// The priority queue 4 level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Output("priorityQueue4Level")]
        public Output<int?> PriorityQueue4Level { get; private set; } = null!;

        /// <summary>
        /// The name of the site to associate the port profile with.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
        /// </summary>
        [Output("speed")]
        public Output<int?> Speed { get; private set; } = null!;

        /// <summary>
        /// Enable broadcast Storm Control for the port profile. Defaults to `false`.
        /// </summary>
        [Output("stormctrlBcastEnabled")]
        public Output<bool?> StormctrlBcastEnabled { get; private set; } = null!;

        /// <summary>
        /// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Output("stormctrlBcastLevel")]
        public Output<int?> StormctrlBcastLevel { get; private set; } = null!;

        /// <summary>
        /// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
        /// </summary>
        [Output("stormctrlBcastRate")]
        public Output<int?> StormctrlBcastRate { get; private set; } = null!;

        /// <summary>
        /// Enable multicast Storm Control for the port profile. Defaults to `false`.
        /// </summary>
        [Output("stormctrlMcastEnabled")]
        public Output<bool?> StormctrlMcastEnabled { get; private set; } = null!;

        /// <summary>
        /// The multicast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Output("stormctrlMcastLevel")]
        public Output<int?> StormctrlMcastLevel { get; private set; } = null!;

        /// <summary>
        /// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
        /// </summary>
        [Output("stormctrlMcastRate")]
        public Output<int?> StormctrlMcastRate { get; private set; } = null!;

        /// <summary>
        /// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
        /// </summary>
        [Output("stormctrlType")]
        public Output<string?> StormctrlType { get; private set; } = null!;

        /// <summary>
        /// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
        /// </summary>
        [Output("stormctrlUcastEnabled")]
        public Output<bool?> StormctrlUcastEnabled { get; private set; } = null!;

        /// <summary>
        /// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Output("stormctrlUcastLevel")]
        public Output<int?> StormctrlUcastLevel { get; private set; } = null!;

        /// <summary>
        /// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
        /// </summary>
        [Output("stormctrlUcastRate")]
        public Output<int?> StormctrlUcastRate { get; private set; } = null!;

        /// <summary>
        /// Enable spanning tree protocol on the port profile. Defaults to `true`.
        /// </summary>
        [Output("stpPortMode")]
        public Output<bool?> StpPortMode { get; private set; } = null!;

        /// <summary>
        /// The IDs of networks to tag traffic with for the port profile.
        /// </summary>
        [Output("taggedNetworkconfIds")]
        public Output<ImmutableArray<string>> TaggedNetworkconfIds { get; private set; } = null!;

        /// <summary>
        /// The ID of network to use as the voice network on the port profile.
        /// </summary>
        [Output("voiceNetworkconfId")]
        public Output<string?> VoiceNetworkconfId { get; private set; } = null!;


        /// <summary>
        /// Create a Profile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Profile(string name, ProfileArgs? args = null, CustomResourceOptions? options = null)
            : base("unifi:port/profile:Profile", name, args ?? new ProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Profile(string name, Input<string> id, ProfileState? state = null, CustomResourceOptions? options = null)
            : base("unifi:port/profile:Profile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Profile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Profile Get(string name, Input<string> id, ProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new Profile(name, id, state, options);
        }
    }

    public sealed class ProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
        /// </summary>
        [Input("autoneg")]
        public Input<bool>? Autoneg { get; set; }

        /// <summary>
        /// The type of 802.1X control to use. Can be `auto`, `force_authorized`, `force_unauthorized`, `mac_based` or `multi_host`. Defaults to `force_authorized`.
        /// </summary>
        [Input("dot1xCtrl")]
        public Input<string>? Dot1xCtrl { get; set; }

        /// <summary>
        /// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
        /// </summary>
        [Input("dot1xIdleTimeout")]
        public Input<int>? Dot1xIdleTimeout { get; set; }

        /// <summary>
        /// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
        /// </summary>
        [Input("egressRateLimitKbps")]
        public Input<int>? EgressRateLimitKbps { get; set; }

        /// <summary>
        /// Enable egress rate limiting for the port profile. Defaults to `false`.
        /// </summary>
        [Input("egressRateLimitKbpsEnabled")]
        public Input<bool>? EgressRateLimitKbpsEnabled { get; set; }

        /// <summary>
        /// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
        /// </summary>
        [Input("forward")]
        public Input<string>? Forward { get; set; }

        /// <summary>
        /// Enable full duplex for the port profile. Defaults to `false`.
        /// </summary>
        [Input("fullDuplex")]
        public Input<bool>? FullDuplex { get; set; }

        /// <summary>
        /// Enable port isolation for the port profile. Defaults to `false`.
        /// </summary>
        [Input("isolation")]
        public Input<bool>? Isolation { get; set; }

        /// <summary>
        /// Enable LLDP-MED for the port profile. Defaults to `true`.
        /// </summary>
        [Input("lldpmedEnabled")]
        public Input<bool>? LldpmedEnabled { get; set; }

        /// <summary>
        /// Enable LLDP-MED topology change notifications for the port profile.
        /// </summary>
        [Input("lldpmedNotifyEnabled")]
        public Input<bool>? LldpmedNotifyEnabled { get; set; }

        /// <summary>
        /// The name of the port profile.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of network to use as the main network on the port profile.
        /// </summary>
        [Input("nativeNetworkconfId")]
        public Input<string>? NativeNetworkconfId { get; set; }

        /// <summary>
        /// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
        /// </summary>
        [Input("opMode")]
        public Input<string>? OpMode { get; set; }

        /// <summary>
        /// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
        /// </summary>
        [Input("poeMode")]
        public Input<string>? PoeMode { get; set; }

        /// <summary>
        /// Enable port security for the port profile. Defaults to `false`.
        /// </summary>
        [Input("portSecurityEnabled")]
        public Input<bool>? PortSecurityEnabled { get; set; }

        [Input("portSecurityMacAddresses")]
        private InputList<string>? _portSecurityMacAddresses;

        /// <summary>
        /// The MAC addresses associated with the port security for the port profile.
        /// </summary>
        public InputList<string> PortSecurityMacAddresses
        {
            get => _portSecurityMacAddresses ?? (_portSecurityMacAddresses = new InputList<string>());
            set => _portSecurityMacAddresses = value;
        }

        /// <summary>
        /// The priority queue 1 level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("priorityQueue1Level")]
        public Input<int>? PriorityQueue1Level { get; set; }

        /// <summary>
        /// The priority queue 2 level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("priorityQueue2Level")]
        public Input<int>? PriorityQueue2Level { get; set; }

        /// <summary>
        /// The priority queue 3 level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("priorityQueue3Level")]
        public Input<int>? PriorityQueue3Level { get; set; }

        /// <summary>
        /// The priority queue 4 level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("priorityQueue4Level")]
        public Input<int>? PriorityQueue4Level { get; set; }

        /// <summary>
        /// The name of the site to associate the port profile with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
        /// </summary>
        [Input("speed")]
        public Input<int>? Speed { get; set; }

        /// <summary>
        /// Enable broadcast Storm Control for the port profile. Defaults to `false`.
        /// </summary>
        [Input("stormctrlBcastEnabled")]
        public Input<bool>? StormctrlBcastEnabled { get; set; }

        /// <summary>
        /// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("stormctrlBcastLevel")]
        public Input<int>? StormctrlBcastLevel { get; set; }

        /// <summary>
        /// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
        /// </summary>
        [Input("stormctrlBcastRate")]
        public Input<int>? StormctrlBcastRate { get; set; }

        /// <summary>
        /// Enable multicast Storm Control for the port profile. Defaults to `false`.
        /// </summary>
        [Input("stormctrlMcastEnabled")]
        public Input<bool>? StormctrlMcastEnabled { get; set; }

        /// <summary>
        /// The multicast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("stormctrlMcastLevel")]
        public Input<int>? StormctrlMcastLevel { get; set; }

        /// <summary>
        /// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
        /// </summary>
        [Input("stormctrlMcastRate")]
        public Input<int>? StormctrlMcastRate { get; set; }

        /// <summary>
        /// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
        /// </summary>
        [Input("stormctrlType")]
        public Input<string>? StormctrlType { get; set; }

        /// <summary>
        /// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
        /// </summary>
        [Input("stormctrlUcastEnabled")]
        public Input<bool>? StormctrlUcastEnabled { get; set; }

        /// <summary>
        /// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("stormctrlUcastLevel")]
        public Input<int>? StormctrlUcastLevel { get; set; }

        /// <summary>
        /// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
        /// </summary>
        [Input("stormctrlUcastRate")]
        public Input<int>? StormctrlUcastRate { get; set; }

        /// <summary>
        /// Enable spanning tree protocol on the port profile. Defaults to `true`.
        /// </summary>
        [Input("stpPortMode")]
        public Input<bool>? StpPortMode { get; set; }

        [Input("taggedNetworkconfIds")]
        private InputList<string>? _taggedNetworkconfIds;

        /// <summary>
        /// The IDs of networks to tag traffic with for the port profile.
        /// </summary>
        public InputList<string> TaggedNetworkconfIds
        {
            get => _taggedNetworkconfIds ?? (_taggedNetworkconfIds = new InputList<string>());
            set => _taggedNetworkconfIds = value;
        }

        /// <summary>
        /// The ID of network to use as the voice network on the port profile.
        /// </summary>
        [Input("voiceNetworkconfId")]
        public Input<string>? VoiceNetworkconfId { get; set; }

        public ProfileArgs()
        {
        }
        public static new ProfileArgs Empty => new ProfileArgs();
    }

    public sealed class ProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable link auto negotiation for the port profile. When set to `true` this overrides `speed`. Defaults to `true`.
        /// </summary>
        [Input("autoneg")]
        public Input<bool>? Autoneg { get; set; }

        /// <summary>
        /// The type of 802.1X control to use. Can be `auto`, `force_authorized`, `force_unauthorized`, `mac_based` or `multi_host`. Defaults to `force_authorized`.
        /// </summary>
        [Input("dot1xCtrl")]
        public Input<string>? Dot1xCtrl { get; set; }

        /// <summary>
        /// The timeout, in seconds, to use when using the MAC Based 802.1X control. Can be between 0 and 65535 Defaults to `300`.
        /// </summary>
        [Input("dot1xIdleTimeout")]
        public Input<int>? Dot1xIdleTimeout { get; set; }

        /// <summary>
        /// The egress rate limit, in kpbs, for the port profile. Can be between `64` and `9999999`.
        /// </summary>
        [Input("egressRateLimitKbps")]
        public Input<int>? EgressRateLimitKbps { get; set; }

        /// <summary>
        /// Enable egress rate limiting for the port profile. Defaults to `false`.
        /// </summary>
        [Input("egressRateLimitKbpsEnabled")]
        public Input<bool>? EgressRateLimitKbpsEnabled { get; set; }

        /// <summary>
        /// The type forwarding to use for the port profile. Can be `all`, `native`, `customize` or `disabled`. Defaults to `native`.
        /// </summary>
        [Input("forward")]
        public Input<string>? Forward { get; set; }

        /// <summary>
        /// Enable full duplex for the port profile. Defaults to `false`.
        /// </summary>
        [Input("fullDuplex")]
        public Input<bool>? FullDuplex { get; set; }

        /// <summary>
        /// Enable port isolation for the port profile. Defaults to `false`.
        /// </summary>
        [Input("isolation")]
        public Input<bool>? Isolation { get; set; }

        /// <summary>
        /// Enable LLDP-MED for the port profile. Defaults to `true`.
        /// </summary>
        [Input("lldpmedEnabled")]
        public Input<bool>? LldpmedEnabled { get; set; }

        /// <summary>
        /// Enable LLDP-MED topology change notifications for the port profile.
        /// </summary>
        [Input("lldpmedNotifyEnabled")]
        public Input<bool>? LldpmedNotifyEnabled { get; set; }

        /// <summary>
        /// The name of the port profile.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of network to use as the main network on the port profile.
        /// </summary>
        [Input("nativeNetworkconfId")]
        public Input<string>? NativeNetworkconfId { get; set; }

        /// <summary>
        /// The operation mode for the port profile. Can only be `switch` Defaults to `switch`.
        /// </summary>
        [Input("opMode")]
        public Input<string>? OpMode { get; set; }

        /// <summary>
        /// The POE mode for the port profile. Can be one of `auto`, `passv24`, `passthrough` or `off`.
        /// </summary>
        [Input("poeMode")]
        public Input<string>? PoeMode { get; set; }

        /// <summary>
        /// Enable port security for the port profile. Defaults to `false`.
        /// </summary>
        [Input("portSecurityEnabled")]
        public Input<bool>? PortSecurityEnabled { get; set; }

        [Input("portSecurityMacAddresses")]
        private InputList<string>? _portSecurityMacAddresses;

        /// <summary>
        /// The MAC addresses associated with the port security for the port profile.
        /// </summary>
        public InputList<string> PortSecurityMacAddresses
        {
            get => _portSecurityMacAddresses ?? (_portSecurityMacAddresses = new InputList<string>());
            set => _portSecurityMacAddresses = value;
        }

        /// <summary>
        /// The priority queue 1 level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("priorityQueue1Level")]
        public Input<int>? PriorityQueue1Level { get; set; }

        /// <summary>
        /// The priority queue 2 level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("priorityQueue2Level")]
        public Input<int>? PriorityQueue2Level { get; set; }

        /// <summary>
        /// The priority queue 3 level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("priorityQueue3Level")]
        public Input<int>? PriorityQueue3Level { get; set; }

        /// <summary>
        /// The priority queue 4 level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("priorityQueue4Level")]
        public Input<int>? PriorityQueue4Level { get; set; }

        /// <summary>
        /// The name of the site to associate the port profile with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// The link speed to set for the port profile. Can be one of `10`, `100`, `1000`, `2500`, `5000`, `10000`, `20000`, `25000`, `40000`, `50000` or `100000`
        /// </summary>
        [Input("speed")]
        public Input<int>? Speed { get; set; }

        /// <summary>
        /// Enable broadcast Storm Control for the port profile. Defaults to `false`.
        /// </summary>
        [Input("stormctrlBcastEnabled")]
        public Input<bool>? StormctrlBcastEnabled { get; set; }

        /// <summary>
        /// The broadcast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("stormctrlBcastLevel")]
        public Input<int>? StormctrlBcastLevel { get; set; }

        /// <summary>
        /// The broadcast Storm Control rate for the port profile. Can be between 0 and 14880000.
        /// </summary>
        [Input("stormctrlBcastRate")]
        public Input<int>? StormctrlBcastRate { get; set; }

        /// <summary>
        /// Enable multicast Storm Control for the port profile. Defaults to `false`.
        /// </summary>
        [Input("stormctrlMcastEnabled")]
        public Input<bool>? StormctrlMcastEnabled { get; set; }

        /// <summary>
        /// The multicast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("stormctrlMcastLevel")]
        public Input<int>? StormctrlMcastLevel { get; set; }

        /// <summary>
        /// The multicast Storm Control rate for the port profile. Can be between 0 and 14880000.
        /// </summary>
        [Input("stormctrlMcastRate")]
        public Input<int>? StormctrlMcastRate { get; set; }

        /// <summary>
        /// The type of Storm Control to use for the port profile. Can be one of `level` or `rate`.
        /// </summary>
        [Input("stormctrlType")]
        public Input<string>? StormctrlType { get; set; }

        /// <summary>
        /// Enable unknown unicast Storm Control for the port profile. Defaults to `false`.
        /// </summary>
        [Input("stormctrlUcastEnabled")]
        public Input<bool>? StormctrlUcastEnabled { get; set; }

        /// <summary>
        /// The unknown unicast Storm Control level for the port profile. Can be between 0 and 100.
        /// </summary>
        [Input("stormctrlUcastLevel")]
        public Input<int>? StormctrlUcastLevel { get; set; }

        /// <summary>
        /// The unknown unicast Storm Control rate for the port profile. Can be between 0 and 14880000.
        /// </summary>
        [Input("stormctrlUcastRate")]
        public Input<int>? StormctrlUcastRate { get; set; }

        /// <summary>
        /// Enable spanning tree protocol on the port profile. Defaults to `true`.
        /// </summary>
        [Input("stpPortMode")]
        public Input<bool>? StpPortMode { get; set; }

        [Input("taggedNetworkconfIds")]
        private InputList<string>? _taggedNetworkconfIds;

        /// <summary>
        /// The IDs of networks to tag traffic with for the port profile.
        /// </summary>
        public InputList<string> TaggedNetworkconfIds
        {
            get => _taggedNetworkconfIds ?? (_taggedNetworkconfIds = new InputList<string>());
            set => _taggedNetworkconfIds = value;
        }

        /// <summary>
        /// The ID of network to use as the voice network on the port profile.
        /// </summary>
        [Input("voiceNetworkconfId")]
        public Input<string>? VoiceNetworkconfId { get; set; }

        public ProfileState()
        {
        }
        public static new ProfileState Empty => new ProfileState();
    }
}
