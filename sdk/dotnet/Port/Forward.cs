// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Unifi.Port
{
    /// <summary>
    /// `unifi.port.Forward` manages a port forwarding rule on the gateway.
    /// </summary>
    [UnifiResourceType("unifi:port/forward:Forward")]
    public partial class Forward : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The destination port for the forwarding.
        /// </summary>
        [Output("dstPort")]
        public Output<string?> DstPort { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the port forwarding rule is enabled or not. Defaults to `true`. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The IPv4 address to forward traffic to.
        /// </summary>
        [Output("fwdIp")]
        public Output<string?> FwdIp { get; private set; } = null!;

        /// <summary>
        /// The port to forward traffic to.
        /// </summary>
        [Output("fwdPort")]
        public Output<string?> FwdPort { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to log forwarded traffic or not. Defaults to `false`.
        /// </summary>
        [Output("log")]
        public Output<bool?> Log { get; private set; } = null!;

        /// <summary>
        /// The name of the port forwarding rule.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The port forwarding interface. Can be `wan`, `wan2`, or `both`.
        /// </summary>
        [Output("portForwardInterface")]
        public Output<string?> PortForwardInterface { get; private set; } = null!;

        /// <summary>
        /// The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcp_udp`. Defaults to `tcp_udp`.
        /// </summary>
        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        /// <summary>
        /// The name of the site to associate the port forwarding rule with.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.
        /// </summary>
        [Output("srcIp")]
        public Output<string?> SrcIp { get; private set; } = null!;


        /// <summary>
        /// Create a Forward resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Forward(string name, ForwardArgs? args = null, CustomResourceOptions? options = null)
            : base("unifi:port/forward:Forward", name, args ?? new ForwardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Forward(string name, Input<string> id, ForwardState? state = null, CustomResourceOptions? options = null)
            : base("unifi:port/forward:Forward", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Forward resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Forward Get(string name, Input<string> id, ForwardState? state = null, CustomResourceOptions? options = null)
        {
            return new Forward(name, id, state, options);
        }
    }

    public sealed class ForwardArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The destination port for the forwarding.
        /// </summary>
        [Input("dstPort")]
        public Input<string>? DstPort { get; set; }

        /// <summary>
        /// Specifies whether the port forwarding rule is enabled or not. Defaults to `true`. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The IPv4 address to forward traffic to.
        /// </summary>
        [Input("fwdIp")]
        public Input<string>? FwdIp { get; set; }

        /// <summary>
        /// The port to forward traffic to.
        /// </summary>
        [Input("fwdPort")]
        public Input<string>? FwdPort { get; set; }

        /// <summary>
        /// Specifies whether to log forwarded traffic or not. Defaults to `false`.
        /// </summary>
        [Input("log")]
        public Input<bool>? Log { get; set; }

        /// <summary>
        /// The name of the port forwarding rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The port forwarding interface. Can be `wan`, `wan2`, or `both`.
        /// </summary>
        [Input("portForwardInterface")]
        public Input<string>? PortForwardInterface { get; set; }

        /// <summary>
        /// The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcp_udp`. Defaults to `tcp_udp`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The name of the site to associate the port forwarding rule with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.
        /// </summary>
        [Input("srcIp")]
        public Input<string>? SrcIp { get; set; }

        public ForwardArgs()
        {
        }
        public static new ForwardArgs Empty => new ForwardArgs();
    }

    public sealed class ForwardState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The destination port for the forwarding.
        /// </summary>
        [Input("dstPort")]
        public Input<string>? DstPort { get; set; }

        /// <summary>
        /// Specifies whether the port forwarding rule is enabled or not. Defaults to `true`. This will attribute will be removed in a future release. Instead of disabling a port forwarding rule you can remove it from your configuration.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The IPv4 address to forward traffic to.
        /// </summary>
        [Input("fwdIp")]
        public Input<string>? FwdIp { get; set; }

        /// <summary>
        /// The port to forward traffic to.
        /// </summary>
        [Input("fwdPort")]
        public Input<string>? FwdPort { get; set; }

        /// <summary>
        /// Specifies whether to log forwarded traffic or not. Defaults to `false`.
        /// </summary>
        [Input("log")]
        public Input<bool>? Log { get; set; }

        /// <summary>
        /// The name of the port forwarding rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The port forwarding interface. Can be `wan`, `wan2`, or `both`.
        /// </summary>
        [Input("portForwardInterface")]
        public Input<string>? PortForwardInterface { get; set; }

        /// <summary>
        /// The protocol for the port forwarding rule. Can be `tcp`, `udp`, or `tcp_udp`. Defaults to `tcp_udp`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The name of the site to associate the port forwarding rule with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// The source IPv4 address (or CIDR) of the port forwarding rule. For all traffic, specify `any`. Defaults to `any`.
        /// </summary>
        [Input("srcIp")]
        public Input<string>? SrcIp { get; set; }

        public ForwardState()
        {
        }
        public static new ForwardState Empty => new ForwardState();
    }
}
