// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Unifi
{
    /// <summary>
    /// `unifi.StaticRoute` manages a static route.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Unifi = Pulumiverse.Unifi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var nexthop = new Unifi.StaticRoute("nexthop", new()
    ///     {
    ///         Type = "nexthop-route",
    ///         Network = "172.17.0.0/16",
    ///         Name = "basic nexthop",
    ///         Distance = 1,
    ///         NextHop = "172.16.0.1",
    ///     });
    /// 
    ///     var blackhole = new Unifi.StaticRoute("blackhole", new()
    ///     {
    ///         Type = "blackhole",
    ///         Network = blackholeCidr,
    ///         Name = "blackhole traffice to cidr",
    ///         Distance = 1,
    ///     });
    /// 
    ///     var @interface = new Unifi.StaticRoute("interface", new()
    ///     {
    ///         Type = "interface-route",
    ///         Network = wan2Cidr,
    ///         Name = "send traffic over wan2",
    ///         Distance = 1,
    ///         Interface = "WAN2",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [UnifiResourceType("unifi:index/staticRoute:StaticRoute")]
    public partial class StaticRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The distance of the static route.
        /// </summary>
        [Output("distance")]
        public Output<int> Distance { get; private set; } = null!;

        /// <summary>
        /// The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.
        /// </summary>
        [Output("interface")]
        public Output<string?> Interface { get; private set; } = null!;

        /// <summary>
        /// The name of the static route.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network subnet address.
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// The next hop of the static route (only valid for `nexthop-route` type).
        /// </summary>
        [Output("nextHop")]
        public Output<string?> NextHop { get; private set; } = null!;

        /// <summary>
        /// The name of the site to associate the static route with.
        /// </summary>
        [Output("site")]
        public Output<string> Site { get; private set; } = null!;

        /// <summary>
        /// The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a StaticRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StaticRoute(string name, StaticRouteArgs args, CustomResourceOptions? options = null)
            : base("unifi:index/staticRoute:StaticRoute", name, args ?? new StaticRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StaticRoute(string name, Input<string> id, StaticRouteState? state = null, CustomResourceOptions? options = null)
            : base("unifi:index/staticRoute:StaticRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StaticRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StaticRoute Get(string name, Input<string> id, StaticRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new StaticRoute(name, id, state, options);
        }
    }

    public sealed class StaticRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The distance of the static route.
        /// </summary>
        [Input("distance", required: true)]
        public Input<int> Distance { get; set; } = null!;

        /// <summary>
        /// The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// The name of the static route.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network subnet address.
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// The next hop of the static route (only valid for `nexthop-route` type).
        /// </summary>
        [Input("nextHop")]
        public Input<string>? NextHop { get; set; }

        /// <summary>
        /// The name of the site to associate the static route with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public StaticRouteArgs()
        {
        }
        public static new StaticRouteArgs Empty => new StaticRouteArgs();
    }

    public sealed class StaticRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The distance of the static route.
        /// </summary>
        [Input("distance")]
        public Input<int>? Distance { get; set; }

        /// <summary>
        /// The interface of the static route (only valid for `interface-route` type). This can be `WAN1`, `WAN2`, or a network ID.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// The name of the static route.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network subnet address.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// The next hop of the static route (only valid for `nexthop-route` type).
        /// </summary>
        [Input("nextHop")]
        public Input<string>? NextHop { get; set; }

        /// <summary>
        /// The name of the site to associate the static route with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        /// <summary>
        /// The type of static route. Can be `interface-route`, `nexthop-route`, or `blackhole`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public StaticRouteState()
        {
        }
        public static new StaticRouteState Empty => new StaticRouteState();
    }
}
