// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Unifi
{
    public static class GetAccount
    {
        /// <summary>
        /// `unifi.Account` data source can be used to retrieve RADIUS user accounts
        /// </summary>
        public static Task<GetAccountResult> InvokeAsync(GetAccountArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountResult>("unifi:index/getAccount:getAccount", args ?? new GetAccountArgs(), options.WithDefaults());

        /// <summary>
        /// `unifi.Account` data source can be used to retrieve RADIUS user accounts
        /// </summary>
        public static Output<GetAccountResult> Invoke(GetAccountInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountResult>("unifi:index/getAccount:getAccount", args ?? new GetAccountInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// `unifi.Account` data source can be used to retrieve RADIUS user accounts
        /// </summary>
        public static Output<GetAccountResult> Invoke(GetAccountInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountResult>("unifi:index/getAccount:getAccount", args ?? new GetAccountInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the account to look up
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the site the account is associated with.
        /// </summary>
        [Input("site")]
        public string? Site { get; set; }

        public GetAccountArgs()
        {
        }
        public static new GetAccountArgs Empty => new GetAccountArgs();
    }

    public sealed class GetAccountInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the account to look up
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the site the account is associated with.
        /// </summary>
        [Input("site")]
        public Input<string>? Site { get; set; }

        public GetAccountInvokeArgs()
        {
        }
        public static new GetAccountInvokeArgs Empty => new GetAccountInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountResult
    {
        /// <summary>
        /// The ID of this account.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the account to look up
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ID of the network for this account
        /// </summary>
        public readonly string NetworkId;
        /// <summary>
        /// The password of the account.
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// The name of the site the account is associated with.
        /// </summary>
        public readonly string Site;
        /// <summary>
        /// See RFC2868 section 3.2
        /// </summary>
        public readonly int TunnelMediumType;
        /// <summary>
        /// See RFC2868 section 3.1
        /// </summary>
        public readonly int TunnelType;

        [OutputConstructor]
        private GetAccountResult(
            string id,

            string name,

            string networkId,

            string password,

            string site,

            int tunnelMediumType,

            int tunnelType)
        {
            Id = id;
            Name = name;
            NetworkId = networkId;
            Password = password;
            Site = site;
            TunnelMediumType = tunnelMediumType;
            TunnelType = tunnelType;
        }
    }
}
